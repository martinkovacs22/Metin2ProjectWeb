/*
 Navicat Premium Data Transfer

 Source Server         : MT2Monster
 Source Server Type    : MySQL
 Source Server Version : 100616 (10.6.16-MariaDB)
 Source Host           : 217.113.49.243:3306
 Source Schema         : mysql

 Target Server Type    : MySQL
 Target Server Version : 100616 (10.6.16-MariaDB)
 File Encoding         : 65001

 Date: 05/06/2024 18:11:51
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for column_stats
-- ----------------------------
DROP TABLE IF EXISTS `column_stats`;
CREATE TABLE `column_stats`  (
  `db_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `table_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `column_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `min_value` varbinary(255) NULL DEFAULT NULL,
  `max_value` varbinary(255) NULL DEFAULT NULL,
  `nulls_ratio` decimal(12, 4) NULL DEFAULT NULL,
  `avg_length` decimal(12, 4) NULL DEFAULT NULL,
  `avg_frequency` decimal(12, 4) NULL DEFAULT NULL,
  `hist_size` tinyint UNSIGNED NULL DEFAULT NULL,
  `hist_type` enum('SINGLE_PREC_HB','DOUBLE_PREC_HB') CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `histogram` varbinary(255) NULL DEFAULT NULL,
  PRIMARY KEY (`db_name`, `table_name`, `column_name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Statistics on Columns' ROW_FORMAT = Page;

-- ----------------------------
-- Records of column_stats
-- ----------------------------

-- ----------------------------
-- Table structure for columns_priv
-- ----------------------------
DROP TABLE IF EXISTS `columns_priv`;
CREATE TABLE `columns_priv`  (
  `Host` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Table_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Column_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`Host`, `Db`, `User`, `Table_name`, `Column_name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Column privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of columns_priv
-- ----------------------------

-- ----------------------------
-- Table structure for db
-- ----------------------------
DROP TABLE IF EXISTS `db`;
CREATE TABLE `db`  (
  `Host` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  `Delete_history_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  PRIMARY KEY (`Host`, `Db`, `User`) USING BTREE,
  INDEX `User`(`User`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Database privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of db
-- ----------------------------
INSERT INTO `db` VALUES ('%', 'test', '', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'N');
INSERT INTO `db` VALUES ('%', 'test\\_%', '', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'N');

-- ----------------------------
-- Table structure for event
-- ----------------------------
DROP TABLE IF EXISTS `event`;
CREATE TABLE `event`  (
  `db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `body` longblob NOT NULL,
  `definer` varchar(384) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `execute_at` datetime NULL DEFAULT NULL,
  `interval_value` int NULL DEFAULT NULL,
  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL,
  `created` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_executed` datetime NULL DEFAULT NULL,
  `starts` datetime NULL DEFAULT NULL,
  `ends` datetime NULL DEFAULT NULL,
  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'ENABLED',
  `on_completion` enum('DROP','PRESERVE') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'DROP',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','IGNORE_BAD_TABLE_OPTIONS','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH','EMPTY_STRING_IS_NULL','SIMULTANEOUS_ASSIGNMENT','TIME_ROUND_FRACTIONAL') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `comment` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `originator` int UNSIGNED NOT NULL,
  `time_zone` char(64) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT 'SYSTEM',
  `character_set_client` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `body_utf8` longblob NULL,
  PRIMARY KEY (`db`, `name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Events' ROW_FORMAT = Page;

-- ----------------------------
-- Records of event
-- ----------------------------

-- ----------------------------
-- Table structure for func
-- ----------------------------
DROP TABLE IF EXISTS `func`;
CREATE TABLE `func`  (
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `ret` tinyint(1) NOT NULL DEFAULT 0,
  `dl` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `type` enum('function','aggregate') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'User defined functions' ROW_FORMAT = Page;

-- ----------------------------
-- Records of func
-- ----------------------------

-- ----------------------------
-- Table structure for general_log
-- ----------------------------
DROP TABLE IF EXISTS `general_log`;
CREATE TABLE `general_log`  (
  `event_time` timestamp(6) NOT NULL DEFAULT current_timestamp(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `user_host` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `thread_id` bigint UNSIGNED NOT NULL,
  `server_id` int UNSIGNED NOT NULL,
  `command_type` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `argument` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL
) ENGINE = CSV CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'General log' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of general_log
-- ----------------------------

-- ----------------------------
-- Table structure for global_priv
-- ----------------------------
DROP TABLE IF EXISTS `global_priv`;
CREATE TABLE `global_priv`  (
  `Host` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Priv` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (`Host`, `User`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Users and global privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of global_priv
-- ----------------------------
INSERT INTO `global_priv` VALUES ('localhost', 'root', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*0A68AA9F605E7ECA261B7477579437FF56835D64\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('bizzy', 'root', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*0A68AA9F605E7ECA261B7477579437FF56835D64\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('127.0.0.1', 'root', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*0A68AA9F605E7ECA261B7477579437FF56835D64\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('::1', 'root', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*0A68AA9F605E7ECA261B7477579437FF56835D64\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('localhost', '', '{\"access\":0,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('bizzy', '', '{\"access\":0,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('localhost', 'mt2', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*1DA96A411E1563FF227A913C4E3161211DD564F4\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('%', 'admin', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('%', 'ExeKLP', '{\"access\":549755813887,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*CB3C75C68650F81E419F9C6734126F9DB4D6A650\",\"password_last_changed\":1717599034,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false,\"version_id\":100616}');
INSERT INTO `global_priv` VALUES ('%', 'mester08', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('%', 'csirkecsulok', '{\"access\":1073741823,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"password_last_changed\":1717597868,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false}');
INSERT INTO `global_priv` VALUES ('%', 'loli', '{\"access\":549755813887,\"ssl_type\":0,\"ssl_cipher\":\"\",\"x509_issuer\":\"\",\"x509_subject\":\"\",\"max_questions\":0,\"max_updates\":0,\"max_connections\":0,\"max_user_connections\":0,\"max_statement_time\":0.000000,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"*CD603F3D55101C37F1F730803A65D59C43BF8A42\",\"password_last_changed\":1717599068,\"password_lifetime\":-1,\"account_locked\":false,\"default_role\":\"\",\"is_role\":false,\"version_id\":100616}');
INSERT INTO `global_priv` VALUES ('localhost', 'mariadb.sys', '{\"access\":0,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"account_locked\":true,\"password_last_changed\":0}');

-- ----------------------------
-- Table structure for gtid_slave_pos
-- ----------------------------
DROP TABLE IF EXISTS `gtid_slave_pos`;
CREATE TABLE `gtid_slave_pos`  (
  `domain_id` int UNSIGNED NOT NULL,
  `sub_id` bigint UNSIGNED NOT NULL,
  `server_id` int UNSIGNED NOT NULL,
  `seq_no` bigint UNSIGNED NOT NULL,
  PRIMARY KEY (`domain_id`, `sub_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = latin1 COLLATE = latin1_swedish_ci COMMENT = 'Replication slave GTID position' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gtid_slave_pos
-- ----------------------------

-- ----------------------------
-- Table structure for help_category
-- ----------------------------
DROP TABLE IF EXISTS `help_category`;
CREATE TABLE `help_category`  (
  `help_category_id` smallint UNSIGNED NOT NULL,
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `parent_category_id` smallint UNSIGNED NULL DEFAULT NULL,
  `url` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`help_category_id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'help categories' ROW_FORMAT = Page;

-- ----------------------------
-- Records of help_category
-- ----------------------------
INSERT INTO `help_category` VALUES (0, 'Contents', 0, '');
INSERT INTO `help_category` VALUES (1, 'Help Metadata', 0, '');
INSERT INTO `help_category` VALUES (2, 'Data Types', 0, '');
INSERT INTO `help_category` VALUES (3, 'Administration', 0, '');
INSERT INTO `help_category` VALUES (4, 'Functions', 0, '');
INSERT INTO `help_category` VALUES (5, 'Enterprise Encryption Functions', 4, '');
INSERT INTO `help_category` VALUES (6, 'Procedures', 0, '');
INSERT INTO `help_category` VALUES (7, 'Language Structure', 0, '');
INSERT INTO `help_category` VALUES (8, 'Geographic Features', 0, '');
INSERT INTO `help_category` VALUES (9, 'MBR', 8, '');
INSERT INTO `help_category` VALUES (10, 'WKT', 8, '');
INSERT INTO `help_category` VALUES (11, 'Comparison Operators', 4, '');
INSERT INTO `help_category` VALUES (12, 'Logical Operators', 4, '');
INSERT INTO `help_category` VALUES (13, 'Flow Control Functions', 4, '');
INSERT INTO `help_category` VALUES (14, 'Numeric Functions', 4, '');
INSERT INTO `help_category` VALUES (15, 'Date and Time Functions', 4, '');
INSERT INTO `help_category` VALUES (16, 'String Functions', 4, '');
INSERT INTO `help_category` VALUES (17, 'Bit Functions', 4, '');
INSERT INTO `help_category` VALUES (18, 'Encryption Functions', 4, '');
INSERT INTO `help_category` VALUES (19, 'Locking Functions', 4, '');
INSERT INTO `help_category` VALUES (20, 'Information Functions', 4, '');
INSERT INTO `help_category` VALUES (21, 'Spatial Functions', 4, '');
INSERT INTO `help_category` VALUES (22, 'WKT Functions', 21, '');
INSERT INTO `help_category` VALUES (23, 'WKB Functions', 21, '');
INSERT INTO `help_category` VALUES (24, 'Geometry Constructors', 21, '');
INSERT INTO `help_category` VALUES (25, 'Geometry Property Functions', 21, '');
INSERT INTO `help_category` VALUES (26, 'Point Property Functions', 21, '');
INSERT INTO `help_category` VALUES (27, 'LineString Property Functions', 21, '');
INSERT INTO `help_category` VALUES (28, 'Polygon Property Functions', 21, '');
INSERT INTO `help_category` VALUES (29, 'GeometryCollection Property Functions', 21, '');
INSERT INTO `help_category` VALUES (30, 'Geometry Relation Functions', 21, '');
INSERT INTO `help_category` VALUES (31, 'MBR Functions', 21, '');
INSERT INTO `help_category` VALUES (32, 'Aggregate Functions and Modifiers', 4, '');
INSERT INTO `help_category` VALUES (33, 'GROUP BY Functions and Modifiers', 4, '');
INSERT INTO `help_category` VALUES (34, 'Miscellaneous Functions', 4, '');
INSERT INTO `help_category` VALUES (35, 'Data Definition', 0, '');
INSERT INTO `help_category` VALUES (36, 'Data Manipulation', 0, '');
INSERT INTO `help_category` VALUES (37, 'Transactions', 0, '');
INSERT INTO `help_category` VALUES (38, 'Replication Statements', 0, '');
INSERT INTO `help_category` VALUES (39, 'Prepared Statements', 0, '');
INSERT INTO `help_category` VALUES (40, 'Compound Statements', 0, '');
INSERT INTO `help_category` VALUES (41, 'Account Management', 0, '');
INSERT INTO `help_category` VALUES (42, 'Table Maintenance', 0, '');
INSERT INTO `help_category` VALUES (43, 'User-Defined Functions', 0, '');
INSERT INTO `help_category` VALUES (44, 'Plugins', 0, '');
INSERT INTO `help_category` VALUES (45, 'Utility', 0, '');
INSERT INTO `help_category` VALUES (46, 'Storage Engines', 0, '');

-- ----------------------------
-- Table structure for help_keyword
-- ----------------------------
DROP TABLE IF EXISTS `help_keyword`;
CREATE TABLE `help_keyword`  (
  `help_keyword_id` int UNSIGNED NOT NULL,
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`help_keyword_id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'help keywords' ROW_FORMAT = Page;

-- ----------------------------
-- Records of help_keyword
-- ----------------------------
INSERT INTO `help_keyword` VALUES (0, 'HELP_DATE');
INSERT INTO `help_keyword` VALUES (1, 'HELP_VERSION');
INSERT INTO `help_keyword` VALUES (2, 'DEFAULT');
INSERT INTO `help_keyword` VALUES (3, 'SERIAL');
INSERT INTO `help_keyword` VALUES (4, 'VALUE');
INSERT INTO `help_keyword` VALUES (5, 'HELP');
INSERT INTO `help_keyword` VALUES (6, 'ASYMMETRIC_DECRYPT');
INSERT INTO `help_keyword` VALUES (7, 'ASYMMETRIC_DERIVE');
INSERT INTO `help_keyword` VALUES (8, 'ASYMMETRIC_ENCRYPT');
INSERT INTO `help_keyword` VALUES (9, 'ASYMMETRIC_SIGN');
INSERT INTO `help_keyword` VALUES (10, 'ASYMMETRIC_VERIFY');
INSERT INTO `help_keyword` VALUES (11, 'CREATE_ASYMMETRIC_PRIV_KEY');
INSERT INTO `help_keyword` VALUES (12, 'CREATE_ASYMMETRIC_PUB_KEY');
INSERT INTO `help_keyword` VALUES (13, 'CREATE_DH_PARAMETERS');
INSERT INTO `help_keyword` VALUES (14, 'CREATE_DIGEST');
INSERT INTO `help_keyword` VALUES (15, 'ANALYSE');
INSERT INTO `help_keyword` VALUES (16, 'PROCEDURE');
INSERT INTO `help_keyword` VALUES (17, 'CACHE');
INSERT INTO `help_keyword` VALUES (18, 'FLUSH');
INSERT INTO `help_keyword` VALUES (19, 'QUERY');
INSERT INTO `help_keyword` VALUES (20, 'RESET');
INSERT INTO `help_keyword` VALUES (21, 'FALSE');
INSERT INTO `help_keyword` VALUES (22, 'TRUE');
INSERT INTO `help_keyword` VALUES (23, 'BOOL');
INSERT INTO `help_keyword` VALUES (24, 'BOOLEAN');
INSERT INTO `help_keyword` VALUES (25, 'INT1');
INSERT INTO `help_keyword` VALUES (26, 'UNSIGNED');
INSERT INTO `help_keyword` VALUES (27, 'ZEROFILL');
INSERT INTO `help_keyword` VALUES (28, 'INT2');
INSERT INTO `help_keyword` VALUES (29, 'INT3');
INSERT INTO `help_keyword` VALUES (30, 'MIDDLEINT');
INSERT INTO `help_keyword` VALUES (31, 'INT4');
INSERT INTO `help_keyword` VALUES (32, 'INTEGER');
INSERT INTO `help_keyword` VALUES (33, 'INT8');
INSERT INTO `help_keyword` VALUES (34, 'DEC');
INSERT INTO `help_keyword` VALUES (35, 'FIXED');
INSERT INTO `help_keyword` VALUES (36, 'NUMERIC');
INSERT INTO `help_keyword` VALUES (37, 'DECIMAL');
INSERT INTO `help_keyword` VALUES (38, 'FLOAT4');
INSERT INTO `help_keyword` VALUES (39, 'FLOAT8');
INSERT INTO `help_keyword` VALUES (40, 'PRECISION');
INSERT INTO `help_keyword` VALUES (41, 'REAL');
INSERT INTO `help_keyword` VALUES (42, 'DATE');
INSERT INTO `help_keyword` VALUES (43, 'TIMESTAMP');
INSERT INTO `help_keyword` VALUES (44, 'TIME');
INSERT INTO `help_keyword` VALUES (45, 'CHARACTER');
INSERT INTO `help_keyword` VALUES (46, 'NATIONAL');
INSERT INTO `help_keyword` VALUES (47, 'NCHAR');
INSERT INTO `help_keyword` VALUES (48, 'BYTE');
INSERT INTO `help_keyword` VALUES (49, 'CHAR');
INSERT INTO `help_keyword` VALUES (50, 'NVARCHAR');
INSERT INTO `help_keyword` VALUES (51, 'VARCHARACTER');
INSERT INTO `help_keyword` VALUES (52, 'VARYING');
INSERT INTO `help_keyword` VALUES (53, 'LONG');
INSERT INTO `help_keyword` VALUES (54, 'LONGBINARY');
INSERT INTO `help_keyword` VALUES (55, 'ADD');
INSERT INTO `help_keyword` VALUES (56, 'ALTER');
INSERT INTO `help_keyword` VALUES (57, 'CREATE');
INSERT INTO `help_keyword` VALUES (58, 'INDEX');
INSERT INTO `help_keyword` VALUES (59, 'KEY');
INSERT INTO `help_keyword` VALUES (60, 'TABLE');
INSERT INTO `help_keyword` VALUES (61, '=');
INSERT INTO `help_keyword` VALUES (62, '<=>');
INSERT INTO `help_keyword` VALUES (63, '<>');
INSERT INTO `help_keyword` VALUES (64, '<=');
INSERT INTO `help_keyword` VALUES (65, '<');
INSERT INTO `help_keyword` VALUES (66, '>=');
INSERT INTO `help_keyword` VALUES (67, '>');
INSERT INTO `help_keyword` VALUES (68, 'AND');
INSERT INTO `help_keyword` VALUES (69, 'BETWEEN');
INSERT INTO `help_keyword` VALUES (70, 'NOT');
INSERT INTO `help_keyword` VALUES (71, 'COALESCE');
INSERT INTO `help_keyword` VALUES (72, 'GREATEST');
INSERT INTO `help_keyword` VALUES (73, 'IN');
INSERT INTO `help_keyword` VALUES (74, 'INTERVAL');
INSERT INTO `help_keyword` VALUES (75, 'IS');
INSERT INTO `help_keyword` VALUES (76, 'NULL');
INSERT INTO `help_keyword` VALUES (77, 'ISNULL');
INSERT INTO `help_keyword` VALUES (78, 'LEAST');
INSERT INTO `help_keyword` VALUES (79, 'OR');
INSERT INTO `help_keyword` VALUES (80, 'XOR');
INSERT INTO `help_keyword` VALUES (81, ':=');
INSERT INTO `help_keyword` VALUES (82, 'CASE');
INSERT INTO `help_keyword` VALUES (83, 'ELSE');
INSERT INTO `help_keyword` VALUES (84, 'END');
INSERT INTO `help_keyword` VALUES (85, 'THEN');
INSERT INTO `help_keyword` VALUES (86, 'WHEN');
INSERT INTO `help_keyword` VALUES (87, 'IF');
INSERT INTO `help_keyword` VALUES (88, 'IFNULL');
INSERT INTO `help_keyword` VALUES (89, 'NULLIF');
INSERT INTO `help_keyword` VALUES (90, '+');
INSERT INTO `help_keyword` VALUES (91, '-');
INSERT INTO `help_keyword` VALUES (92, '*');
INSERT INTO `help_keyword` VALUES (93, '/');
INSERT INTO `help_keyword` VALUES (94, 'DIV');
INSERT INTO `help_keyword` VALUES (95, 'MOD');
INSERT INTO `help_keyword` VALUES (96, 'ABS');
INSERT INTO `help_keyword` VALUES (97, 'ACOS');
INSERT INTO `help_keyword` VALUES (98, 'ASIN');
INSERT INTO `help_keyword` VALUES (99, 'ATAN');
INSERT INTO `help_keyword` VALUES (100, 'ATAN2');
INSERT INTO `help_keyword` VALUES (101, 'CEIL');
INSERT INTO `help_keyword` VALUES (102, 'CEILING');
INSERT INTO `help_keyword` VALUES (103, 'CONV');
INSERT INTO `help_keyword` VALUES (104, 'COS');
INSERT INTO `help_keyword` VALUES (105, 'COT');
INSERT INTO `help_keyword` VALUES (106, 'CRC32');
INSERT INTO `help_keyword` VALUES (107, 'DEGREES');
INSERT INTO `help_keyword` VALUES (108, 'EXP');
INSERT INTO `help_keyword` VALUES (109, 'FLOOR');
INSERT INTO `help_keyword` VALUES (110, 'LN');
INSERT INTO `help_keyword` VALUES (111, 'LOG');
INSERT INTO `help_keyword` VALUES (112, 'LOG2');
INSERT INTO `help_keyword` VALUES (113, 'LOG10');
INSERT INTO `help_keyword` VALUES (114, '%');
INSERT INTO `help_keyword` VALUES (115, 'PI');
INSERT INTO `help_keyword` VALUES (116, 'POW');
INSERT INTO `help_keyword` VALUES (117, 'POWER');
INSERT INTO `help_keyword` VALUES (118, 'RADIANS');
INSERT INTO `help_keyword` VALUES (119, 'RAND');
INSERT INTO `help_keyword` VALUES (120, 'ROUND');
INSERT INTO `help_keyword` VALUES (121, 'SIGN');
INSERT INTO `help_keyword` VALUES (122, 'SIN');
INSERT INTO `help_keyword` VALUES (123, 'SQRT');
INSERT INTO `help_keyword` VALUES (124, 'TAN');
INSERT INTO `help_keyword` VALUES (125, 'TRUNCATE');
INSERT INTO `help_keyword` VALUES (126, 'ADDDATE');
INSERT INTO `help_keyword` VALUES (127, 'ADDTIME');
INSERT INTO `help_keyword` VALUES (128, 'CONVERT_TZ');
INSERT INTO `help_keyword` VALUES (129, 'CURDATE');
INSERT INTO `help_keyword` VALUES (130, 'CURRENT_DATE');
INSERT INTO `help_keyword` VALUES (131, 'CURRENT_TIME');
INSERT INTO `help_keyword` VALUES (132, 'CURRENT_TIMESTAMP');
INSERT INTO `help_keyword` VALUES (133, 'CURTIME');
INSERT INTO `help_keyword` VALUES (134, 'DATEDIFF');
INSERT INTO `help_keyword` VALUES (135, 'DATE_ADD');
INSERT INTO `help_keyword` VALUES (136, 'DATE_SUB');
INSERT INTO `help_keyword` VALUES (137, 'DAY');
INSERT INTO `help_keyword` VALUES (138, 'DAY_HOUR');
INSERT INTO `help_keyword` VALUES (139, 'DAY_MINUTE');
INSERT INTO `help_keyword` VALUES (140, 'DAY_SECOND');
INSERT INTO `help_keyword` VALUES (141, 'HOUR');
INSERT INTO `help_keyword` VALUES (142, 'HOUR_MINUTE');
INSERT INTO `help_keyword` VALUES (143, 'HOUR_SECOND');
INSERT INTO `help_keyword` VALUES (144, 'MINUTE');
INSERT INTO `help_keyword` VALUES (145, 'MINUTE_SECOND');
INSERT INTO `help_keyword` VALUES (146, 'MONTH');
INSERT INTO `help_keyword` VALUES (147, 'SECOND');
INSERT INTO `help_keyword` VALUES (148, 'YEAR');
INSERT INTO `help_keyword` VALUES (149, 'YEAR_MONTH');
INSERT INTO `help_keyword` VALUES (150, 'DATE_FORMAT');
INSERT INTO `help_keyword` VALUES (151, 'DAYNAME');
INSERT INTO `help_keyword` VALUES (152, 'DAYOFMONTH');
INSERT INTO `help_keyword` VALUES (153, 'DAYOFWEEK');
INSERT INTO `help_keyword` VALUES (154, 'DAYOFYEAR');
INSERT INTO `help_keyword` VALUES (155, 'EXTRACT');
INSERT INTO `help_keyword` VALUES (156, 'FROM_DAYS');
INSERT INTO `help_keyword` VALUES (157, 'FROM_UNIXTIME');
INSERT INTO `help_keyword` VALUES (158, 'GET_FORMAT');
INSERT INTO `help_keyword` VALUES (159, 'LAST_DAY');
INSERT INTO `help_keyword` VALUES (160, 'LOCALTIME');
INSERT INTO `help_keyword` VALUES (161, 'LOCALTIMESTAMP');
INSERT INTO `help_keyword` VALUES (162, 'MAKEDATE');
INSERT INTO `help_keyword` VALUES (163, 'MAKETIME');
INSERT INTO `help_keyword` VALUES (164, 'MICROSECOND');
INSERT INTO `help_keyword` VALUES (165, 'MONTHNAME');
INSERT INTO `help_keyword` VALUES (166, 'NOW');
INSERT INTO `help_keyword` VALUES (167, 'PERIOD_ADD');
INSERT INTO `help_keyword` VALUES (168, 'PERIOD_DIFF');
INSERT INTO `help_keyword` VALUES (169, 'QUARTER');
INSERT INTO `help_keyword` VALUES (170, 'SEC_TO_TIME');
INSERT INTO `help_keyword` VALUES (171, 'STR_TO_DATE');
INSERT INTO `help_keyword` VALUES (172, 'SUBDATE');
INSERT INTO `help_keyword` VALUES (173, 'SUBTIME');
INSERT INTO `help_keyword` VALUES (174, 'SYSDATE');
INSERT INTO `help_keyword` VALUES (175, 'FUNCTION');
INSERT INTO `help_keyword` VALUES (176, 'TIMEDIFF');
INSERT INTO `help_keyword` VALUES (177, 'TIMESTAMPADD');
INSERT INTO `help_keyword` VALUES (178, 'TIMESTAMPDIFF');
INSERT INTO `help_keyword` VALUES (179, 'TIME_FORMAT');
INSERT INTO `help_keyword` VALUES (180, 'TIME_TO_SEC');
INSERT INTO `help_keyword` VALUES (181, 'TO_DAYS');
INSERT INTO `help_keyword` VALUES (182, 'TO_SECONDS');
INSERT INTO `help_keyword` VALUES (183, 'UNIX_TIMESTAMP');
INSERT INTO `help_keyword` VALUES (184, 'UTC_DATE');
INSERT INTO `help_keyword` VALUES (185, 'UTC_TIME');
INSERT INTO `help_keyword` VALUES (186, 'UTC_TIMESTAMP');
INSERT INTO `help_keyword` VALUES (187, 'WEEK');
INSERT INTO `help_keyword` VALUES (188, 'WEEKDAY');
INSERT INTO `help_keyword` VALUES (189, 'WEEKOFYEAR');
INSERT INTO `help_keyword` VALUES (190, 'YEARWEEK');
INSERT INTO `help_keyword` VALUES (191, 'ASCII');
INSERT INTO `help_keyword` VALUES (192, 'BIN');
INSERT INTO `help_keyword` VALUES (193, 'BIT_LENGTH');
INSERT INTO `help_keyword` VALUES (194, 'CHAR_LENGTH');
INSERT INTO `help_keyword` VALUES (195, 'CHARACTER_LENGTH');
INSERT INTO `help_keyword` VALUES (196, 'CONCAT');
INSERT INTO `help_keyword` VALUES (197, 'CONCAT_WS');
INSERT INTO `help_keyword` VALUES (198, 'ELT');
INSERT INTO `help_keyword` VALUES (199, 'EXPORT_SET');
INSERT INTO `help_keyword` VALUES (200, 'FIELD');
INSERT INTO `help_keyword` VALUES (201, 'FIND_IN_SET');
INSERT INTO `help_keyword` VALUES (202, 'FORMAT');
INSERT INTO `help_keyword` VALUES (203, 'FROM_BASE64');
INSERT INTO `help_keyword` VALUES (204, 'HEX');
INSERT INTO `help_keyword` VALUES (205, 'INSERT');
INSERT INTO `help_keyword` VALUES (206, 'INSTR');
INSERT INTO `help_keyword` VALUES (207, 'LCASE');
INSERT INTO `help_keyword` VALUES (208, 'LEFT');
INSERT INTO `help_keyword` VALUES (209, 'LENGTH');
INSERT INTO `help_keyword` VALUES (210, 'LOAD_FILE');
INSERT INTO `help_keyword` VALUES (211, 'LOCATE');
INSERT INTO `help_keyword` VALUES (212, 'LOWER');
INSERT INTO `help_keyword` VALUES (213, 'LPAD');
INSERT INTO `help_keyword` VALUES (214, 'LTRIM');
INSERT INTO `help_keyword` VALUES (215, 'MAKE_SET');
INSERT INTO `help_keyword` VALUES (216, 'MID');
INSERT INTO `help_keyword` VALUES (217, 'OCT');
INSERT INTO `help_keyword` VALUES (218, 'OCTET_LENGTH');
INSERT INTO `help_keyword` VALUES (219, 'ORD');
INSERT INTO `help_keyword` VALUES (220, 'POSITION');
INSERT INTO `help_keyword` VALUES (221, 'QUOTE');
INSERT INTO `help_keyword` VALUES (222, 'REPEAT');
INSERT INTO `help_keyword` VALUES (223, 'REPLACE');
INSERT INTO `help_keyword` VALUES (224, 'REVERSE');
INSERT INTO `help_keyword` VALUES (225, 'RIGHT');
INSERT INTO `help_keyword` VALUES (226, 'RPAD');
INSERT INTO `help_keyword` VALUES (227, 'RTRIM');
INSERT INTO `help_keyword` VALUES (228, 'SOUNDEX');
INSERT INTO `help_keyword` VALUES (229, 'LIKE');
INSERT INTO `help_keyword` VALUES (230, 'SOUNDS');
INSERT INTO `help_keyword` VALUES (231, 'SPACE');
INSERT INTO `help_keyword` VALUES (232, 'SUBSTR');
INSERT INTO `help_keyword` VALUES (233, 'SUBSTRING');
INSERT INTO `help_keyword` VALUES (234, 'SUBSTRING_INDEX');
INSERT INTO `help_keyword` VALUES (235, 'TO_BASE64');
INSERT INTO `help_keyword` VALUES (236, 'BOTH');
INSERT INTO `help_keyword` VALUES (237, 'FROM');
INSERT INTO `help_keyword` VALUES (238, 'LEADING');
INSERT INTO `help_keyword` VALUES (239, 'TRAILING');
INSERT INTO `help_keyword` VALUES (240, 'TRIM');
INSERT INTO `help_keyword` VALUES (241, 'UCASE');
INSERT INTO `help_keyword` VALUES (242, 'UNHEX');
INSERT INTO `help_keyword` VALUES (243, 'UPPER');
INSERT INTO `help_keyword` VALUES (244, 'WEIGHT_STRING');
INSERT INTO `help_keyword` VALUES (245, 'ESCAPE');
INSERT INTO `help_keyword` VALUES (246, 'STRCMP');
INSERT INTO `help_keyword` VALUES (247, 'REGEXP');
INSERT INTO `help_keyword` VALUES (248, 'RLIKE');
INSERT INTO `help_keyword` VALUES (249, 'AGAINST');
INSERT INTO `help_keyword` VALUES (250, 'EXPANSION');
INSERT INTO `help_keyword` VALUES (251, 'MATCH');
INSERT INTO `help_keyword` VALUES (252, 'MODE');
INSERT INTO `help_keyword` VALUES (253, 'WITH');
INSERT INTO `help_keyword` VALUES (254, 'BINARY');
INSERT INTO `help_keyword` VALUES (255, 'CAST');
INSERT INTO `help_keyword` VALUES (256, 'CONVERT');
INSERT INTO `help_keyword` VALUES (257, 'DATETIME');
INSERT INTO `help_keyword` VALUES (258, 'SIGNED');
INSERT INTO `help_keyword` VALUES (259, 'EXTRACTVALUE');
INSERT INTO `help_keyword` VALUES (260, 'UPDATEXML');
INSERT INTO `help_keyword` VALUES (261, '|');
INSERT INTO `help_keyword` VALUES (262, '&');
INSERT INTO `help_keyword` VALUES (263, '^');
INSERT INTO `help_keyword` VALUES (264, '<<');
INSERT INTO `help_keyword` VALUES (265, '>>');
INSERT INTO `help_keyword` VALUES (266, '~');
INSERT INTO `help_keyword` VALUES (267, 'BIT_COUNT');
INSERT INTO `help_keyword` VALUES (268, 'AES_DECRYPT');
INSERT INTO `help_keyword` VALUES (269, 'AES_ENCRYPT');
INSERT INTO `help_keyword` VALUES (270, 'COMPRESS');
INSERT INTO `help_keyword` VALUES (271, 'DECODE');
INSERT INTO `help_keyword` VALUES (272, 'DES_DECRYPT');
INSERT INTO `help_keyword` VALUES (273, 'DES_ENCRYPT');
INSERT INTO `help_keyword` VALUES (274, 'ENCODE');
INSERT INTO `help_keyword` VALUES (275, 'ENCRYPT');
INSERT INTO `help_keyword` VALUES (276, 'MD5');
INSERT INTO `help_keyword` VALUES (277, 'OLD_PASSWORD');
INSERT INTO `help_keyword` VALUES (278, 'PASSWORD');
INSERT INTO `help_keyword` VALUES (279, 'RANDOM_BYTES');
INSERT INTO `help_keyword` VALUES (280, 'SHA');
INSERT INTO `help_keyword` VALUES (281, 'SHA1');
INSERT INTO `help_keyword` VALUES (282, 'SHA2');
INSERT INTO `help_keyword` VALUES (283, 'UNCOMPRESS');
INSERT INTO `help_keyword` VALUES (284, 'UNCOMPRESSED_LENGTH');
INSERT INTO `help_keyword` VALUES (285, 'VALIDATE_PASSWORD_STRENGTH');
INSERT INTO `help_keyword` VALUES (286, 'GET_LOCK');
INSERT INTO `help_keyword` VALUES (287, 'IS_FREE_LOCK');
INSERT INTO `help_keyword` VALUES (288, 'IS_USED_LOCK');
INSERT INTO `help_keyword` VALUES (289, 'RELEASE_LOCK');
INSERT INTO `help_keyword` VALUES (290, 'BENCHMARK');
INSERT INTO `help_keyword` VALUES (291, 'CHARSET');
INSERT INTO `help_keyword` VALUES (292, 'COERCIBILITY');
INSERT INTO `help_keyword` VALUES (293, 'COLLATION');
INSERT INTO `help_keyword` VALUES (294, 'CONNECTION_ID');
INSERT INTO `help_keyword` VALUES (295, 'CURRENT_USER');
INSERT INTO `help_keyword` VALUES (296, 'DATABASE');
INSERT INTO `help_keyword` VALUES (297, 'FOUND_ROWS');
INSERT INTO `help_keyword` VALUES (298, 'LAST_INSERT_ID');
INSERT INTO `help_keyword` VALUES (299, 'ROW_COUNT');
INSERT INTO `help_keyword` VALUES (300, 'SCHEMA');
INSERT INTO `help_keyword` VALUES (301, 'SESSION_USER');
INSERT INTO `help_keyword` VALUES (302, 'SYSTEM_USER');
INSERT INTO `help_keyword` VALUES (303, 'USER');
INSERT INTO `help_keyword` VALUES (304, 'VERSION');
INSERT INTO `help_keyword` VALUES (305, 'GEOMCOLLFROMTEXT');
INSERT INTO `help_keyword` VALUES (306, 'GEOMETRYCOLLECTIONFROMTEXT');
INSERT INTO `help_keyword` VALUES (307, 'GEOMETRYFROMTEXT');
INSERT INTO `help_keyword` VALUES (308, 'GEOMFROMTEXT');
INSERT INTO `help_keyword` VALUES (309, 'LINEFROMTEXT');
INSERT INTO `help_keyword` VALUES (310, 'LINESTRINGFROMTEXT');
INSERT INTO `help_keyword` VALUES (311, 'MLINEFROMTEXT');
INSERT INTO `help_keyword` VALUES (312, 'MULTILINESTRINGFROMTEXT');
INSERT INTO `help_keyword` VALUES (313, 'MPOINTFROMTEXT');
INSERT INTO `help_keyword` VALUES (314, 'MULTIPOINTFROMTEXT');
INSERT INTO `help_keyword` VALUES (315, 'MPOLYFROMTEXT');
INSERT INTO `help_keyword` VALUES (316, 'MULTIPOLYGONFROMTEXT');
INSERT INTO `help_keyword` VALUES (317, 'POINTFROMTEXT');
INSERT INTO `help_keyword` VALUES (318, 'POLYFROMTEXT');
INSERT INTO `help_keyword` VALUES (319, 'POLYGONFROMTEXT');
INSERT INTO `help_keyword` VALUES (320, 'ST_GEOMCOLLFROMTEXT');
INSERT INTO `help_keyword` VALUES (321, 'ST_GEOMETRYCOLLECTIONFROMTEXT');
INSERT INTO `help_keyword` VALUES (322, 'ST_GEOMETRYFROMTEXT');
INSERT INTO `help_keyword` VALUES (323, 'ST_GEOMFROMTEXT');
INSERT INTO `help_keyword` VALUES (324, 'ST_LINEFROMTEXT');
INSERT INTO `help_keyword` VALUES (325, 'ST_LINESTRINGFROMTEXT');
INSERT INTO `help_keyword` VALUES (326, 'ST_POINTFROMTEXT');
INSERT INTO `help_keyword` VALUES (327, 'ST_POLYFROMTEXT');
INSERT INTO `help_keyword` VALUES (328, 'ST_POLYGONFROMTEXT');
INSERT INTO `help_keyword` VALUES (329, 'GEOMCOLLFROMWKB');
INSERT INTO `help_keyword` VALUES (330, 'GEOMETRYCOLLECTIONFROMWKB');
INSERT INTO `help_keyword` VALUES (331, 'GEOMETRYFROMWKB');
INSERT INTO `help_keyword` VALUES (332, 'GEOMFROMWKB');
INSERT INTO `help_keyword` VALUES (333, 'LINEFROMWKB');
INSERT INTO `help_keyword` VALUES (334, 'LINESTRINGFROMWKB');
INSERT INTO `help_keyword` VALUES (335, 'MLINEFROMWKB');
INSERT INTO `help_keyword` VALUES (336, 'MULTILINESTRINGFROMWKB');
INSERT INTO `help_keyword` VALUES (337, 'MPOINTFROMWKB');
INSERT INTO `help_keyword` VALUES (338, 'MULTIPOINTFROMWKB');
INSERT INTO `help_keyword` VALUES (339, 'MPOLYFROMWKB');
INSERT INTO `help_keyword` VALUES (340, 'MULTIPOLYGONFROMWKB');
INSERT INTO `help_keyword` VALUES (341, 'POINTFROMWKB');
INSERT INTO `help_keyword` VALUES (342, 'POLYFROMWKB');
INSERT INTO `help_keyword` VALUES (343, 'POLYGONFROMWKB');
INSERT INTO `help_keyword` VALUES (344, 'ST_GEOMCOLLFROMWKB');
INSERT INTO `help_keyword` VALUES (345, 'ST_GEOMETRYCOLLECTIONFROMWKB');
INSERT INTO `help_keyword` VALUES (346, 'ST_GEOMETRYFROMWKB');
INSERT INTO `help_keyword` VALUES (347, 'ST_GEOMFROMWKB');
INSERT INTO `help_keyword` VALUES (348, 'ST_LINEFROMWKB');
INSERT INTO `help_keyword` VALUES (349, 'ST_LINESTRINGFROMWKB');
INSERT INTO `help_keyword` VALUES (350, 'ST_POINTFROMWKB');
INSERT INTO `help_keyword` VALUES (351, 'ST_POLYFROMWKB');
INSERT INTO `help_keyword` VALUES (352, 'ST_POLYGONFROMWKB');
INSERT INTO `help_keyword` VALUES (353, 'GEOMETRYCOLLECTION');
INSERT INTO `help_keyword` VALUES (354, 'LINESTRING');
INSERT INTO `help_keyword` VALUES (355, 'MULTILINESTRING');
INSERT INTO `help_keyword` VALUES (356, 'MULTIPOINT');
INSERT INTO `help_keyword` VALUES (357, 'MULTIPOLYGON');
INSERT INTO `help_keyword` VALUES (358, 'POINT');
INSERT INTO `help_keyword` VALUES (359, 'POLYGON');
INSERT INTO `help_keyword` VALUES (360, 'ASBINARY');
INSERT INTO `help_keyword` VALUES (361, 'ASWKB');
INSERT INTO `help_keyword` VALUES (362, 'ASTEXT');
INSERT INTO `help_keyword` VALUES (363, 'ASWKT');
INSERT INTO `help_keyword` VALUES (364, 'ST_ASBINARY');
INSERT INTO `help_keyword` VALUES (365, 'ST_ASWKB');
INSERT INTO `help_keyword` VALUES (366, 'ST_ASTEXT');
INSERT INTO `help_keyword` VALUES (367, 'ST_ASWKT');
INSERT INTO `help_keyword` VALUES (368, 'DIMENSION');
INSERT INTO `help_keyword` VALUES (369, 'ENVELOPE');
INSERT INTO `help_keyword` VALUES (370, 'GEOMETRYTYPE');
INSERT INTO `help_keyword` VALUES (371, 'ISEMPTY');
INSERT INTO `help_keyword` VALUES (372, 'ISSIMPLE');
INSERT INTO `help_keyword` VALUES (373, 'SRID');
INSERT INTO `help_keyword` VALUES (374, 'ST_DIMENSION');
INSERT INTO `help_keyword` VALUES (375, 'ST_ENVELOPE');
INSERT INTO `help_keyword` VALUES (376, 'ST_GEOMETRYTYPE');
INSERT INTO `help_keyword` VALUES (377, 'ST_ISEMPTY');
INSERT INTO `help_keyword` VALUES (378, 'ST_ISSIMPLE');
INSERT INTO `help_keyword` VALUES (379, 'ST_SRID');
INSERT INTO `help_keyword` VALUES (380, 'ST_X');
INSERT INTO `help_keyword` VALUES (381, 'ST_Y');
INSERT INTO `help_keyword` VALUES (382, 'X');
INSERT INTO `help_keyword` VALUES (383, 'Y');
INSERT INTO `help_keyword` VALUES (384, 'ENDPOINT');
INSERT INTO `help_keyword` VALUES (385, 'GLENGTH');
INSERT INTO `help_keyword` VALUES (386, 'ISCLOSED');
INSERT INTO `help_keyword` VALUES (387, 'NUMPOINTS');
INSERT INTO `help_keyword` VALUES (388, 'POINTN');
INSERT INTO `help_keyword` VALUES (389, 'ST_ENDPOINT');
INSERT INTO `help_keyword` VALUES (390, 'ST_ISCLOSED');
INSERT INTO `help_keyword` VALUES (391, 'ST_NUMPOINTS');
INSERT INTO `help_keyword` VALUES (392, 'ST_POINTN');
INSERT INTO `help_keyword` VALUES (393, 'ST_STARTPOINT');
INSERT INTO `help_keyword` VALUES (394, 'STARTPOINT');
INSERT INTO `help_keyword` VALUES (395, 'AREA');
INSERT INTO `help_keyword` VALUES (396, 'CENTROID');
INSERT INTO `help_keyword` VALUES (397, 'EXTERIORRING');
INSERT INTO `help_keyword` VALUES (398, 'INTERIORRINGN');
INSERT INTO `help_keyword` VALUES (399, 'NUMINTERIORRINGS');
INSERT INTO `help_keyword` VALUES (400, 'ST_AREA');
INSERT INTO `help_keyword` VALUES (401, 'ST_CENTROID');
INSERT INTO `help_keyword` VALUES (402, 'ST_EXTERIORRING');
INSERT INTO `help_keyword` VALUES (403, 'ST_INTERIORRINGN');
INSERT INTO `help_keyword` VALUES (404, 'ST_NUMINTERIORRINGS');
INSERT INTO `help_keyword` VALUES (405, 'GEOMETRYN');
INSERT INTO `help_keyword` VALUES (406, 'NUMGEOMETRIES');
INSERT INTO `help_keyword` VALUES (407, 'ST_GEOMETRYN');
INSERT INTO `help_keyword` VALUES (408, 'ST_NUMGEOMETRIES');
INSERT INTO `help_keyword` VALUES (409, 'BUFFER');
INSERT INTO `help_keyword` VALUES (410, 'ST_BUFFER');
INSERT INTO `help_keyword` VALUES (411, 'ST_DIFFERENCE');
INSERT INTO `help_keyword` VALUES (412, 'ST_INTERSECTION');
INSERT INTO `help_keyword` VALUES (413, 'ST_SYMDIFFERENCE');
INSERT INTO `help_keyword` VALUES (414, 'ST_UNION');
INSERT INTO `help_keyword` VALUES (415, 'ST_CONTAINS');
INSERT INTO `help_keyword` VALUES (416, 'CROSSES');
INSERT INTO `help_keyword` VALUES (417, 'ST_CROSSES');
INSERT INTO `help_keyword` VALUES (418, 'ST_DISJOINT');
INSERT INTO `help_keyword` VALUES (419, 'ST_DISTANCE');
INSERT INTO `help_keyword` VALUES (420, 'ST_EQUALS');
INSERT INTO `help_keyword` VALUES (421, 'ST_INTERSECTS');
INSERT INTO `help_keyword` VALUES (422, 'ST_OVERLAPS');
INSERT INTO `help_keyword` VALUES (423, 'ST_TOUCHES');
INSERT INTO `help_keyword` VALUES (424, 'ST_WITHIN');
INSERT INTO `help_keyword` VALUES (425, 'TOUCHES');
INSERT INTO `help_keyword` VALUES (426, 'MBRCONTAINS');
INSERT INTO `help_keyword` VALUES (427, 'MBRDISJOINT');
INSERT INTO `help_keyword` VALUES (428, 'MBREQUAL');
INSERT INTO `help_keyword` VALUES (429, 'MBRINTERSECTS');
INSERT INTO `help_keyword` VALUES (430, 'MBROVERLAPS');
INSERT INTO `help_keyword` VALUES (431, 'MBRTOUCHES');
INSERT INTO `help_keyword` VALUES (432, 'MBRWITHIN');
INSERT INTO `help_keyword` VALUES (433, 'CONTAINS');
INSERT INTO `help_keyword` VALUES (434, 'DISJOINT');
INSERT INTO `help_keyword` VALUES (435, 'EQUALS');
INSERT INTO `help_keyword` VALUES (436, 'INTERSECTS');
INSERT INTO `help_keyword` VALUES (437, 'OVERLAPS');
INSERT INTO `help_keyword` VALUES (438, 'WITHIN');
INSERT INTO `help_keyword` VALUES (439, 'GTID_SUBSET');
INSERT INTO `help_keyword` VALUES (440, 'GTID_SUBTRACT');
INSERT INTO `help_keyword` VALUES (441, 'SQL_THREAD_WAIT_AFTER_GTIDS');
INSERT INTO `help_keyword` VALUES (442, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS');
INSERT INTO `help_keyword` VALUES (443, 'AVG');
INSERT INTO `help_keyword` VALUES (444, 'DISTINCT');
INSERT INTO `help_keyword` VALUES (445, 'BIT_AND');
INSERT INTO `help_keyword` VALUES (446, 'BIT_OR');
INSERT INTO `help_keyword` VALUES (447, 'BIT_XOR');
INSERT INTO `help_keyword` VALUES (448, 'COUNT');
INSERT INTO `help_keyword` VALUES (449, 'ASC');
INSERT INTO `help_keyword` VALUES (450, 'BY');
INSERT INTO `help_keyword` VALUES (451, 'DESC');
INSERT INTO `help_keyword` VALUES (452, 'GROUP_CONCAT');
INSERT INTO `help_keyword` VALUES (453, 'ORDER');
INSERT INTO `help_keyword` VALUES (454, 'SEPARATOR');
INSERT INTO `help_keyword` VALUES (455, 'MAX');
INSERT INTO `help_keyword` VALUES (456, 'MIN');
INSERT INTO `help_keyword` VALUES (457, 'STD');
INSERT INTO `help_keyword` VALUES (458, 'STDDEV');
INSERT INTO `help_keyword` VALUES (459, 'STDDEV_POP');
INSERT INTO `help_keyword` VALUES (460, 'STDDEV_SAMP');
INSERT INTO `help_keyword` VALUES (461, 'SUM');
INSERT INTO `help_keyword` VALUES (462, 'VAR_POP');
INSERT INTO `help_keyword` VALUES (463, 'VAR_SAMP');
INSERT INTO `help_keyword` VALUES (464, 'VARIANCE');
INSERT INTO `help_keyword` VALUES (465, 'INET_ATON');
INSERT INTO `help_keyword` VALUES (466, 'INET_NTOA');
INSERT INTO `help_keyword` VALUES (467, 'INET6_ATON');
INSERT INTO `help_keyword` VALUES (468, 'INET6_NTOA');
INSERT INTO `help_keyword` VALUES (469, 'IS_IPV4');
INSERT INTO `help_keyword` VALUES (470, 'IS_IPV4_COMPAT');
INSERT INTO `help_keyword` VALUES (471, 'IS_IPV4_MAPPED');
INSERT INTO `help_keyword` VALUES (472, 'IS_IPV6');
INSERT INTO `help_keyword` VALUES (473, 'MASTER_POS_WAIT');
INSERT INTO `help_keyword` VALUES (474, 'NAME_CONST');
INSERT INTO `help_keyword` VALUES (475, 'SLEEP');
INSERT INTO `help_keyword` VALUES (476, 'UUID');
INSERT INTO `help_keyword` VALUES (477, 'UUID_SHORT');
INSERT INTO `help_keyword` VALUES (478, 'VALUES');
INSERT INTO `help_keyword` VALUES (479, 'COLLATE');
INSERT INTO `help_keyword` VALUES (480, 'DATA');
INSERT INTO `help_keyword` VALUES (481, 'DIRECTORY');
INSERT INTO `help_keyword` VALUES (482, 'NAME');
INSERT INTO `help_keyword` VALUES (483, 'SET');
INSERT INTO `help_keyword` VALUES (484, 'UPGRADE');
INSERT INTO `help_keyword` VALUES (485, 'COMMENT');
INSERT INTO `help_keyword` VALUES (486, 'COMPLETION');
INSERT INTO `help_keyword` VALUES (487, 'DEFINER');
INSERT INTO `help_keyword` VALUES (488, 'DISABLE');
INSERT INTO `help_keyword` VALUES (489, 'DO');
INSERT INTO `help_keyword` VALUES (490, 'ENABLE');
INSERT INTO `help_keyword` VALUES (491, 'EVENT');
INSERT INTO `help_keyword` VALUES (492, 'ON');
INSERT INTO `help_keyword` VALUES (493, 'PRESERVE');
INSERT INTO `help_keyword` VALUES (494, 'RENAME');
INSERT INTO `help_keyword` VALUES (495, 'SCHEDULE');
INSERT INTO `help_keyword` VALUES (496, 'SLAVE');
INSERT INTO `help_keyword` VALUES (497, 'GROUP');
INSERT INTO `help_keyword` VALUES (498, 'LOGFILE');
INSERT INTO `help_keyword` VALUES (499, 'OPTIONS');
INSERT INTO `help_keyword` VALUES (500, 'SERVER');
INSERT INTO `help_keyword` VALUES (501, 'AFTER');
INSERT INTO `help_keyword` VALUES (502, 'ALGORITHM');
INSERT INTO `help_keyword` VALUES (503, 'ANALYZE');
INSERT INTO `help_keyword` VALUES (504, 'AUTO_INCREMENT');
INSERT INTO `help_keyword` VALUES (505, 'AVG_ROW_LENGTH');
INSERT INTO `help_keyword` VALUES (506, 'CHANGE');
INSERT INTO `help_keyword` VALUES (507, 'CHECK');
INSERT INTO `help_keyword` VALUES (508, 'CHECKSUM');
INSERT INTO `help_keyword` VALUES (509, 'COLUMN');
INSERT INTO `help_keyword` VALUES (510, 'COLUMNS');
INSERT INTO `help_keyword` VALUES (511, 'CONNECTION');
INSERT INTO `help_keyword` VALUES (512, 'CONSTRAINT');
INSERT INTO `help_keyword` VALUES (513, 'DELAY_KEY_WRITE');
INSERT INTO `help_keyword` VALUES (514, 'DISCARD');
INSERT INTO `help_keyword` VALUES (515, 'DROP');
INSERT INTO `help_keyword` VALUES (516, 'ENGINE');
INSERT INTO `help_keyword` VALUES (517, 'EXCHANGE');
INSERT INTO `help_keyword` VALUES (518, 'FIRST');
INSERT INTO `help_keyword` VALUES (519, 'FOREIGN');
INSERT INTO `help_keyword` VALUES (520, 'FULLTEXT');
INSERT INTO `help_keyword` VALUES (521, 'IGNORE');
INSERT INTO `help_keyword` VALUES (522, 'IMPORT');
INSERT INTO `help_keyword` VALUES (523, 'INSERT_METHOD');
INSERT INTO `help_keyword` VALUES (524, 'KEYS');
INSERT INTO `help_keyword` VALUES (525, 'KEY_BLOCK_SIZE');
INSERT INTO `help_keyword` VALUES (526, 'LOCK');
INSERT INTO `help_keyword` VALUES (527, 'MAX_ROWS');
INSERT INTO `help_keyword` VALUES (528, 'MIN_ROWS');
INSERT INTO `help_keyword` VALUES (529, 'MODIFY');
INSERT INTO `help_keyword` VALUES (530, 'OPTIMIZE');
INSERT INTO `help_keyword` VALUES (531, 'PACK_KEYS');
INSERT INTO `help_keyword` VALUES (532, 'PARSER');
INSERT INTO `help_keyword` VALUES (533, 'PARTITION');
INSERT INTO `help_keyword` VALUES (534, 'PRIMARY');
INSERT INTO `help_keyword` VALUES (535, 'REBUILD');
INSERT INTO `help_keyword` VALUES (536, 'REMOVE');
INSERT INTO `help_keyword` VALUES (537, 'REORGANIZE');
INSERT INTO `help_keyword` VALUES (538, 'REPAIR');
INSERT INTO `help_keyword` VALUES (539, 'ROW_FORMAT');
INSERT INTO `help_keyword` VALUES (540, 'SPATIAL');
INSERT INTO `help_keyword` VALUES (541, 'STATS_AUTO_RECALC');
INSERT INTO `help_keyword` VALUES (542, 'STATS_PERSISTENT');
INSERT INTO `help_keyword` VALUES (543, 'STATS_SAMPLE_PAGES');
INSERT INTO `help_keyword` VALUES (544, 'TABLESPACE');
INSERT INTO `help_keyword` VALUES (545, 'TYPE');
INSERT INTO `help_keyword` VALUES (546, 'UNION');
INSERT INTO `help_keyword` VALUES (547, 'UNIQUE');
INSERT INTO `help_keyword` VALUES (548, 'DATAFILE');
INSERT INTO `help_keyword` VALUES (549, 'INITIAL_SIZE');
INSERT INTO `help_keyword` VALUES (550, 'WAIT');
INSERT INTO `help_keyword` VALUES (551, 'VIEW');
INSERT INTO `help_keyword` VALUES (552, 'EXISTS');
INSERT INTO `help_keyword` VALUES (553, 'AT');
INSERT INTO `help_keyword` VALUES (554, 'ENDS');
INSERT INTO `help_keyword` VALUES (555, 'EVERY');
INSERT INTO `help_keyword` VALUES (556, 'STARTS');
INSERT INTO `help_keyword` VALUES (557, 'BTREE');
INSERT INTO `help_keyword` VALUES (558, 'HOST');
INSERT INTO `help_keyword` VALUES (559, 'OWNER');
INSERT INTO `help_keyword` VALUES (560, 'PORT');
INSERT INTO `help_keyword` VALUES (561, 'SOCKET');
INSERT INTO `help_keyword` VALUES (562, 'WRAPPER');
INSERT INTO `help_keyword` VALUES (563, 'ACTION');
INSERT INTO `help_keyword` VALUES (564, 'ARCHIVE');
INSERT INTO `help_keyword` VALUES (565, 'CASCADE');
INSERT INTO `help_keyword` VALUES (566, 'COMPACT');
INSERT INTO `help_keyword` VALUES (567, 'COMPRESSED');
INSERT INTO `help_keyword` VALUES (568, 'CSV');
INSERT INTO `help_keyword` VALUES (569, 'DELETE');
INSERT INTO `help_keyword` VALUES (570, 'DYNAMIC');
INSERT INTO `help_keyword` VALUES (571, 'FEDERATED');
INSERT INTO `help_keyword` VALUES (572, 'FULL');
INSERT INTO `help_keyword` VALUES (573, 'HEAP');
INSERT INTO `help_keyword` VALUES (574, 'INNODB');
INSERT INTO `help_keyword` VALUES (575, 'MERGE');
INSERT INTO `help_keyword` VALUES (576, 'MRG_MYISAM');
INSERT INTO `help_keyword` VALUES (577, 'MYISAM');
INSERT INTO `help_keyword` VALUES (578, 'NDB');
INSERT INTO `help_keyword` VALUES (579, 'NDBCLUSTER');
INSERT INTO `help_keyword` VALUES (580, 'NO');
INSERT INTO `help_keyword` VALUES (581, 'PARTIAL');
INSERT INTO `help_keyword` VALUES (582, 'REDUNDANT');
INSERT INTO `help_keyword` VALUES (583, 'REFERENCES');
INSERT INTO `help_keyword` VALUES (584, 'RESTRICT');
INSERT INTO `help_keyword` VALUES (585, 'UPDATE');
INSERT INTO `help_keyword` VALUES (586, 'AUTOEXTEND_SIZE');
INSERT INTO `help_keyword` VALUES (587, 'EXTENT_SIZE');
INSERT INTO `help_keyword` VALUES (588, 'MAX_SIZE');
INSERT INTO `help_keyword` VALUES (589, 'NODEGROUP');
INSERT INTO `help_keyword` VALUES (590, 'USE');
INSERT INTO `help_keyword` VALUES (591, 'TRIGGER');
INSERT INTO `help_keyword` VALUES (592, 'TEMPORARY');
INSERT INTO `help_keyword` VALUES (593, 'CALL');
INSERT INTO `help_keyword` VALUES (594, 'LIMIT');
INSERT INTO `help_keyword` VALUES (595, 'LOW_PRIORITY');
INSERT INTO `help_keyword` VALUES (596, 'QUICK');
INSERT INTO `help_keyword` VALUES (597, 'USING');
INSERT INTO `help_keyword` VALUES (598, 'WHERE');
INSERT INTO `help_keyword` VALUES (599, 'CLOSE');
INSERT INTO `help_keyword` VALUES (600, 'HANDLER');
INSERT INTO `help_keyword` VALUES (601, 'LAST');
INSERT INTO `help_keyword` VALUES (602, 'NEXT');
INSERT INTO `help_keyword` VALUES (603, 'OPEN');
INSERT INTO `help_keyword` VALUES (604, 'PREV');
INSERT INTO `help_keyword` VALUES (605, 'READ');
INSERT INTO `help_keyword` VALUES (606, 'DELAYED');
INSERT INTO `help_keyword` VALUES (607, 'DUPLICATE');
INSERT INTO `help_keyword` VALUES (608, 'HIGH_PRIORITY');
INSERT INTO `help_keyword` VALUES (609, 'INTO');
INSERT INTO `help_keyword` VALUES (610, 'SELECT');
INSERT INTO `help_keyword` VALUES (611, 'CONCURRENT');
INSERT INTO `help_keyword` VALUES (612, 'ENCLOSED');
INSERT INTO `help_keyword` VALUES (613, 'ESCAPED');
INSERT INTO `help_keyword` VALUES (614, 'FIELDS');
INSERT INTO `help_keyword` VALUES (615, 'INFILE');
INSERT INTO `help_keyword` VALUES (616, 'LINES');
INSERT INTO `help_keyword` VALUES (617, 'LOAD');
INSERT INTO `help_keyword` VALUES (618, 'LOCAL');
INSERT INTO `help_keyword` VALUES (619, 'OPTIONALLY');
INSERT INTO `help_keyword` VALUES (620, 'STARTING');
INSERT INTO `help_keyword` VALUES (621, 'TERMINATED');
INSERT INTO `help_keyword` VALUES (622, 'IDENTIFIED');
INSERT INTO `help_keyword` VALUES (623, 'ROWS');
INSERT INTO `help_keyword` VALUES (624, 'ALL');
INSERT INTO `help_keyword` VALUES (625, 'AS');
INSERT INTO `help_keyword` VALUES (626, 'DISTINCTROW');
INSERT INTO `help_keyword` VALUES (627, 'DUMPFILE');
INSERT INTO `help_keyword` VALUES (628, 'FOR');
INSERT INTO `help_keyword` VALUES (629, 'HAVING');
INSERT INTO `help_keyword` VALUES (630, 'JOIN');
INSERT INTO `help_keyword` VALUES (631, 'MEMORY');
INSERT INTO `help_keyword` VALUES (632, 'OFFSET');
INSERT INTO `help_keyword` VALUES (633, 'OUTFILE');
INSERT INTO `help_keyword` VALUES (634, 'SHARE');
INSERT INTO `help_keyword` VALUES (635, 'SQL_BIG_RESULT');
INSERT INTO `help_keyword` VALUES (636, 'SQL_BUFFER_RESULT');
INSERT INTO `help_keyword` VALUES (637, 'SQL_CACHE');
INSERT INTO `help_keyword` VALUES (638, 'SQL_CALC_FOUND_ROWS');
INSERT INTO `help_keyword` VALUES (639, 'SQL_NO_CACHE');
INSERT INTO `help_keyword` VALUES (640, 'SQL_SMALL_RESULT');
INSERT INTO `help_keyword` VALUES (641, 'STRAIGHT_JOIN');
INSERT INTO `help_keyword` VALUES (642, 'DUAL');
INSERT INTO `help_keyword` VALUES (643, 'CROSS');
INSERT INTO `help_keyword` VALUES (644, 'FORCE');
INSERT INTO `help_keyword` VALUES (645, 'INNER');
INSERT INTO `help_keyword` VALUES (646, 'NATURAL');
INSERT INTO `help_keyword` VALUES (647, 'OUTER');
INSERT INTO `help_keyword` VALUES (648, 'AUTOCOMMIT');
INSERT INTO `help_keyword` VALUES (649, 'BEGIN');
INSERT INTO `help_keyword` VALUES (650, 'CHAIN');
INSERT INTO `help_keyword` VALUES (651, 'COMMIT');
INSERT INTO `help_keyword` VALUES (652, 'CONSISTENT');
INSERT INTO `help_keyword` VALUES (653, 'ONLY');
INSERT INTO `help_keyword` VALUES (654, 'RELEASE');
INSERT INTO `help_keyword` VALUES (655, 'ROLLBACK');
INSERT INTO `help_keyword` VALUES (656, 'SNAPSHOT');
INSERT INTO `help_keyword` VALUES (657, 'START');
INSERT INTO `help_keyword` VALUES (658, 'TRANSACTION');
INSERT INTO `help_keyword` VALUES (659, 'WORK');
INSERT INTO `help_keyword` VALUES (660, 'WRITE');
INSERT INTO `help_keyword` VALUES (661, 'SAVEPOINT');
INSERT INTO `help_keyword` VALUES (662, 'TO');
INSERT INTO `help_keyword` VALUES (663, 'TABLES');
INSERT INTO `help_keyword` VALUES (664, 'UNLOCK');
INSERT INTO `help_keyword` VALUES (665, 'COMMITTED');
INSERT INTO `help_keyword` VALUES (666, 'GLOBAL');
INSERT INTO `help_keyword` VALUES (667, 'ISOLATION');
INSERT INTO `help_keyword` VALUES (668, 'LEVEL');
INSERT INTO `help_keyword` VALUES (669, 'REPEATABLE');
INSERT INTO `help_keyword` VALUES (670, 'SERIALIZABLE');
INSERT INTO `help_keyword` VALUES (671, 'SESSION');
INSERT INTO `help_keyword` VALUES (672, 'UNCOMMITTED');
INSERT INTO `help_keyword` VALUES (673, 'PREPARE');
INSERT INTO `help_keyword` VALUES (674, 'RECOVER');
INSERT INTO `help_keyword` VALUES (675, 'XA');
INSERT INTO `help_keyword` VALUES (676, 'BEFORE');
INSERT INTO `help_keyword` VALUES (677, 'LOGS');
INSERT INTO `help_keyword` VALUES (678, 'MASTER');
INSERT INTO `help_keyword` VALUES (679, 'PURGE');
INSERT INTO `help_keyword` VALUES (680, 'SQL_LOG_BIN');
INSERT INTO `help_keyword` VALUES (681, 'IGNORE_SERVER_IDS');
INSERT INTO `help_keyword` VALUES (682, 'MASTER_AUTO_POSITION');
INSERT INTO `help_keyword` VALUES (683, 'MASTER_BIND');
INSERT INTO `help_keyword` VALUES (684, 'MASTER_CONNECT_RETRY');
INSERT INTO `help_keyword` VALUES (685, 'MASTER_HEARTBEAT_PERIOD');
INSERT INTO `help_keyword` VALUES (686, 'MASTER_HOST');
INSERT INTO `help_keyword` VALUES (687, 'MASTER_LOG_FILE');
INSERT INTO `help_keyword` VALUES (688, 'MASTER_LOG_POS');
INSERT INTO `help_keyword` VALUES (689, 'MASTER_PASSWORD');
INSERT INTO `help_keyword` VALUES (690, 'MASTER_PORT');
INSERT INTO `help_keyword` VALUES (691, 'MASTER_RETRY_COUNT');
INSERT INTO `help_keyword` VALUES (692, 'MASTER_SSL');
INSERT INTO `help_keyword` VALUES (693, 'MASTER_SSL_CA');
INSERT INTO `help_keyword` VALUES (694, 'MASTER_SSL_CERT');
INSERT INTO `help_keyword` VALUES (695, 'MASTER_SSL_CIPHER');
INSERT INTO `help_keyword` VALUES (696, 'MASTER_SSL_CRL');
INSERT INTO `help_keyword` VALUES (697, 'MASTER_SSL_CRLPATH');
INSERT INTO `help_keyword` VALUES (698, 'MASTER_SSL_KEY');
INSERT INTO `help_keyword` VALUES (699, 'MASTER_SSL_VERIFY_SERVER_CERT');
INSERT INTO `help_keyword` VALUES (700, 'MASTER_USER');
INSERT INTO `help_keyword` VALUES (701, 'RELAY_LOG_FILE');
INSERT INTO `help_keyword` VALUES (702, 'RELAY_LOG_POS');
INSERT INTO `help_keyword` VALUES (703, 'SQL_SLAVE_SKIP_COUNTER');
INSERT INTO `help_keyword` VALUES (704, 'DEFAULT_AUTH');
INSERT INTO `help_keyword` VALUES (705, 'IO_THREAD');
INSERT INTO `help_keyword` VALUES (706, 'PLUGIN_DIR');
INSERT INTO `help_keyword` VALUES (707, 'SQL_AFTER_GTIDS');
INSERT INTO `help_keyword` VALUES (708, 'SQL_AFTER_MTS_GAPS');
INSERT INTO `help_keyword` VALUES (709, 'SQL_BEFORE_GTIDS');
INSERT INTO `help_keyword` VALUES (710, 'SQL_THREAD');
INSERT INTO `help_keyword` VALUES (711, 'STOP');
INSERT INTO `help_keyword` VALUES (712, 'EXECUTE');
INSERT INTO `help_keyword` VALUES (713, 'DEALLOCATE');
INSERT INTO `help_keyword` VALUES (714, 'DECLARE');
INSERT INTO `help_keyword` VALUES (715, 'ELSEIF');
INSERT INTO `help_keyword` VALUES (716, 'ITERATE');
INSERT INTO `help_keyword` VALUES (717, 'LEAVE');
INSERT INTO `help_keyword` VALUES (718, 'LOOP');
INSERT INTO `help_keyword` VALUES (719, 'UNTIL');
INSERT INTO `help_keyword` VALUES (720, 'RETURN');
INSERT INTO `help_keyword` VALUES (721, 'WHILE');
INSERT INTO `help_keyword` VALUES (722, 'CURSOR');
INSERT INTO `help_keyword` VALUES (723, 'FETCH');
INSERT INTO `help_keyword` VALUES (724, 'CONDITION');
INSERT INTO `help_keyword` VALUES (725, 'CONTINUE');
INSERT INTO `help_keyword` VALUES (726, 'EXIT');
INSERT INTO `help_keyword` VALUES (727, 'UNDO');
INSERT INTO `help_keyword` VALUES (728, 'CATALOG_NAME');
INSERT INTO `help_keyword` VALUES (729, 'CLASS_ORIGIN');
INSERT INTO `help_keyword` VALUES (730, 'COLUMN_NAME');
INSERT INTO `help_keyword` VALUES (731, 'CONSTRAINT_CATALOG');
INSERT INTO `help_keyword` VALUES (732, 'CONSTRAINT_NAME');
INSERT INTO `help_keyword` VALUES (733, 'CONSTRAINT_SCHEMA');
INSERT INTO `help_keyword` VALUES (734, 'CURSOR_NAME');
INSERT INTO `help_keyword` VALUES (735, 'DIAGNOSTICS');
INSERT INTO `help_keyword` VALUES (736, 'GET');
INSERT INTO `help_keyword` VALUES (737, 'MESSAGE_TEXT');
INSERT INTO `help_keyword` VALUES (738, 'MYSQL_ERRNO');
INSERT INTO `help_keyword` VALUES (739, 'NUMBER');
INSERT INTO `help_keyword` VALUES (740, 'RETURNED_SQLSTATE');
INSERT INTO `help_keyword` VALUES (741, 'SCHEMA_NAME');
INSERT INTO `help_keyword` VALUES (742, 'SUBCLASS_ORIGIN');
INSERT INTO `help_keyword` VALUES (743, 'TABLE_NAME');
INSERT INTO `help_keyword` VALUES (744, 'RESIGNAL');
INSERT INTO `help_keyword` VALUES (745, 'SQLSTATE');
INSERT INTO `help_keyword` VALUES (746, 'SIGNAL');
INSERT INTO `help_keyword` VALUES (747, 'EXPIRE');
INSERT INTO `help_keyword` VALUES (748, 'CIPHER');
INSERT INTO `help_keyword` VALUES (749, 'CLIENT');
INSERT INTO `help_keyword` VALUES (750, 'FILE');
INSERT INTO `help_keyword` VALUES (751, 'GRANT');
INSERT INTO `help_keyword` VALUES (752, 'ISSUER');
INSERT INTO `help_keyword` VALUES (753, 'MAX_CONNECTIONS_PER_HOUR');
INSERT INTO `help_keyword` VALUES (754, 'MAX_QUERIES_PER_HOUR');
INSERT INTO `help_keyword` VALUES (755, 'MAX_UPDATES_PER_HOUR');
INSERT INTO `help_keyword` VALUES (756, 'MAX_USER_CONNECTIONS');
INSERT INTO `help_keyword` VALUES (757, 'NONE');
INSERT INTO `help_keyword` VALUES (758, 'OPTION');
INSERT INTO `help_keyword` VALUES (759, 'PRIVILEGES');
INSERT INTO `help_keyword` VALUES (760, 'PROCESS');
INSERT INTO `help_keyword` VALUES (761, 'RELOAD');
INSERT INTO `help_keyword` VALUES (762, 'REPLICATION');
INSERT INTO `help_keyword` VALUES (763, 'REQUIRE');
INSERT INTO `help_keyword` VALUES (764, 'SECURITY');
INSERT INTO `help_keyword` VALUES (765, 'SHUTDOWN');
INSERT INTO `help_keyword` VALUES (766, 'SSL');
INSERT INTO `help_keyword` VALUES (767, 'SUBJECT');
INSERT INTO `help_keyword` VALUES (768, 'SUPER');
INSERT INTO `help_keyword` VALUES (769, 'USAGE');
INSERT INTO `help_keyword` VALUES (770, 'X509');
INSERT INTO `help_keyword` VALUES (771, 'PROXY');
INSERT INTO `help_keyword` VALUES (772, 'REVOKE');
INSERT INTO `help_keyword` VALUES (773, 'NO_WRITE_TO_BINLOG');
INSERT INTO `help_keyword` VALUES (774, 'FAST');
INSERT INTO `help_keyword` VALUES (775, 'MEDIUM');
INSERT INTO `help_keyword` VALUES (776, 'EXTENDED');
INSERT INTO `help_keyword` VALUES (777, 'USE_FRM');
INSERT INTO `help_keyword` VALUES (778, 'AGGREGATE');
INSERT INTO `help_keyword` VALUES (779, 'RETURNS');
INSERT INTO `help_keyword` VALUES (780, 'SONAME');
INSERT INTO `help_keyword` VALUES (781, 'STRING');
INSERT INTO `help_keyword` VALUES (782, 'INSTALL');
INSERT INTO `help_keyword` VALUES (783, 'PLUGIN');
INSERT INTO `help_keyword` VALUES (784, 'UNINSTALL');
INSERT INTO `help_keyword` VALUES (785, 'VARIABLE');
INSERT INTO `help_keyword` VALUES (786, 'NAMES');
INSERT INTO `help_keyword` VALUES (787, 'AUTHORS');
INSERT INTO `help_keyword` VALUES (788, 'CONTRIBUTORS');
INSERT INTO `help_keyword` VALUES (789, 'DATABASES');
INSERT INTO `help_keyword` VALUES (790, 'ENGINES');
INSERT INTO `help_keyword` VALUES (791, 'ERRORS');
INSERT INTO `help_keyword` VALUES (792, 'GRANTS');
INSERT INTO `help_keyword` VALUES (793, 'HOSTS');
INSERT INTO `help_keyword` VALUES (794, 'INDEXES');
INSERT INTO `help_keyword` VALUES (795, 'MUTEX');
INSERT INTO `help_keyword` VALUES (796, 'PROCESSLIST');
INSERT INTO `help_keyword` VALUES (797, 'SCHEMAS');
INSERT INTO `help_keyword` VALUES (798, 'SHOW');
INSERT INTO `help_keyword` VALUES (799, 'STATUS');
INSERT INTO `help_keyword` VALUES (800, 'TRIGGERS');
INSERT INTO `help_keyword` VALUES (801, 'VARIABLES');
INSERT INTO `help_keyword` VALUES (802, 'WARNINGS');
INSERT INTO `help_keyword` VALUES (803, 'BINLOG');
INSERT INTO `help_keyword` VALUES (804, 'EVENTS');
INSERT INTO `help_keyword` VALUES (805, 'STORAGE');
INSERT INTO `help_keyword` VALUES (806, 'CODE');
INSERT INTO `help_keyword` VALUES (807, 'PLUGINS');
INSERT INTO `help_keyword` VALUES (808, 'PROFILE');
INSERT INTO `help_keyword` VALUES (809, 'PROFILES');
INSERT INTO `help_keyword` VALUES (810, 'RELAYLOG');
INSERT INTO `help_keyword` VALUES (811, 'DES_KEY_FILE');
INSERT INTO `help_keyword` VALUES (812, 'ERROR');
INSERT INTO `help_keyword` VALUES (813, 'EXPORT');
INSERT INTO `help_keyword` VALUES (814, 'GENERAL');
INSERT INTO `help_keyword` VALUES (815, 'RELAY');
INSERT INTO `help_keyword` VALUES (816, 'SLOW');
INSERT INTO `help_keyword` VALUES (817, 'USER_RESOURCES');
INSERT INTO `help_keyword` VALUES (818, 'KILL');
INSERT INTO `help_keyword` VALUES (819, 'LEAVES');
INSERT INTO `help_keyword` VALUES (820, 'DESCRIBE');
INSERT INTO `help_keyword` VALUES (821, 'EXPLAIN');
INSERT INTO `help_keyword` VALUES (822, 'JSON');
INSERT INTO `help_keyword` VALUES (823, 'PARTITIONS');
INSERT INTO `help_keyword` VALUES (824, 'TRADITIONAL');

-- ----------------------------
-- Table structure for help_relation
-- ----------------------------
DROP TABLE IF EXISTS `help_relation`;
CREATE TABLE `help_relation`  (
  `help_topic_id` int UNSIGNED NOT NULL,
  `help_keyword_id` int UNSIGNED NOT NULL,
  PRIMARY KEY (`help_keyword_id`, `help_topic_id`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'keyword-topic relation' ROW_FORMAT = Page;

-- ----------------------------
-- Records of help_relation
-- ----------------------------
INSERT INTO `help_relation` VALUES (0, 0);
INSERT INTO `help_relation` VALUES (1, 1);
INSERT INTO `help_relation` VALUES (2, 2);
INSERT INTO `help_relation` VALUES (416, 2);
INSERT INTO `help_relation` VALUES (431, 2);
INSERT INTO `help_relation` VALUES (432, 2);
INSERT INTO `help_relation` VALUES (438, 2);
INSERT INTO `help_relation` VALUES (441, 2);
INSERT INTO `help_relation` VALUES (442, 2);
INSERT INTO `help_relation` VALUES (449, 2);
INSERT INTO `help_relation` VALUES (450, 2);
INSERT INTO `help_relation` VALUES (471, 2);
INSERT INTO `help_relation` VALUES (476, 2);
INSERT INTO `help_relation` VALUES (507, 2);
INSERT INTO `help_relation` VALUES (2, 3);
INSERT INTO `help_relation` VALUES (449, 3);
INSERT INTO `help_relation` VALUES (2, 4);
INSERT INTO `help_relation` VALUES (471, 4);
INSERT INTO `help_relation` VALUES (476, 4);
INSERT INTO `help_relation` VALUES (523, 4);
INSERT INTO `help_relation` VALUES (524, 4);
INSERT INTO `help_relation` VALUES (3, 5);
INSERT INTO `help_relation` VALUES (600, 5);
INSERT INTO `help_relation` VALUES (4, 6);
INSERT INTO `help_relation` VALUES (5, 7);
INSERT INTO `help_relation` VALUES (6, 8);
INSERT INTO `help_relation` VALUES (7, 9);
INSERT INTO `help_relation` VALUES (8, 10);
INSERT INTO `help_relation` VALUES (9, 11);
INSERT INTO `help_relation` VALUES (10, 12);
INSERT INTO `help_relation` VALUES (11, 13);
INSERT INTO `help_relation` VALUES (12, 14);
INSERT INTO `help_relation` VALUES (13, 15);
INSERT INTO `help_relation` VALUES (13, 16);
INSERT INTO `help_relation` VALUES (436, 16);
INSERT INTO `help_relation` VALUES (446, 16);
INSERT INTO `help_relation` VALUES (447, 16);
INSERT INTO `help_relation` VALUES (458, 16);
INSERT INTO `help_relation` VALUES (459, 16);
INSERT INTO `help_relation` VALUES (477, 16);
INSERT INTO `help_relation` VALUES (545, 16);
INSERT INTO `help_relation` VALUES (559, 16);
INSERT INTO `help_relation` VALUES (577, 16);
INSERT INTO `help_relation` VALUES (578, 16);
INSERT INTO `help_relation` VALUES (14, 17);
INSERT INTO `help_relation` VALUES (592, 17);
INSERT INTO `help_relation` VALUES (593, 17);
INSERT INTO `help_relation` VALUES (595, 17);
INSERT INTO `help_relation` VALUES (596, 17);
INSERT INTO `help_relation` VALUES (14, 18);
INSERT INTO `help_relation` VALUES (593, 18);
INSERT INTO `help_relation` VALUES (14, 19);
INSERT INTO `help_relation` VALUES (238, 19);
INSERT INTO `help_relation` VALUES (593, 19);
INSERT INTO `help_relation` VALUES (594, 19);
INSERT INTO `help_relation` VALUES (596, 19);
INSERT INTO `help_relation` VALUES (14, 20);
INSERT INTO `help_relation` VALUES (494, 20);
INSERT INTO `help_relation` VALUES (497, 20);
INSERT INTO `help_relation` VALUES (596, 20);
INSERT INTO `help_relation` VALUES (15, 21);
INSERT INTO `help_relation` VALUES (16, 21);
INSERT INTO `help_relation` VALUES (15, 22);
INSERT INTO `help_relation` VALUES (16, 22);
INSERT INTO `help_relation` VALUES (18, 23);
INSERT INTO `help_relation` VALUES (19, 23);
INSERT INTO `help_relation` VALUES (18, 24);
INSERT INTO `help_relation` VALUES (238, 24);
INSERT INTO `help_relation` VALUES (18, 25);
INSERT INTO `help_relation` VALUES (18, 26);
INSERT INTO `help_relation` VALUES (22, 26);
INSERT INTO `help_relation` VALUES (24, 26);
INSERT INTO `help_relation` VALUES (25, 26);
INSERT INTO `help_relation` VALUES (27, 26);
INSERT INTO `help_relation` VALUES (28, 26);
INSERT INTO `help_relation` VALUES (241, 26);
INSERT INTO `help_relation` VALUES (18, 27);
INSERT INTO `help_relation` VALUES (22, 27);
INSERT INTO `help_relation` VALUES (24, 27);
INSERT INTO `help_relation` VALUES (25, 27);
INSERT INTO `help_relation` VALUES (27, 27);
INSERT INTO `help_relation` VALUES (28, 27);
INSERT INTO `help_relation` VALUES (20, 28);
INSERT INTO `help_relation` VALUES (21, 29);
INSERT INTO `help_relation` VALUES (21, 30);
INSERT INTO `help_relation` VALUES (22, 31);
INSERT INTO `help_relation` VALUES (22, 32);
INSERT INTO `help_relation` VALUES (241, 32);
INSERT INTO `help_relation` VALUES (537, 32);
INSERT INTO `help_relation` VALUES (24, 33);
INSERT INTO `help_relation` VALUES (25, 34);
INSERT INTO `help_relation` VALUES (25, 35);
INSERT INTO `help_relation` VALUES (449, 35);
INSERT INTO `help_relation` VALUES (25, 36);
INSERT INTO `help_relation` VALUES (26, 37);
INSERT INTO `help_relation` VALUES (241, 37);
INSERT INTO `help_relation` VALUES (537, 37);
INSERT INTO `help_relation` VALUES (27, 38);
INSERT INTO `help_relation` VALUES (28, 39);
INSERT INTO `help_relation` VALUES (28, 40);
INSERT INTO `help_relation` VALUES (28, 41);
INSERT INTO `help_relation` VALUES (537, 41);
INSERT INTO `help_relation` VALUES (30, 42);
INSERT INTO `help_relation` VALUES (131, 42);
INSERT INTO `help_relation` VALUES (133, 42);
INSERT INTO `help_relation` VALUES (241, 42);
INSERT INTO `help_relation` VALUES (32, 43);
INSERT INTO `help_relation` VALUES (167, 43);
INSERT INTO `help_relation` VALUES (33, 44);
INSERT INTO `help_relation` VALUES (165, 44);
INSERT INTO `help_relation` VALUES (241, 44);
INSERT INTO `help_relation` VALUES (35, 45);
INSERT INTO `help_relation` VALUES (37, 45);
INSERT INTO `help_relation` VALUES (431, 45);
INSERT INTO `help_relation` VALUES (432, 45);
INSERT INTO `help_relation` VALUES (438, 45);
INSERT INTO `help_relation` VALUES (441, 45);
INSERT INTO `help_relation` VALUES (442, 45);
INSERT INTO `help_relation` VALUES (449, 45);
INSERT INTO `help_relation` VALUES (474, 45);
INSERT INTO `help_relation` VALUES (475, 45);
INSERT INTO `help_relation` VALUES (477, 45);
INSERT INTO `help_relation` VALUES (542, 45);
INSERT INTO `help_relation` VALUES (543, 45);
INSERT INTO `help_relation` VALUES (545, 45);
INSERT INTO `help_relation` VALUES (550, 45);
INSERT INTO `help_relation` VALUES (35, 46);
INSERT INTO `help_relation` VALUES (37, 46);
INSERT INTO `help_relation` VALUES (35, 47);
INSERT INTO `help_relation` VALUES (36, 48);
INSERT INTO `help_relation` VALUES (36, 49);
INSERT INTO `help_relation` VALUES (186, 49);
INSERT INTO `help_relation` VALUES (241, 49);
INSERT INTO `help_relation` VALUES (37, 50);
INSERT INTO `help_relation` VALUES (37, 51);
INSERT INTO `help_relation` VALUES (37, 52);
INSERT INTO `help_relation` VALUES (46, 53);
INSERT INTO `help_relation` VALUES (46, 54);
INSERT INTO `help_relation` VALUES (55, 55);
INSERT INTO `help_relation` VALUES (438, 55);
INSERT INTO `help_relation` VALUES (439, 55);
INSERT INTO `help_relation` VALUES (451, 55);
INSERT INTO `help_relation` VALUES (55, 56);
INSERT INTO `help_relation` VALUES (431, 56);
INSERT INTO `help_relation` VALUES (432, 56);
INSERT INTO `help_relation` VALUES (433, 56);
INSERT INTO `help_relation` VALUES (434, 56);
INSERT INTO `help_relation` VALUES (435, 56);
INSERT INTO `help_relation` VALUES (436, 56);
INSERT INTO `help_relation` VALUES (437, 56);
INSERT INTO `help_relation` VALUES (438, 56);
INSERT INTO `help_relation` VALUES (439, 56);
INSERT INTO `help_relation` VALUES (440, 56);
INSERT INTO `help_relation` VALUES (525, 56);
INSERT INTO `help_relation` VALUES (528, 56);
INSERT INTO `help_relation` VALUES (55, 57);
INSERT INTO `help_relation` VALUES (441, 57);
INSERT INTO `help_relation` VALUES (442, 57);
INSERT INTO `help_relation` VALUES (443, 57);
INSERT INTO `help_relation` VALUES (444, 57);
INSERT INTO `help_relation` VALUES (445, 57);
INSERT INTO `help_relation` VALUES (446, 57);
INSERT INTO `help_relation` VALUES (447, 57);
INSERT INTO `help_relation` VALUES (448, 57);
INSERT INTO `help_relation` VALUES (449, 57);
INSERT INTO `help_relation` VALUES (451, 57);
INSERT INTO `help_relation` VALUES (452, 57);
INSERT INTO `help_relation` VALUES (453, 57);
INSERT INTO `help_relation` VALUES (526, 57);
INSERT INTO `help_relation` VALUES (537, 57);
INSERT INTO `help_relation` VALUES (545, 57);
INSERT INTO `help_relation` VALUES (555, 57);
INSERT INTO `help_relation` VALUES (556, 57);
INSERT INTO `help_relation` VALUES (557, 57);
INSERT INTO `help_relation` VALUES (558, 57);
INSERT INTO `help_relation` VALUES (559, 57);
INSERT INTO `help_relation` VALUES (560, 57);
INSERT INTO `help_relation` VALUES (55, 58);
INSERT INTO `help_relation` VALUES (438, 58);
INSERT INTO `help_relation` VALUES (444, 58);
INSERT INTO `help_relation` VALUES (449, 58);
INSERT INTO `help_relation` VALUES (457, 58);
INSERT INTO `help_relation` VALUES (479, 58);
INSERT INTO `help_relation` VALUES (545, 58);
INSERT INTO `help_relation` VALUES (572, 58);
INSERT INTO `help_relation` VALUES (592, 58);
INSERT INTO `help_relation` VALUES (595, 58);
INSERT INTO `help_relation` VALUES (55, 59);
INSERT INTO `help_relation` VALUES (438, 59);
INSERT INTO `help_relation` VALUES (449, 59);
INSERT INTO `help_relation` VALUES (450, 59);
INSERT INTO `help_relation` VALUES (471, 59);
INSERT INTO `help_relation` VALUES (55, 60);
INSERT INTO `help_relation` VALUES (438, 60);
INSERT INTO `help_relation` VALUES (449, 60);
INSERT INTO `help_relation` VALUES (461, 60);
INSERT INTO `help_relation` VALUES (465, 60);
INSERT INTO `help_relation` VALUES (466, 60);
INSERT INTO `help_relation` VALUES (532, 60);
INSERT INTO `help_relation` VALUES (533, 60);
INSERT INTO `help_relation` VALUES (534, 60);
INSERT INTO `help_relation` VALUES (535, 60);
INSERT INTO `help_relation` VALUES (536, 60);
INSERT INTO `help_relation` VALUES (545, 60);
INSERT INTO `help_relation` VALUES (560, 60);
INSERT INTO `help_relation` VALUES (586, 60);
INSERT INTO `help_relation` VALUES (56, 61);
INSERT INTO `help_relation` VALUES (81, 61);
INSERT INTO `help_relation` VALUES (57, 62);
INSERT INTO `help_relation` VALUES (58, 63);
INSERT INTO `help_relation` VALUES (59, 64);
INSERT INTO `help_relation` VALUES (60, 65);
INSERT INTO `help_relation` VALUES (61, 66);
INSERT INTO `help_relation` VALUES (62, 67);
INSERT INTO `help_relation` VALUES (63, 68);
INSERT INTO `help_relation` VALUES (77, 68);
INSERT INTO `help_relation` VALUES (63, 69);
INSERT INTO `help_relation` VALUES (64, 69);
INSERT INTO `help_relation` VALUES (64, 70);
INSERT INTO `help_relation` VALUES (68, 70);
INSERT INTO `help_relation` VALUES (71, 70);
INSERT INTO `help_relation` VALUES (73, 70);
INSERT INTO `help_relation` VALUES (76, 70);
INSERT INTO `help_relation` VALUES (234, 70);
INSERT INTO `help_relation` VALUES (236, 70);
INSERT INTO `help_relation` VALUES (441, 70);
INSERT INTO `help_relation` VALUES (442, 70);
INSERT INTO `help_relation` VALUES (443, 70);
INSERT INTO `help_relation` VALUES (65, 71);
INSERT INTO `help_relation` VALUES (438, 71);
INSERT INTO `help_relation` VALUES (66, 72);
INSERT INTO `help_relation` VALUES (67, 73);
INSERT INTO `help_relation` VALUES (68, 73);
INSERT INTO `help_relation` VALUES (238, 73);
INSERT INTO `help_relation` VALUES (477, 73);
INSERT INTO `help_relation` VALUES (549, 73);
INSERT INTO `help_relation` VALUES (552, 73);
INSERT INTO `help_relation` VALUES (553, 73);
INSERT INTO `help_relation` VALUES (572, 73);
INSERT INTO `help_relation` VALUES (582, 73);
INSERT INTO `help_relation` VALUES (69, 74);
INSERT INTO `help_relation` VALUES (133, 74);
INSERT INTO `help_relation` VALUES (443, 74);
INSERT INTO `help_relation` VALUES (70, 75);
INSERT INTO `help_relation` VALUES (71, 75);
INSERT INTO `help_relation` VALUES (72, 75);
INSERT INTO `help_relation` VALUES (73, 75);
INSERT INTO `help_relation` VALUES (72, 76);
INSERT INTO `help_relation` VALUES (73, 76);
INSERT INTO `help_relation` VALUES (450, 76);
INSERT INTO `help_relation` VALUES (74, 77);
INSERT INTO `help_relation` VALUES (75, 78);
INSERT INTO `help_relation` VALUES (78, 79);
INSERT INTO `help_relation` VALUES (79, 80);
INSERT INTO `help_relation` VALUES (80, 81);
INSERT INTO `help_relation` VALUES (82, 82);
INSERT INTO `help_relation` VALUES (508, 82);
INSERT INTO `help_relation` VALUES (82, 83);
INSERT INTO `help_relation` VALUES (508, 83);
INSERT INTO `help_relation` VALUES (82, 84);
INSERT INTO `help_relation` VALUES (491, 84);
INSERT INTO `help_relation` VALUES (505, 84);
INSERT INTO `help_relation` VALUES (508, 84);
INSERT INTO `help_relation` VALUES (509, 84);
INSERT INTO `help_relation` VALUES (512, 84);
INSERT INTO `help_relation` VALUES (513, 84);
INSERT INTO `help_relation` VALUES (515, 84);
INSERT INTO `help_relation` VALUES (82, 85);
INSERT INTO `help_relation` VALUES (508, 85);
INSERT INTO `help_relation` VALUES (509, 85);
INSERT INTO `help_relation` VALUES (82, 86);
INSERT INTO `help_relation` VALUES (508, 86);
INSERT INTO `help_relation` VALUES (83, 87);
INSERT INTO `help_relation` VALUES (441, 87);
INSERT INTO `help_relation` VALUES (442, 87);
INSERT INTO `help_relation` VALUES (443, 87);
INSERT INTO `help_relation` VALUES (454, 87);
INSERT INTO `help_relation` VALUES (455, 87);
INSERT INTO `help_relation` VALUES (456, 87);
INSERT INTO `help_relation` VALUES (460, 87);
INSERT INTO `help_relation` VALUES (461, 87);
INSERT INTO `help_relation` VALUES (464, 87);
INSERT INTO `help_relation` VALUES (509, 87);
INSERT INTO `help_relation` VALUES (538, 87);
INSERT INTO `help_relation` VALUES (84, 88);
INSERT INTO `help_relation` VALUES (85, 89);
INSERT INTO `help_relation` VALUES (86, 90);
INSERT INTO `help_relation` VALUES (87, 91);
INSERT INTO `help_relation` VALUES (88, 91);
INSERT INTO `help_relation` VALUES (89, 92);
INSERT INTO `help_relation` VALUES (90, 93);
INSERT INTO `help_relation` VALUES (91, 94);
INSERT INTO `help_relation` VALUES (92, 95);
INSERT INTO `help_relation` VALUES (111, 95);
INSERT INTO `help_relation` VALUES (93, 96);
INSERT INTO `help_relation` VALUES (94, 97);
INSERT INTO `help_relation` VALUES (95, 98);
INSERT INTO `help_relation` VALUES (96, 99);
INSERT INTO `help_relation` VALUES (97, 100);
INSERT INTO `help_relation` VALUES (98, 101);
INSERT INTO `help_relation` VALUES (99, 102);
INSERT INTO `help_relation` VALUES (100, 103);
INSERT INTO `help_relation` VALUES (101, 104);
INSERT INTO `help_relation` VALUES (102, 105);
INSERT INTO `help_relation` VALUES (103, 106);
INSERT INTO `help_relation` VALUES (104, 107);
INSERT INTO `help_relation` VALUES (105, 108);
INSERT INTO `help_relation` VALUES (106, 109);
INSERT INTO `help_relation` VALUES (107, 110);
INSERT INTO `help_relation` VALUES (108, 111);
INSERT INTO `help_relation` VALUES (109, 112);
INSERT INTO `help_relation` VALUES (110, 113);
INSERT INTO `help_relation` VALUES (111, 114);
INSERT INTO `help_relation` VALUES (112, 115);
INSERT INTO `help_relation` VALUES (113, 116);
INSERT INTO `help_relation` VALUES (114, 117);
INSERT INTO `help_relation` VALUES (115, 118);
INSERT INTO `help_relation` VALUES (116, 119);
INSERT INTO `help_relation` VALUES (117, 120);
INSERT INTO `help_relation` VALUES (118, 121);
INSERT INTO `help_relation` VALUES (119, 122);
INSERT INTO `help_relation` VALUES (120, 123);
INSERT INTO `help_relation` VALUES (121, 124);
INSERT INTO `help_relation` VALUES (122, 125);
INSERT INTO `help_relation` VALUES (438, 125);
INSERT INTO `help_relation` VALUES (466, 125);
INSERT INTO `help_relation` VALUES (123, 126);
INSERT INTO `help_relation` VALUES (124, 127);
INSERT INTO `help_relation` VALUES (125, 128);
INSERT INTO `help_relation` VALUES (126, 129);
INSERT INTO `help_relation` VALUES (127, 130);
INSERT INTO `help_relation` VALUES (128, 131);
INSERT INTO `help_relation` VALUES (129, 132);
INSERT INTO `help_relation` VALUES (130, 133);
INSERT INTO `help_relation` VALUES (132, 134);
INSERT INTO `help_relation` VALUES (133, 135);
INSERT INTO `help_relation` VALUES (133, 136);
INSERT INTO `help_relation` VALUES (135, 136);
INSERT INTO `help_relation` VALUES (133, 137);
INSERT INTO `help_relation` VALUES (136, 137);
INSERT INTO `help_relation` VALUES (133, 138);
INSERT INTO `help_relation` VALUES (133, 139);
INSERT INTO `help_relation` VALUES (133, 140);
INSERT INTO `help_relation` VALUES (133, 141);
INSERT INTO `help_relation` VALUES (145, 141);
INSERT INTO `help_relation` VALUES (133, 142);
INSERT INTO `help_relation` VALUES (133, 143);
INSERT INTO `help_relation` VALUES (133, 144);
INSERT INTO `help_relation` VALUES (152, 144);
INSERT INTO `help_relation` VALUES (133, 145);
INSERT INTO `help_relation` VALUES (133, 146);
INSERT INTO `help_relation` VALUES (153, 146);
INSERT INTO `help_relation` VALUES (133, 147);
INSERT INTO `help_relation` VALUES (159, 147);
INSERT INTO `help_relation` VALUES (133, 148);
INSERT INTO `help_relation` VALUES (181, 148);
INSERT INTO `help_relation` VALUES (133, 149);
INSERT INTO `help_relation` VALUES (134, 150);
INSERT INTO `help_relation` VALUES (137, 151);
INSERT INTO `help_relation` VALUES (138, 152);
INSERT INTO `help_relation` VALUES (139, 153);
INSERT INTO `help_relation` VALUES (140, 154);
INSERT INTO `help_relation` VALUES (141, 155);
INSERT INTO `help_relation` VALUES (142, 156);
INSERT INTO `help_relation` VALUES (143, 157);
INSERT INTO `help_relation` VALUES (144, 158);
INSERT INTO `help_relation` VALUES (146, 159);
INSERT INTO `help_relation` VALUES (147, 160);
INSERT INTO `help_relation` VALUES (148, 161);
INSERT INTO `help_relation` VALUES (149, 162);
INSERT INTO `help_relation` VALUES (150, 163);
INSERT INTO `help_relation` VALUES (151, 164);
INSERT INTO `help_relation` VALUES (154, 165);
INSERT INTO `help_relation` VALUES (155, 166);
INSERT INTO `help_relation` VALUES (156, 167);
INSERT INTO `help_relation` VALUES (157, 168);
INSERT INTO `help_relation` VALUES (158, 169);
INSERT INTO `help_relation` VALUES (160, 170);
INSERT INTO `help_relation` VALUES (161, 171);
INSERT INTO `help_relation` VALUES (162, 172);
INSERT INTO `help_relation` VALUES (163, 173);
INSERT INTO `help_relation` VALUES (164, 174);
INSERT INTO `help_relation` VALUES (165, 175);
INSERT INTO `help_relation` VALUES (167, 175);
INSERT INTO `help_relation` VALUES (216, 175);
INSERT INTO `help_relation` VALUES (434, 175);
INSERT INTO `help_relation` VALUES (446, 175);
INSERT INTO `help_relation` VALUES (447, 175);
INSERT INTO `help_relation` VALUES (458, 175);
INSERT INTO `help_relation` VALUES (459, 175);
INSERT INTO `help_relation` VALUES (537, 175);
INSERT INTO `help_relation` VALUES (538, 175);
INSERT INTO `help_relation` VALUES (545, 175);
INSERT INTO `help_relation` VALUES (558, 175);
INSERT INTO `help_relation` VALUES (569, 175);
INSERT INTO `help_relation` VALUES (570, 175);
INSERT INTO `help_relation` VALUES (166, 176);
INSERT INTO `help_relation` VALUES (168, 177);
INSERT INTO `help_relation` VALUES (169, 178);
INSERT INTO `help_relation` VALUES (170, 179);
INSERT INTO `help_relation` VALUES (171, 180);
INSERT INTO `help_relation` VALUES (172, 181);
INSERT INTO `help_relation` VALUES (173, 182);
INSERT INTO `help_relation` VALUES (174, 183);
INSERT INTO `help_relation` VALUES (175, 184);
INSERT INTO `help_relation` VALUES (176, 185);
INSERT INTO `help_relation` VALUES (177, 186);
INSERT INTO `help_relation` VALUES (178, 187);
INSERT INTO `help_relation` VALUES (179, 188);
INSERT INTO `help_relation` VALUES (180, 189);
INSERT INTO `help_relation` VALUES (182, 190);
INSERT INTO `help_relation` VALUES (183, 191);
INSERT INTO `help_relation` VALUES (184, 192);
INSERT INTO `help_relation` VALUES (185, 193);
INSERT INTO `help_relation` VALUES (187, 194);
INSERT INTO `help_relation` VALUES (188, 195);
INSERT INTO `help_relation` VALUES (189, 196);
INSERT INTO `help_relation` VALUES (190, 197);
INSERT INTO `help_relation` VALUES (191, 198);
INSERT INTO `help_relation` VALUES (192, 199);
INSERT INTO `help_relation` VALUES (193, 200);
INSERT INTO `help_relation` VALUES (194, 201);
INSERT INTO `help_relation` VALUES (195, 202);
INSERT INTO `help_relation` VALUES (597, 202);
INSERT INTO `help_relation` VALUES (598, 202);
INSERT INTO `help_relation` VALUES (599, 202);
INSERT INTO `help_relation` VALUES (196, 203);
INSERT INTO `help_relation` VALUES (197, 204);
INSERT INTO `help_relation` VALUES (198, 205);
INSERT INTO `help_relation` VALUES (471, 205);
INSERT INTO `help_relation` VALUES (472, 205);
INSERT INTO `help_relation` VALUES (473, 205);
INSERT INTO `help_relation` VALUES (199, 206);
INSERT INTO `help_relation` VALUES (200, 207);
INSERT INTO `help_relation` VALUES (201, 208);
INSERT INTO `help_relation` VALUES (479, 208);
INSERT INTO `help_relation` VALUES (202, 209);
INSERT INTO `help_relation` VALUES (203, 210);
INSERT INTO `help_relation` VALUES (204, 211);
INSERT INTO `help_relation` VALUES (205, 212);
INSERT INTO `help_relation` VALUES (206, 213);
INSERT INTO `help_relation` VALUES (207, 214);
INSERT INTO `help_relation` VALUES (208, 215);
INSERT INTO `help_relation` VALUES (209, 216);
INSERT INTO `help_relation` VALUES (210, 217);
INSERT INTO `help_relation` VALUES (211, 218);
INSERT INTO `help_relation` VALUES (212, 219);
INSERT INTO `help_relation` VALUES (213, 220);
INSERT INTO `help_relation` VALUES (214, 221);
INSERT INTO `help_relation` VALUES (215, 222);
INSERT INTO `help_relation` VALUES (513, 222);
INSERT INTO `help_relation` VALUES (216, 223);
INSERT INTO `help_relation` VALUES (474, 223);
INSERT INTO `help_relation` VALUES (475, 223);
INSERT INTO `help_relation` VALUES (476, 223);
INSERT INTO `help_relation` VALUES (217, 224);
INSERT INTO `help_relation` VALUES (218, 225);
INSERT INTO `help_relation` VALUES (479, 225);
INSERT INTO `help_relation` VALUES (219, 226);
INSERT INTO `help_relation` VALUES (220, 227);
INSERT INTO `help_relation` VALUES (221, 228);
INSERT INTO `help_relation` VALUES (222, 229);
INSERT INTO `help_relation` VALUES (234, 229);
INSERT INTO `help_relation` VALUES (545, 229);
INSERT INTO `help_relation` VALUES (552, 229);
INSERT INTO `help_relation` VALUES (553, 229);
INSERT INTO `help_relation` VALUES (222, 230);
INSERT INTO `help_relation` VALUES (223, 231);
INSERT INTO `help_relation` VALUES (224, 232);
INSERT INTO `help_relation` VALUES (225, 233);
INSERT INTO `help_relation` VALUES (226, 234);
INSERT INTO `help_relation` VALUES (227, 235);
INSERT INTO `help_relation` VALUES (228, 236);
INSERT INTO `help_relation` VALUES (228, 237);
INSERT INTO `help_relation` VALUES (468, 237);
INSERT INTO `help_relation` VALUES (477, 237);
INSERT INTO `help_relation` VALUES (545, 237);
INSERT INTO `help_relation` VALUES (549, 237);
INSERT INTO `help_relation` VALUES (552, 237);
INSERT INTO `help_relation` VALUES (553, 237);
INSERT INTO `help_relation` VALUES (572, 237);
INSERT INTO `help_relation` VALUES (582, 237);
INSERT INTO `help_relation` VALUES (228, 238);
INSERT INTO `help_relation` VALUES (228, 239);
INSERT INTO `help_relation` VALUES (228, 240);
INSERT INTO `help_relation` VALUES (229, 241);
INSERT INTO `help_relation` VALUES (230, 242);
INSERT INTO `help_relation` VALUES (231, 243);
INSERT INTO `help_relation` VALUES (232, 244);
INSERT INTO `help_relation` VALUES (233, 245);
INSERT INTO `help_relation` VALUES (235, 246);
INSERT INTO `help_relation` VALUES (236, 247);
INSERT INTO `help_relation` VALUES (237, 248);
INSERT INTO `help_relation` VALUES (238, 249);
INSERT INTO `help_relation` VALUES (238, 250);
INSERT INTO `help_relation` VALUES (238, 251);
INSERT INTO `help_relation` VALUES (238, 252);
INSERT INTO `help_relation` VALUES (477, 252);
INSERT INTO `help_relation` VALUES (238, 253);
INSERT INTO `help_relation` VALUES (438, 253);
INSERT INTO `help_relation` VALUES (444, 253);
INSERT INTO `help_relation` VALUES (449, 253);
INSERT INTO `help_relation` VALUES (528, 253);
INSERT INTO `help_relation` VALUES (593, 253);
INSERT INTO `help_relation` VALUES (239, 254);
INSERT INTO `help_relation` VALUES (241, 254);
INSERT INTO `help_relation` VALUES (492, 254);
INSERT INTO `help_relation` VALUES (493, 254);
INSERT INTO `help_relation` VALUES (547, 254);
INSERT INTO `help_relation` VALUES (548, 254);
INSERT INTO `help_relation` VALUES (593, 254);
INSERT INTO `help_relation` VALUES (240, 255);
INSERT INTO `help_relation` VALUES (240, 256);
INSERT INTO `help_relation` VALUES (241, 256);
INSERT INTO `help_relation` VALUES (241, 257);
INSERT INTO `help_relation` VALUES (241, 258);
INSERT INTO `help_relation` VALUES (242, 259);
INSERT INTO `help_relation` VALUES (243, 260);
INSERT INTO `help_relation` VALUES (244, 261);
INSERT INTO `help_relation` VALUES (245, 262);
INSERT INTO `help_relation` VALUES (246, 263);
INSERT INTO `help_relation` VALUES (247, 264);
INSERT INTO `help_relation` VALUES (248, 265);
INSERT INTO `help_relation` VALUES (249, 266);
INSERT INTO `help_relation` VALUES (250, 267);
INSERT INTO `help_relation` VALUES (251, 268);
INSERT INTO `help_relation` VALUES (252, 269);
INSERT INTO `help_relation` VALUES (253, 270);
INSERT INTO `help_relation` VALUES (254, 271);
INSERT INTO `help_relation` VALUES (255, 272);
INSERT INTO `help_relation` VALUES (256, 273);
INSERT INTO `help_relation` VALUES (257, 274);
INSERT INTO `help_relation` VALUES (258, 275);
INSERT INTO `help_relation` VALUES (259, 276);
INSERT INTO `help_relation` VALUES (260, 277);
INSERT INTO `help_relation` VALUES (261, 278);
INSERT INTO `help_relation` VALUES (438, 278);
INSERT INTO `help_relation` VALUES (448, 278);
INSERT INTO `help_relation` VALUES (499, 278);
INSERT INTO `help_relation` VALUES (525, 278);
INSERT INTO `help_relation` VALUES (526, 278);
INSERT INTO `help_relation` VALUES (528, 278);
INSERT INTO `help_relation` VALUES (531, 278);
INSERT INTO `help_relation` VALUES (262, 279);
INSERT INTO `help_relation` VALUES (263, 280);
INSERT INTO `help_relation` VALUES (263, 281);
INSERT INTO `help_relation` VALUES (264, 282);
INSERT INTO `help_relation` VALUES (265, 283);
INSERT INTO `help_relation` VALUES (266, 284);
INSERT INTO `help_relation` VALUES (267, 285);
INSERT INTO `help_relation` VALUES (268, 286);
INSERT INTO `help_relation` VALUES (269, 287);
INSERT INTO `help_relation` VALUES (270, 288);
INSERT INTO `help_relation` VALUES (271, 289);
INSERT INTO `help_relation` VALUES (272, 290);
INSERT INTO `help_relation` VALUES (273, 291);
INSERT INTO `help_relation` VALUES (542, 291);
INSERT INTO `help_relation` VALUES (543, 291);
INSERT INTO `help_relation` VALUES (274, 292);
INSERT INTO `help_relation` VALUES (275, 293);
INSERT INTO `help_relation` VALUES (545, 293);
INSERT INTO `help_relation` VALUES (551, 293);
INSERT INTO `help_relation` VALUES (276, 294);
INSERT INTO `help_relation` VALUES (277, 295);
INSERT INTO `help_relation` VALUES (433, 295);
INSERT INTO `help_relation` VALUES (443, 295);
INSERT INTO `help_relation` VALUES (278, 296);
INSERT INTO `help_relation` VALUES (431, 296);
INSERT INTO `help_relation` VALUES (432, 296);
INSERT INTO `help_relation` VALUES (441, 296);
INSERT INTO `help_relation` VALUES (442, 296);
INSERT INTO `help_relation` VALUES (448, 296);
INSERT INTO `help_relation` VALUES (454, 296);
INSERT INTO `help_relation` VALUES (455, 296);
INSERT INTO `help_relation` VALUES (545, 296);
INSERT INTO `help_relation` VALUES (555, 296);
INSERT INTO `help_relation` VALUES (556, 296);
INSERT INTO `help_relation` VALUES (279, 297);
INSERT INTO `help_relation` VALUES (280, 298);
INSERT INTO `help_relation` VALUES (281, 299);
INSERT INTO `help_relation` VALUES (522, 299);
INSERT INTO `help_relation` VALUES (282, 300);
INSERT INTO `help_relation` VALUES (431, 300);
INSERT INTO `help_relation` VALUES (432, 300);
INSERT INTO `help_relation` VALUES (441, 300);
INSERT INTO `help_relation` VALUES (442, 300);
INSERT INTO `help_relation` VALUES (454, 300);
INSERT INTO `help_relation` VALUES (455, 300);
INSERT INTO `help_relation` VALUES (545, 300);
INSERT INTO `help_relation` VALUES (555, 300);
INSERT INTO `help_relation` VALUES (556, 300);
INSERT INTO `help_relation` VALUES (283, 301);
INSERT INTO `help_relation` VALUES (284, 302);
INSERT INTO `help_relation` VALUES (285, 303);
INSERT INTO `help_relation` VALUES (448, 303);
INSERT INTO `help_relation` VALUES (499, 303);
INSERT INTO `help_relation` VALUES (525, 303);
INSERT INTO `help_relation` VALUES (526, 303);
INSERT INTO `help_relation` VALUES (527, 303);
INSERT INTO `help_relation` VALUES (529, 303);
INSERT INTO `help_relation` VALUES (286, 304);
INSERT INTO `help_relation` VALUES (287, 305);
INSERT INTO `help_relation` VALUES (287, 306);
INSERT INTO `help_relation` VALUES (288, 307);
INSERT INTO `help_relation` VALUES (288, 308);
INSERT INTO `help_relation` VALUES (289, 309);
INSERT INTO `help_relation` VALUES (289, 310);
INSERT INTO `help_relation` VALUES (290, 311);
INSERT INTO `help_relation` VALUES (290, 312);
INSERT INTO `help_relation` VALUES (291, 313);
INSERT INTO `help_relation` VALUES (291, 314);
INSERT INTO `help_relation` VALUES (292, 315);
INSERT INTO `help_relation` VALUES (292, 316);
INSERT INTO `help_relation` VALUES (293, 317);
INSERT INTO `help_relation` VALUES (294, 318);
INSERT INTO `help_relation` VALUES (294, 319);
INSERT INTO `help_relation` VALUES (295, 320);
INSERT INTO `help_relation` VALUES (295, 321);
INSERT INTO `help_relation` VALUES (296, 322);
INSERT INTO `help_relation` VALUES (296, 323);
INSERT INTO `help_relation` VALUES (297, 324);
INSERT INTO `help_relation` VALUES (297, 325);
INSERT INTO `help_relation` VALUES (298, 326);
INSERT INTO `help_relation` VALUES (299, 327);
INSERT INTO `help_relation` VALUES (299, 328);
INSERT INTO `help_relation` VALUES (300, 329);
INSERT INTO `help_relation` VALUES (300, 330);
INSERT INTO `help_relation` VALUES (301, 331);
INSERT INTO `help_relation` VALUES (301, 332);
INSERT INTO `help_relation` VALUES (302, 333);
INSERT INTO `help_relation` VALUES (302, 334);
INSERT INTO `help_relation` VALUES (303, 335);
INSERT INTO `help_relation` VALUES (303, 336);
INSERT INTO `help_relation` VALUES (304, 337);
INSERT INTO `help_relation` VALUES (304, 338);
INSERT INTO `help_relation` VALUES (305, 339);
INSERT INTO `help_relation` VALUES (305, 340);
INSERT INTO `help_relation` VALUES (306, 341);
INSERT INTO `help_relation` VALUES (307, 342);
INSERT INTO `help_relation` VALUES (307, 343);
INSERT INTO `help_relation` VALUES (308, 344);
INSERT INTO `help_relation` VALUES (308, 345);
INSERT INTO `help_relation` VALUES (309, 346);
INSERT INTO `help_relation` VALUES (309, 347);
INSERT INTO `help_relation` VALUES (310, 348);
INSERT INTO `help_relation` VALUES (310, 349);
INSERT INTO `help_relation` VALUES (311, 350);
INSERT INTO `help_relation` VALUES (312, 351);
INSERT INTO `help_relation` VALUES (312, 352);
INSERT INTO `help_relation` VALUES (313, 353);
INSERT INTO `help_relation` VALUES (314, 354);
INSERT INTO `help_relation` VALUES (315, 355);
INSERT INTO `help_relation` VALUES (316, 356);
INSERT INTO `help_relation` VALUES (317, 357);
INSERT INTO `help_relation` VALUES (318, 358);
INSERT INTO `help_relation` VALUES (319, 359);
INSERT INTO `help_relation` VALUES (320, 360);
INSERT INTO `help_relation` VALUES (320, 361);
INSERT INTO `help_relation` VALUES (321, 362);
INSERT INTO `help_relation` VALUES (321, 363);
INSERT INTO `help_relation` VALUES (322, 364);
INSERT INTO `help_relation` VALUES (322, 365);
INSERT INTO `help_relation` VALUES (323, 366);
INSERT INTO `help_relation` VALUES (323, 367);
INSERT INTO `help_relation` VALUES (324, 368);
INSERT INTO `help_relation` VALUES (325, 369);
INSERT INTO `help_relation` VALUES (326, 370);
INSERT INTO `help_relation` VALUES (327, 371);
INSERT INTO `help_relation` VALUES (328, 372);
INSERT INTO `help_relation` VALUES (329, 373);
INSERT INTO `help_relation` VALUES (330, 374);
INSERT INTO `help_relation` VALUES (331, 375);
INSERT INTO `help_relation` VALUES (332, 376);
INSERT INTO `help_relation` VALUES (333, 377);
INSERT INTO `help_relation` VALUES (334, 378);
INSERT INTO `help_relation` VALUES (335, 379);
INSERT INTO `help_relation` VALUES (336, 380);
INSERT INTO `help_relation` VALUES (337, 381);
INSERT INTO `help_relation` VALUES (338, 382);
INSERT INTO `help_relation` VALUES (339, 383);
INSERT INTO `help_relation` VALUES (340, 384);
INSERT INTO `help_relation` VALUES (341, 385);
INSERT INTO `help_relation` VALUES (342, 386);
INSERT INTO `help_relation` VALUES (343, 387);
INSERT INTO `help_relation` VALUES (344, 388);
INSERT INTO `help_relation` VALUES (345, 389);
INSERT INTO `help_relation` VALUES (346, 390);
INSERT INTO `help_relation` VALUES (347, 391);
INSERT INTO `help_relation` VALUES (348, 392);
INSERT INTO `help_relation` VALUES (349, 393);
INSERT INTO `help_relation` VALUES (350, 394);
INSERT INTO `help_relation` VALUES (351, 395);
INSERT INTO `help_relation` VALUES (352, 396);
INSERT INTO `help_relation` VALUES (353, 397);
INSERT INTO `help_relation` VALUES (354, 398);
INSERT INTO `help_relation` VALUES (355, 399);
INSERT INTO `help_relation` VALUES (356, 400);
INSERT INTO `help_relation` VALUES (357, 401);
INSERT INTO `help_relation` VALUES (358, 402);
INSERT INTO `help_relation` VALUES (359, 403);
INSERT INTO `help_relation` VALUES (360, 404);
INSERT INTO `help_relation` VALUES (361, 405);
INSERT INTO `help_relation` VALUES (362, 406);
INSERT INTO `help_relation` VALUES (363, 407);
INSERT INTO `help_relation` VALUES (364, 408);
INSERT INTO `help_relation` VALUES (365, 409);
INSERT INTO `help_relation` VALUES (366, 410);
INSERT INTO `help_relation` VALUES (367, 411);
INSERT INTO `help_relation` VALUES (368, 412);
INSERT INTO `help_relation` VALUES (369, 413);
INSERT INTO `help_relation` VALUES (370, 414);
INSERT INTO `help_relation` VALUES (371, 415);
INSERT INTO `help_relation` VALUES (372, 416);
INSERT INTO `help_relation` VALUES (373, 417);
INSERT INTO `help_relation` VALUES (374, 418);
INSERT INTO `help_relation` VALUES (375, 419);
INSERT INTO `help_relation` VALUES (376, 420);
INSERT INTO `help_relation` VALUES (377, 421);
INSERT INTO `help_relation` VALUES (378, 422);
INSERT INTO `help_relation` VALUES (379, 423);
INSERT INTO `help_relation` VALUES (380, 424);
INSERT INTO `help_relation` VALUES (381, 425);
INSERT INTO `help_relation` VALUES (382, 426);
INSERT INTO `help_relation` VALUES (383, 427);
INSERT INTO `help_relation` VALUES (384, 428);
INSERT INTO `help_relation` VALUES (385, 429);
INSERT INTO `help_relation` VALUES (386, 430);
INSERT INTO `help_relation` VALUES (387, 431);
INSERT INTO `help_relation` VALUES (388, 432);
INSERT INTO `help_relation` VALUES (389, 433);
INSERT INTO `help_relation` VALUES (390, 434);
INSERT INTO `help_relation` VALUES (391, 435);
INSERT INTO `help_relation` VALUES (392, 436);
INSERT INTO `help_relation` VALUES (393, 437);
INSERT INTO `help_relation` VALUES (394, 438);
INSERT INTO `help_relation` VALUES (395, 439);
INSERT INTO `help_relation` VALUES (396, 440);
INSERT INTO `help_relation` VALUES (397, 441);
INSERT INTO `help_relation` VALUES (398, 442);
INSERT INTO `help_relation` VALUES (399, 443);
INSERT INTO `help_relation` VALUES (399, 444);
INSERT INTO `help_relation` VALUES (404, 444);
INSERT INTO `help_relation` VALUES (405, 444);
INSERT INTO `help_relation` VALUES (406, 444);
INSERT INTO `help_relation` VALUES (407, 444);
INSERT INTO `help_relation` VALUES (412, 444);
INSERT INTO `help_relation` VALUES (477, 444);
INSERT INTO `help_relation` VALUES (480, 444);
INSERT INTO `help_relation` VALUES (400, 445);
INSERT INTO `help_relation` VALUES (401, 446);
INSERT INTO `help_relation` VALUES (402, 447);
INSERT INTO `help_relation` VALUES (403, 448);
INSERT INTO `help_relation` VALUES (404, 448);
INSERT INTO `help_relation` VALUES (567, 448);
INSERT INTO `help_relation` VALUES (590, 448);
INSERT INTO `help_relation` VALUES (405, 449);
INSERT INTO `help_relation` VALUES (477, 449);
INSERT INTO `help_relation` VALUES (405, 450);
INSERT INTO `help_relation` VALUES (438, 450);
INSERT INTO `help_relation` VALUES (449, 450);
INSERT INTO `help_relation` VALUES (468, 450);
INSERT INTO `help_relation` VALUES (474, 450);
INSERT INTO `help_relation` VALUES (475, 450);
INSERT INTO `help_relation` VALUES (477, 450);
INSERT INTO `help_relation` VALUES (481, 450);
INSERT INTO `help_relation` VALUES (526, 450);
INSERT INTO `help_relation` VALUES (528, 450);
INSERT INTO `help_relation` VALUES (405, 451);
INSERT INTO `help_relation` VALUES (477, 451);
INSERT INTO `help_relation` VALUES (597, 451);
INSERT INTO `help_relation` VALUES (598, 451);
INSERT INTO `help_relation` VALUES (599, 451);
INSERT INTO `help_relation` VALUES (405, 452);
INSERT INTO `help_relation` VALUES (405, 453);
INSERT INTO `help_relation` VALUES (438, 453);
INSERT INTO `help_relation` VALUES (468, 453);
INSERT INTO `help_relation` VALUES (477, 453);
INSERT INTO `help_relation` VALUES (481, 453);
INSERT INTO `help_relation` VALUES (405, 454);
INSERT INTO `help_relation` VALUES (406, 455);
INSERT INTO `help_relation` VALUES (407, 456);
INSERT INTO `help_relation` VALUES (408, 457);
INSERT INTO `help_relation` VALUES (409, 458);
INSERT INTO `help_relation` VALUES (410, 459);
INSERT INTO `help_relation` VALUES (411, 460);
INSERT INTO `help_relation` VALUES (412, 461);
INSERT INTO `help_relation` VALUES (413, 462);
INSERT INTO `help_relation` VALUES (414, 463);
INSERT INTO `help_relation` VALUES (415, 464);
INSERT INTO `help_relation` VALUES (417, 465);
INSERT INTO `help_relation` VALUES (418, 466);
INSERT INTO `help_relation` VALUES (419, 467);
INSERT INTO `help_relation` VALUES (420, 468);
INSERT INTO `help_relation` VALUES (421, 469);
INSERT INTO `help_relation` VALUES (422, 470);
INSERT INTO `help_relation` VALUES (423, 471);
INSERT INTO `help_relation` VALUES (424, 472);
INSERT INTO `help_relation` VALUES (425, 473);
INSERT INTO `help_relation` VALUES (426, 474);
INSERT INTO `help_relation` VALUES (427, 475);
INSERT INTO `help_relation` VALUES (428, 476);
INSERT INTO `help_relation` VALUES (429, 477);
INSERT INTO `help_relation` VALUES (430, 478);
INSERT INTO `help_relation` VALUES (471, 478);
INSERT INTO `help_relation` VALUES (476, 478);
INSERT INTO `help_relation` VALUES (431, 479);
INSERT INTO `help_relation` VALUES (432, 479);
INSERT INTO `help_relation` VALUES (438, 479);
INSERT INTO `help_relation` VALUES (441, 479);
INSERT INTO `help_relation` VALUES (442, 479);
INSERT INTO `help_relation` VALUES (449, 479);
INSERT INTO `help_relation` VALUES (431, 480);
INSERT INTO `help_relation` VALUES (432, 480);
INSERT INTO `help_relation` VALUES (438, 480);
INSERT INTO `help_relation` VALUES (448, 480);
INSERT INTO `help_relation` VALUES (449, 480);
INSERT INTO `help_relation` VALUES (474, 480);
INSERT INTO `help_relation` VALUES (431, 481);
INSERT INTO `help_relation` VALUES (432, 481);
INSERT INTO `help_relation` VALUES (438, 481);
INSERT INTO `help_relation` VALUES (449, 481);
INSERT INTO `help_relation` VALUES (431, 482);
INSERT INTO `help_relation` VALUES (432, 482);
INSERT INTO `help_relation` VALUES (431, 483);
INSERT INTO `help_relation` VALUES (432, 483);
INSERT INTO `help_relation` VALUES (438, 483);
INSERT INTO `help_relation` VALUES (441, 483);
INSERT INTO `help_relation` VALUES (442, 483);
INSERT INTO `help_relation` VALUES (449, 483);
INSERT INTO `help_relation` VALUES (450, 483);
INSERT INTO `help_relation` VALUES (471, 483);
INSERT INTO `help_relation` VALUES (474, 483);
INSERT INTO `help_relation` VALUES (475, 483);
INSERT INTO `help_relation` VALUES (476, 483);
INSERT INTO `help_relation` VALUES (477, 483);
INSERT INTO `help_relation` VALUES (481, 483);
INSERT INTO `help_relation` VALUES (482, 483);
INSERT INTO `help_relation` VALUES (483, 483);
INSERT INTO `help_relation` VALUES (484, 483);
INSERT INTO `help_relation` VALUES (485, 483);
INSERT INTO `help_relation` VALUES (495, 483);
INSERT INTO `help_relation` VALUES (498, 483);
INSERT INTO `help_relation` VALUES (523, 483);
INSERT INTO `help_relation` VALUES (524, 483);
INSERT INTO `help_relation` VALUES (531, 483);
INSERT INTO `help_relation` VALUES (541, 483);
INSERT INTO `help_relation` VALUES (542, 483);
INSERT INTO `help_relation` VALUES (543, 483);
INSERT INTO `help_relation` VALUES (544, 483);
INSERT INTO `help_relation` VALUES (545, 483);
INSERT INTO `help_relation` VALUES (550, 483);
INSERT INTO `help_relation` VALUES (431, 484);
INSERT INTO `help_relation` VALUES (432, 484);
INSERT INTO `help_relation` VALUES (533, 484);
INSERT INTO `help_relation` VALUES (433, 485);
INSERT INTO `help_relation` VALUES (438, 485);
INSERT INTO `help_relation` VALUES (443, 485);
INSERT INTO `help_relation` VALUES (444, 485);
INSERT INTO `help_relation` VALUES (449, 485);
INSERT INTO `help_relation` VALUES (451, 485);
INSERT INTO `help_relation` VALUES (433, 486);
INSERT INTO `help_relation` VALUES (443, 486);
INSERT INTO `help_relation` VALUES (433, 487);
INSERT INTO `help_relation` VALUES (443, 487);
INSERT INTO `help_relation` VALUES (433, 488);
INSERT INTO `help_relation` VALUES (438, 488);
INSERT INTO `help_relation` VALUES (443, 488);
INSERT INTO `help_relation` VALUES (433, 489);
INSERT INTO `help_relation` VALUES (443, 489);
INSERT INTO `help_relation` VALUES (469, 489);
INSERT INTO `help_relation` VALUES (515, 489);
INSERT INTO `help_relation` VALUES (433, 490);
INSERT INTO `help_relation` VALUES (438, 490);
INSERT INTO `help_relation` VALUES (443, 490);
INSERT INTO `help_relation` VALUES (433, 491);
INSERT INTO `help_relation` VALUES (443, 491);
INSERT INTO `help_relation` VALUES (456, 491);
INSERT INTO `help_relation` VALUES (557, 491);
INSERT INTO `help_relation` VALUES (433, 492);
INSERT INTO `help_relation` VALUES (443, 492);
INSERT INTO `help_relation` VALUES (450, 492);
INSERT INTO `help_relation` VALUES (479, 492);
INSERT INTO `help_relation` VALUES (433, 493);
INSERT INTO `help_relation` VALUES (443, 493);
INSERT INTO `help_relation` VALUES (433, 494);
INSERT INTO `help_relation` VALUES (438, 494);
INSERT INTO `help_relation` VALUES (465, 494);
INSERT INTO `help_relation` VALUES (529, 494);
INSERT INTO `help_relation` VALUES (433, 495);
INSERT INTO `help_relation` VALUES (443, 495);
INSERT INTO `help_relation` VALUES (433, 496);
INSERT INTO `help_relation` VALUES (443, 496);
INSERT INTO `help_relation` VALUES (497, 496);
INSERT INTO `help_relation` VALUES (499, 496);
INSERT INTO `help_relation` VALUES (500, 496);
INSERT INTO `help_relation` VALUES (583, 496);
INSERT INTO `help_relation` VALUES (584, 496);
INSERT INTO `help_relation` VALUES (596, 496);
INSERT INTO `help_relation` VALUES (435, 497);
INSERT INTO `help_relation` VALUES (445, 497);
INSERT INTO `help_relation` VALUES (451, 497);
INSERT INTO `help_relation` VALUES (477, 497);
INSERT INTO `help_relation` VALUES (435, 498);
INSERT INTO `help_relation` VALUES (445, 498);
INSERT INTO `help_relation` VALUES (451, 498);
INSERT INTO `help_relation` VALUES (437, 499);
INSERT INTO `help_relation` VALUES (448, 499);
INSERT INTO `help_relation` VALUES (437, 500);
INSERT INTO `help_relation` VALUES (448, 500);
INSERT INTO `help_relation` VALUES (460, 500);
INSERT INTO `help_relation` VALUES (438, 501);
INSERT INTO `help_relation` VALUES (438, 502);
INSERT INTO `help_relation` VALUES (444, 502);
INSERT INTO `help_relation` VALUES (457, 502);
INSERT INTO `help_relation` VALUES (438, 503);
INSERT INTO `help_relation` VALUES (532, 503);
INSERT INTO `help_relation` VALUES (438, 504);
INSERT INTO `help_relation` VALUES (438, 505);
INSERT INTO `help_relation` VALUES (449, 505);
INSERT INTO `help_relation` VALUES (438, 506);
INSERT INTO `help_relation` VALUES (496, 506);
INSERT INTO `help_relation` VALUES (438, 507);
INSERT INTO `help_relation` VALUES (449, 507);
INSERT INTO `help_relation` VALUES (533, 507);
INSERT INTO `help_relation` VALUES (438, 508);
INSERT INTO `help_relation` VALUES (449, 508);
INSERT INTO `help_relation` VALUES (534, 508);
INSERT INTO `help_relation` VALUES (438, 509);
INSERT INTO `help_relation` VALUES (438, 510);
INSERT INTO `help_relation` VALUES (449, 510);
INSERT INTO `help_relation` VALUES (474, 510);
INSERT INTO `help_relation` VALUES (545, 510);
INSERT INTO `help_relation` VALUES (552, 510);
INSERT INTO `help_relation` VALUES (553, 510);
INSERT INTO `help_relation` VALUES (438, 511);
INSERT INTO `help_relation` VALUES (449, 511);
INSERT INTO `help_relation` VALUES (594, 511);
INSERT INTO `help_relation` VALUES (438, 512);
INSERT INTO `help_relation` VALUES (449, 512);
INSERT INTO `help_relation` VALUES (438, 513);
INSERT INTO `help_relation` VALUES (449, 513);
INSERT INTO `help_relation` VALUES (438, 514);
INSERT INTO `help_relation` VALUES (438, 515);
INSERT INTO `help_relation` VALUES (439, 515);
INSERT INTO `help_relation` VALUES (454, 515);
INSERT INTO `help_relation` VALUES (455, 515);
INSERT INTO `help_relation` VALUES (456, 515);
INSERT INTO `help_relation` VALUES (457, 515);
INSERT INTO `help_relation` VALUES (458, 515);
INSERT INTO `help_relation` VALUES (459, 515);
INSERT INTO `help_relation` VALUES (460, 515);
INSERT INTO `help_relation` VALUES (461, 515);
INSERT INTO `help_relation` VALUES (462, 515);
INSERT INTO `help_relation` VALUES (463, 515);
INSERT INTO `help_relation` VALUES (464, 515);
INSERT INTO `help_relation` VALUES (503, 515);
INSERT INTO `help_relation` VALUES (504, 515);
INSERT INTO `help_relation` VALUES (527, 515);
INSERT INTO `help_relation` VALUES (538, 515);
INSERT INTO `help_relation` VALUES (438, 516);
INSERT INTO `help_relation` VALUES (439, 516);
INSERT INTO `help_relation` VALUES (449, 516);
INSERT INTO `help_relation` VALUES (451, 516);
INSERT INTO `help_relation` VALUES (462, 516);
INSERT INTO `help_relation` VALUES (545, 516);
INSERT INTO `help_relation` VALUES (565, 516);
INSERT INTO `help_relation` VALUES (593, 516);
INSERT INTO `help_relation` VALUES (438, 517);
INSERT INTO `help_relation` VALUES (438, 518);
INSERT INTO `help_relation` VALUES (449, 518);
INSERT INTO `help_relation` VALUES (470, 518);
INSERT INTO `help_relation` VALUES (438, 519);
INSERT INTO `help_relation` VALUES (448, 519);
INSERT INTO `help_relation` VALUES (449, 519);
INSERT INTO `help_relation` VALUES (450, 519);
INSERT INTO `help_relation` VALUES (438, 520);
INSERT INTO `help_relation` VALUES (444, 520);
INSERT INTO `help_relation` VALUES (449, 520);
INSERT INTO `help_relation` VALUES (438, 521);
INSERT INTO `help_relation` VALUES (471, 521);
INSERT INTO `help_relation` VALUES (474, 521);
INSERT INTO `help_relation` VALUES (475, 521);
INSERT INTO `help_relation` VALUES (477, 521);
INSERT INTO `help_relation` VALUES (479, 521);
INSERT INTO `help_relation` VALUES (481, 521);
INSERT INTO `help_relation` VALUES (595, 521);
INSERT INTO `help_relation` VALUES (438, 522);
INSERT INTO `help_relation` VALUES (474, 522);
INSERT INTO `help_relation` VALUES (438, 523);
INSERT INTO `help_relation` VALUES (449, 523);
INSERT INTO `help_relation` VALUES (438, 524);
INSERT INTO `help_relation` VALUES (545, 524);
INSERT INTO `help_relation` VALUES (572, 524);
INSERT INTO `help_relation` VALUES (438, 525);
INSERT INTO `help_relation` VALUES (449, 525);
INSERT INTO `help_relation` VALUES (438, 526);
INSERT INTO `help_relation` VALUES (444, 526);
INSERT INTO `help_relation` VALUES (457, 526);
INSERT INTO `help_relation` VALUES (477, 526);
INSERT INTO `help_relation` VALUES (489, 526);
INSERT INTO `help_relation` VALUES (593, 526);
INSERT INTO `help_relation` VALUES (438, 527);
INSERT INTO `help_relation` VALUES (449, 527);
INSERT INTO `help_relation` VALUES (438, 528);
INSERT INTO `help_relation` VALUES (449, 528);
INSERT INTO `help_relation` VALUES (438, 529);
INSERT INTO `help_relation` VALUES (438, 530);
INSERT INTO `help_relation` VALUES (535, 530);
INSERT INTO `help_relation` VALUES (438, 531);
INSERT INTO `help_relation` VALUES (449, 531);
INSERT INTO `help_relation` VALUES (438, 532);
INSERT INTO `help_relation` VALUES (444, 532);
INSERT INTO `help_relation` VALUES (449, 532);
INSERT INTO `help_relation` VALUES (438, 533);
INSERT INTO `help_relation` VALUES (449, 533);
INSERT INTO `help_relation` VALUES (468, 533);
INSERT INTO `help_relation` VALUES (471, 533);
INSERT INTO `help_relation` VALUES (474, 533);
INSERT INTO `help_relation` VALUES (476, 533);
INSERT INTO `help_relation` VALUES (477, 533);
INSERT INTO `help_relation` VALUES (479, 533);
INSERT INTO `help_relation` VALUES (592, 533);
INSERT INTO `help_relation` VALUES (595, 533);
INSERT INTO `help_relation` VALUES (438, 534);
INSERT INTO `help_relation` VALUES (438, 535);
INSERT INTO `help_relation` VALUES (438, 536);
INSERT INTO `help_relation` VALUES (438, 537);
INSERT INTO `help_relation` VALUES (438, 538);
INSERT INTO `help_relation` VALUES (536, 538);
INSERT INTO `help_relation` VALUES (438, 539);
INSERT INTO `help_relation` VALUES (449, 539);
INSERT INTO `help_relation` VALUES (438, 540);
INSERT INTO `help_relation` VALUES (444, 540);
INSERT INTO `help_relation` VALUES (438, 541);
INSERT INTO `help_relation` VALUES (449, 541);
INSERT INTO `help_relation` VALUES (438, 542);
INSERT INTO `help_relation` VALUES (449, 542);
INSERT INTO `help_relation` VALUES (438, 543);
INSERT INTO `help_relation` VALUES (449, 543);
INSERT INTO `help_relation` VALUES (438, 544);
INSERT INTO `help_relation` VALUES (439, 544);
INSERT INTO `help_relation` VALUES (451, 544);
INSERT INTO `help_relation` VALUES (462, 544);
INSERT INTO `help_relation` VALUES (438, 545);
INSERT INTO `help_relation` VALUES (438, 546);
INSERT INTO `help_relation` VALUES (480, 546);
INSERT INTO `help_relation` VALUES (438, 547);
INSERT INTO `help_relation` VALUES (439, 548);
INSERT INTO `help_relation` VALUES (451, 548);
INSERT INTO `help_relation` VALUES (439, 549);
INSERT INTO `help_relation` VALUES (451, 549);
INSERT INTO `help_relation` VALUES (439, 550);
INSERT INTO `help_relation` VALUES (451, 550);
INSERT INTO `help_relation` VALUES (440, 551);
INSERT INTO `help_relation` VALUES (453, 551);
INSERT INTO `help_relation` VALUES (464, 551);
INSERT INTO `help_relation` VALUES (441, 552);
INSERT INTO `help_relation` VALUES (442, 552);
INSERT INTO `help_relation` VALUES (443, 552);
INSERT INTO `help_relation` VALUES (454, 552);
INSERT INTO `help_relation` VALUES (455, 552);
INSERT INTO `help_relation` VALUES (456, 552);
INSERT INTO `help_relation` VALUES (460, 552);
INSERT INTO `help_relation` VALUES (461, 552);
INSERT INTO `help_relation` VALUES (464, 552);
INSERT INTO `help_relation` VALUES (538, 552);
INSERT INTO `help_relation` VALUES (443, 553);
INSERT INTO `help_relation` VALUES (443, 554);
INSERT INTO `help_relation` VALUES (443, 555);
INSERT INTO `help_relation` VALUES (443, 556);
INSERT INTO `help_relation` VALUES (444, 557);
INSERT INTO `help_relation` VALUES (448, 558);
INSERT INTO `help_relation` VALUES (448, 559);
INSERT INTO `help_relation` VALUES (448, 560);
INSERT INTO `help_relation` VALUES (448, 561);
INSERT INTO `help_relation` VALUES (448, 562);
INSERT INTO `help_relation` VALUES (449, 563);
INSERT INTO `help_relation` VALUES (450, 563);
INSERT INTO `help_relation` VALUES (449, 564);
INSERT INTO `help_relation` VALUES (449, 565);
INSERT INTO `help_relation` VALUES (450, 565);
INSERT INTO `help_relation` VALUES (461, 565);
INSERT INTO `help_relation` VALUES (464, 565);
INSERT INTO `help_relation` VALUES (449, 566);
INSERT INTO `help_relation` VALUES (449, 567);
INSERT INTO `help_relation` VALUES (449, 568);
INSERT INTO `help_relation` VALUES (474, 568);
INSERT INTO `help_relation` VALUES (449, 569);
INSERT INTO `help_relation` VALUES (450, 569);
INSERT INTO `help_relation` VALUES (468, 569);
INSERT INTO `help_relation` VALUES (449, 570);
INSERT INTO `help_relation` VALUES (449, 571);
INSERT INTO `help_relation` VALUES (449, 572);
INSERT INTO `help_relation` VALUES (545, 572);
INSERT INTO `help_relation` VALUES (552, 572);
INSERT INTO `help_relation` VALUES (553, 572);
INSERT INTO `help_relation` VALUES (579, 572);
INSERT INTO `help_relation` VALUES (587, 572);
INSERT INTO `help_relation` VALUES (449, 573);
INSERT INTO `help_relation` VALUES (449, 574);
INSERT INTO `help_relation` VALUES (545, 574);
INSERT INTO `help_relation` VALUES (449, 575);
INSERT INTO `help_relation` VALUES (449, 576);
INSERT INTO `help_relation` VALUES (449, 577);
INSERT INTO `help_relation` VALUES (449, 578);
INSERT INTO `help_relation` VALUES (449, 579);
INSERT INTO `help_relation` VALUES (449, 580);
INSERT INTO `help_relation` VALUES (450, 580);
INSERT INTO `help_relation` VALUES (449, 581);
INSERT INTO `help_relation` VALUES (449, 582);
INSERT INTO `help_relation` VALUES (449, 583);
INSERT INTO `help_relation` VALUES (450, 583);
INSERT INTO `help_relation` VALUES (528, 583);
INSERT INTO `help_relation` VALUES (450, 584);
INSERT INTO `help_relation` VALUES (461, 584);
INSERT INTO `help_relation` VALUES (464, 584);
INSERT INTO `help_relation` VALUES (450, 585);
INSERT INTO `help_relation` VALUES (471, 585);
INSERT INTO `help_relation` VALUES (477, 585);
INSERT INTO `help_relation` VALUES (481, 585);
INSERT INTO `help_relation` VALUES (451, 586);
INSERT INTO `help_relation` VALUES (451, 587);
INSERT INTO `help_relation` VALUES (451, 588);
INSERT INTO `help_relation` VALUES (451, 589);
INSERT INTO `help_relation` VALUES (451, 590);
INSERT INTO `help_relation` VALUES (479, 590);
INSERT INTO `help_relation` VALUES (601, 590);
INSERT INTO `help_relation` VALUES (452, 591);
INSERT INTO `help_relation` VALUES (463, 591);
INSERT INTO `help_relation` VALUES (545, 591);
INSERT INTO `help_relation` VALUES (461, 592);
INSERT INTO `help_relation` VALUES (467, 593);
INSERT INTO `help_relation` VALUES (468, 594);
INSERT INTO `help_relation` VALUES (470, 594);
INSERT INTO `help_relation` VALUES (477, 594);
INSERT INTO `help_relation` VALUES (481, 594);
INSERT INTO `help_relation` VALUES (549, 594);
INSERT INTO `help_relation` VALUES (582, 594);
INSERT INTO `help_relation` VALUES (468, 595);
INSERT INTO `help_relation` VALUES (471, 595);
INSERT INTO `help_relation` VALUES (474, 595);
INSERT INTO `help_relation` VALUES (475, 595);
INSERT INTO `help_relation` VALUES (476, 595);
INSERT INTO `help_relation` VALUES (481, 595);
INSERT INTO `help_relation` VALUES (489, 595);
INSERT INTO `help_relation` VALUES (468, 596);
INSERT INTO `help_relation` VALUES (533, 596);
INSERT INTO `help_relation` VALUES (536, 596);
INSERT INTO `help_relation` VALUES (468, 597);
INSERT INTO `help_relation` VALUES (479, 597);
INSERT INTO `help_relation` VALUES (502, 597);
INSERT INTO `help_relation` VALUES (468, 598);
INSERT INTO `help_relation` VALUES (470, 598);
INSERT INTO `help_relation` VALUES (481, 598);
INSERT INTO `help_relation` VALUES (552, 598);
INSERT INTO `help_relation` VALUES (553, 598);
INSERT INTO `help_relation` VALUES (572, 598);
INSERT INTO `help_relation` VALUES (470, 599);
INSERT INTO `help_relation` VALUES (516, 599);
INSERT INTO `help_relation` VALUES (470, 600);
INSERT INTO `help_relation` VALUES (521, 600);
INSERT INTO `help_relation` VALUES (470, 601);
INSERT INTO `help_relation` VALUES (470, 602);
INSERT INTO `help_relation` VALUES (470, 603);
INSERT INTO `help_relation` VALUES (519, 603);
INSERT INTO `help_relation` VALUES (545, 603);
INSERT INTO `help_relation` VALUES (574, 603);
INSERT INTO `help_relation` VALUES (470, 604);
INSERT INTO `help_relation` VALUES (470, 605);
INSERT INTO `help_relation` VALUES (482, 605);
INSERT INTO `help_relation` VALUES (483, 605);
INSERT INTO `help_relation` VALUES (484, 605);
INSERT INTO `help_relation` VALUES (485, 605);
INSERT INTO `help_relation` VALUES (489, 605);
INSERT INTO `help_relation` VALUES (490, 605);
INSERT INTO `help_relation` VALUES (491, 605);
INSERT INTO `help_relation` VALUES (593, 605);
INSERT INTO `help_relation` VALUES (471, 606);
INSERT INTO `help_relation` VALUES (473, 606);
INSERT INTO `help_relation` VALUES (476, 606);
INSERT INTO `help_relation` VALUES (471, 607);
INSERT INTO `help_relation` VALUES (471, 608);
INSERT INTO `help_relation` VALUES (477, 608);
INSERT INTO `help_relation` VALUES (471, 609);
INSERT INTO `help_relation` VALUES (476, 609);
INSERT INTO `help_relation` VALUES (477, 609);
INSERT INTO `help_relation` VALUES (595, 609);
INSERT INTO `help_relation` VALUES (471, 610);
INSERT INTO `help_relation` VALUES (472, 610);
INSERT INTO `help_relation` VALUES (476, 610);
INSERT INTO `help_relation` VALUES (477, 610);
INSERT INTO `help_relation` VALUES (597, 610);
INSERT INTO `help_relation` VALUES (598, 610);
INSERT INTO `help_relation` VALUES (599, 610);
INSERT INTO `help_relation` VALUES (474, 611);
INSERT INTO `help_relation` VALUES (475, 611);
INSERT INTO `help_relation` VALUES (474, 612);
INSERT INTO `help_relation` VALUES (474, 613);
INSERT INTO `help_relation` VALUES (474, 614);
INSERT INTO `help_relation` VALUES (545, 614);
INSERT INTO `help_relation` VALUES (552, 614);
INSERT INTO `help_relation` VALUES (553, 614);
INSERT INTO `help_relation` VALUES (474, 615);
INSERT INTO `help_relation` VALUES (475, 615);
INSERT INTO `help_relation` VALUES (474, 616);
INSERT INTO `help_relation` VALUES (475, 616);
INSERT INTO `help_relation` VALUES (474, 617);
INSERT INTO `help_relation` VALUES (595, 617);
INSERT INTO `help_relation` VALUES (474, 618);
INSERT INTO `help_relation` VALUES (475, 618);
INSERT INTO `help_relation` VALUES (489, 618);
INSERT INTO `help_relation` VALUES (532, 618);
INSERT INTO `help_relation` VALUES (535, 618);
INSERT INTO `help_relation` VALUES (536, 618);
INSERT INTO `help_relation` VALUES (593, 618);
INSERT INTO `help_relation` VALUES (474, 619);
INSERT INTO `help_relation` VALUES (474, 620);
INSERT INTO `help_relation` VALUES (474, 621);
INSERT INTO `help_relation` VALUES (475, 622);
INSERT INTO `help_relation` VALUES (526, 622);
INSERT INTO `help_relation` VALUES (528, 622);
INSERT INTO `help_relation` VALUES (475, 623);
INSERT INTO `help_relation` VALUES (477, 624);
INSERT INTO `help_relation` VALUES (480, 624);
INSERT INTO `help_relation` VALUES (497, 624);
INSERT INTO `help_relation` VALUES (528, 624);
INSERT INTO `help_relation` VALUES (530, 624);
INSERT INTO `help_relation` VALUES (592, 624);
INSERT INTO `help_relation` VALUES (595, 624);
INSERT INTO `help_relation` VALUES (477, 625);
INSERT INTO `help_relation` VALUES (479, 625);
INSERT INTO `help_relation` VALUES (489, 625);
INSERT INTO `help_relation` VALUES (477, 626);
INSERT INTO `help_relation` VALUES (477, 627);
INSERT INTO `help_relation` VALUES (477, 628);
INSERT INTO `help_relation` VALUES (517, 628);
INSERT INTO `help_relation` VALUES (520, 628);
INSERT INTO `help_relation` VALUES (521, 628);
INSERT INTO `help_relation` VALUES (531, 628);
INSERT INTO `help_relation` VALUES (545, 628);
INSERT INTO `help_relation` VALUES (593, 628);
INSERT INTO `help_relation` VALUES (477, 629);
INSERT INTO `help_relation` VALUES (477, 630);
INSERT INTO `help_relation` VALUES (479, 630);
INSERT INTO `help_relation` VALUES (477, 631);
INSERT INTO `help_relation` VALUES (477, 632);
INSERT INTO `help_relation` VALUES (477, 633);
INSERT INTO `help_relation` VALUES (477, 634);
INSERT INTO `help_relation` VALUES (477, 635);
INSERT INTO `help_relation` VALUES (477, 636);
INSERT INTO `help_relation` VALUES (477, 637);
INSERT INTO `help_relation` VALUES (477, 638);
INSERT INTO `help_relation` VALUES (477, 639);
INSERT INTO `help_relation` VALUES (477, 640);
INSERT INTO `help_relation` VALUES (477, 641);
INSERT INTO `help_relation` VALUES (479, 641);
INSERT INTO `help_relation` VALUES (478, 642);
INSERT INTO `help_relation` VALUES (479, 643);
INSERT INTO `help_relation` VALUES (479, 644);
INSERT INTO `help_relation` VALUES (479, 645);
INSERT INTO `help_relation` VALUES (479, 646);
INSERT INTO `help_relation` VALUES (479, 647);
INSERT INTO `help_relation` VALUES (482, 648);
INSERT INTO `help_relation` VALUES (483, 648);
INSERT INTO `help_relation` VALUES (484, 648);
INSERT INTO `help_relation` VALUES (485, 648);
INSERT INTO `help_relation` VALUES (482, 649);
INSERT INTO `help_relation` VALUES (483, 649);
INSERT INTO `help_relation` VALUES (484, 649);
INSERT INTO `help_relation` VALUES (485, 649);
INSERT INTO `help_relation` VALUES (491, 649);
INSERT INTO `help_relation` VALUES (505, 649);
INSERT INTO `help_relation` VALUES (482, 650);
INSERT INTO `help_relation` VALUES (483, 650);
INSERT INTO `help_relation` VALUES (484, 650);
INSERT INTO `help_relation` VALUES (485, 650);
INSERT INTO `help_relation` VALUES (482, 651);
INSERT INTO `help_relation` VALUES (483, 651);
INSERT INTO `help_relation` VALUES (484, 651);
INSERT INTO `help_relation` VALUES (485, 651);
INSERT INTO `help_relation` VALUES (491, 651);
INSERT INTO `help_relation` VALUES (482, 652);
INSERT INTO `help_relation` VALUES (483, 652);
INSERT INTO `help_relation` VALUES (484, 652);
INSERT INTO `help_relation` VALUES (485, 652);
INSERT INTO `help_relation` VALUES (491, 652);
INSERT INTO `help_relation` VALUES (482, 653);
INSERT INTO `help_relation` VALUES (483, 653);
INSERT INTO `help_relation` VALUES (484, 653);
INSERT INTO `help_relation` VALUES (485, 653);
INSERT INTO `help_relation` VALUES (490, 653);
INSERT INTO `help_relation` VALUES (491, 653);
INSERT INTO `help_relation` VALUES (482, 654);
INSERT INTO `help_relation` VALUES (483, 654);
INSERT INTO `help_relation` VALUES (484, 654);
INSERT INTO `help_relation` VALUES (485, 654);
INSERT INTO `help_relation` VALUES (486, 654);
INSERT INTO `help_relation` VALUES (487, 654);
INSERT INTO `help_relation` VALUES (488, 654);
INSERT INTO `help_relation` VALUES (491, 654);
INSERT INTO `help_relation` VALUES (482, 655);
INSERT INTO `help_relation` VALUES (483, 655);
INSERT INTO `help_relation` VALUES (484, 655);
INSERT INTO `help_relation` VALUES (485, 655);
INSERT INTO `help_relation` VALUES (486, 655);
INSERT INTO `help_relation` VALUES (487, 655);
INSERT INTO `help_relation` VALUES (488, 655);
INSERT INTO `help_relation` VALUES (491, 655);
INSERT INTO `help_relation` VALUES (482, 656);
INSERT INTO `help_relation` VALUES (483, 656);
INSERT INTO `help_relation` VALUES (484, 656);
INSERT INTO `help_relation` VALUES (485, 656);
INSERT INTO `help_relation` VALUES (491, 656);
INSERT INTO `help_relation` VALUES (482, 657);
INSERT INTO `help_relation` VALUES (483, 657);
INSERT INTO `help_relation` VALUES (484, 657);
INSERT INTO `help_relation` VALUES (485, 657);
INSERT INTO `help_relation` VALUES (491, 657);
INSERT INTO `help_relation` VALUES (499, 657);
INSERT INTO `help_relation` VALUES (482, 658);
INSERT INTO `help_relation` VALUES (483, 658);
INSERT INTO `help_relation` VALUES (484, 658);
INSERT INTO `help_relation` VALUES (485, 658);
INSERT INTO `help_relation` VALUES (490, 658);
INSERT INTO `help_relation` VALUES (482, 659);
INSERT INTO `help_relation` VALUES (483, 659);
INSERT INTO `help_relation` VALUES (484, 659);
INSERT INTO `help_relation` VALUES (485, 659);
INSERT INTO `help_relation` VALUES (482, 660);
INSERT INTO `help_relation` VALUES (483, 660);
INSERT INTO `help_relation` VALUES (484, 660);
INSERT INTO `help_relation` VALUES (485, 660);
INSERT INTO `help_relation` VALUES (489, 660);
INSERT INTO `help_relation` VALUES (490, 660);
INSERT INTO `help_relation` VALUES (491, 660);
INSERT INTO `help_relation` VALUES (486, 661);
INSERT INTO `help_relation` VALUES (487, 661);
INSERT INTO `help_relation` VALUES (488, 661);
INSERT INTO `help_relation` VALUES (486, 662);
INSERT INTO `help_relation` VALUES (487, 662);
INSERT INTO `help_relation` VALUES (488, 662);
INSERT INTO `help_relation` VALUES (492, 662);
INSERT INTO `help_relation` VALUES (493, 662);
INSERT INTO `help_relation` VALUES (496, 662);
INSERT INTO `help_relation` VALUES (489, 663);
INSERT INTO `help_relation` VALUES (545, 663);
INSERT INTO `help_relation` VALUES (574, 663);
INSERT INTO `help_relation` VALUES (587, 663);
INSERT INTO `help_relation` VALUES (593, 663);
INSERT INTO `help_relation` VALUES (489, 664);
INSERT INTO `help_relation` VALUES (490, 665);
INSERT INTO `help_relation` VALUES (490, 666);
INSERT INTO `help_relation` VALUES (498, 666);
INSERT INTO `help_relation` VALUES (541, 666);
INSERT INTO `help_relation` VALUES (585, 666);
INSERT INTO `help_relation` VALUES (589, 666);
INSERT INTO `help_relation` VALUES (490, 667);
INSERT INTO `help_relation` VALUES (490, 668);
INSERT INTO `help_relation` VALUES (490, 669);
INSERT INTO `help_relation` VALUES (490, 670);
INSERT INTO `help_relation` VALUES (490, 671);
INSERT INTO `help_relation` VALUES (541, 671);
INSERT INTO `help_relation` VALUES (585, 671);
INSERT INTO `help_relation` VALUES (589, 671);
INSERT INTO `help_relation` VALUES (490, 672);
INSERT INTO `help_relation` VALUES (491, 673);
INSERT INTO `help_relation` VALUES (501, 673);
INSERT INTO `help_relation` VALUES (503, 673);
INSERT INTO `help_relation` VALUES (504, 673);
INSERT INTO `help_relation` VALUES (491, 674);
INSERT INTO `help_relation` VALUES (491, 675);
INSERT INTO `help_relation` VALUES (492, 676);
INSERT INTO `help_relation` VALUES (493, 676);
INSERT INTO `help_relation` VALUES (492, 677);
INSERT INTO `help_relation` VALUES (493, 677);
INSERT INTO `help_relation` VALUES (545, 677);
INSERT INTO `help_relation` VALUES (547, 677);
INSERT INTO `help_relation` VALUES (548, 677);
INSERT INTO `help_relation` VALUES (593, 677);
INSERT INTO `help_relation` VALUES (492, 678);
INSERT INTO `help_relation` VALUES (493, 678);
INSERT INTO `help_relation` VALUES (494, 678);
INSERT INTO `help_relation` VALUES (496, 678);
INSERT INTO `help_relation` VALUES (547, 678);
INSERT INTO `help_relation` VALUES (548, 678);
INSERT INTO `help_relation` VALUES (573, 678);
INSERT INTO `help_relation` VALUES (596, 678);
INSERT INTO `help_relation` VALUES (492, 679);
INSERT INTO `help_relation` VALUES (493, 679);
INSERT INTO `help_relation` VALUES (495, 680);
INSERT INTO `help_relation` VALUES (496, 681);
INSERT INTO `help_relation` VALUES (496, 682);
INSERT INTO `help_relation` VALUES (496, 683);
INSERT INTO `help_relation` VALUES (496, 684);
INSERT INTO `help_relation` VALUES (496, 685);
INSERT INTO `help_relation` VALUES (496, 686);
INSERT INTO `help_relation` VALUES (496, 687);
INSERT INTO `help_relation` VALUES (496, 688);
INSERT INTO `help_relation` VALUES (496, 689);
INSERT INTO `help_relation` VALUES (496, 690);
INSERT INTO `help_relation` VALUES (496, 691);
INSERT INTO `help_relation` VALUES (496, 692);
INSERT INTO `help_relation` VALUES (496, 693);
INSERT INTO `help_relation` VALUES (496, 694);
INSERT INTO `help_relation` VALUES (496, 695);
INSERT INTO `help_relation` VALUES (496, 696);
INSERT INTO `help_relation` VALUES (496, 697);
INSERT INTO `help_relation` VALUES (496, 698);
INSERT INTO `help_relation` VALUES (496, 699);
INSERT INTO `help_relation` VALUES (496, 700);
INSERT INTO `help_relation` VALUES (496, 701);
INSERT INTO `help_relation` VALUES (496, 702);
INSERT INTO `help_relation` VALUES (498, 703);
INSERT INTO `help_relation` VALUES (499, 704);
INSERT INTO `help_relation` VALUES (499, 705);
INSERT INTO `help_relation` VALUES (500, 705);
INSERT INTO `help_relation` VALUES (499, 706);
INSERT INTO `help_relation` VALUES (499, 707);
INSERT INTO `help_relation` VALUES (499, 708);
INSERT INTO `help_relation` VALUES (499, 709);
INSERT INTO `help_relation` VALUES (499, 710);
INSERT INTO `help_relation` VALUES (500, 710);
INSERT INTO `help_relation` VALUES (500, 711);
INSERT INTO `help_relation` VALUES (502, 712);
INSERT INTO `help_relation` VALUES (528, 712);
INSERT INTO `help_relation` VALUES (503, 713);
INSERT INTO `help_relation` VALUES (504, 713);
INSERT INTO `help_relation` VALUES (507, 714);
INSERT INTO `help_relation` VALUES (517, 714);
INSERT INTO `help_relation` VALUES (520, 714);
INSERT INTO `help_relation` VALUES (521, 714);
INSERT INTO `help_relation` VALUES (509, 715);
INSERT INTO `help_relation` VALUES (510, 716);
INSERT INTO `help_relation` VALUES (511, 717);
INSERT INTO `help_relation` VALUES (512, 718);
INSERT INTO `help_relation` VALUES (513, 719);
INSERT INTO `help_relation` VALUES (514, 720);
INSERT INTO `help_relation` VALUES (515, 721);
INSERT INTO `help_relation` VALUES (517, 722);
INSERT INTO `help_relation` VALUES (518, 723);
INSERT INTO `help_relation` VALUES (520, 724);
INSERT INTO `help_relation` VALUES (521, 725);
INSERT INTO `help_relation` VALUES (521, 726);
INSERT INTO `help_relation` VALUES (521, 727);
INSERT INTO `help_relation` VALUES (522, 728);
INSERT INTO `help_relation` VALUES (523, 728);
INSERT INTO `help_relation` VALUES (524, 728);
INSERT INTO `help_relation` VALUES (522, 729);
INSERT INTO `help_relation` VALUES (523, 729);
INSERT INTO `help_relation` VALUES (524, 729);
INSERT INTO `help_relation` VALUES (522, 730);
INSERT INTO `help_relation` VALUES (523, 730);
INSERT INTO `help_relation` VALUES (524, 730);
INSERT INTO `help_relation` VALUES (522, 731);
INSERT INTO `help_relation` VALUES (523, 731);
INSERT INTO `help_relation` VALUES (524, 731);
INSERT INTO `help_relation` VALUES (522, 732);
INSERT INTO `help_relation` VALUES (523, 732);
INSERT INTO `help_relation` VALUES (524, 732);
INSERT INTO `help_relation` VALUES (522, 733);
INSERT INTO `help_relation` VALUES (523, 733);
INSERT INTO `help_relation` VALUES (524, 733);
INSERT INTO `help_relation` VALUES (522, 734);
INSERT INTO `help_relation` VALUES (523, 734);
INSERT INTO `help_relation` VALUES (524, 734);
INSERT INTO `help_relation` VALUES (522, 735);
INSERT INTO `help_relation` VALUES (522, 736);
INSERT INTO `help_relation` VALUES (522, 737);
INSERT INTO `help_relation` VALUES (523, 737);
INSERT INTO `help_relation` VALUES (524, 737);
INSERT INTO `help_relation` VALUES (522, 738);
INSERT INTO `help_relation` VALUES (523, 738);
INSERT INTO `help_relation` VALUES (524, 738);
INSERT INTO `help_relation` VALUES (522, 739);
INSERT INTO `help_relation` VALUES (522, 740);
INSERT INTO `help_relation` VALUES (522, 741);
INSERT INTO `help_relation` VALUES (523, 741);
INSERT INTO `help_relation` VALUES (524, 741);
INSERT INTO `help_relation` VALUES (522, 742);
INSERT INTO `help_relation` VALUES (523, 742);
INSERT INTO `help_relation` VALUES (524, 742);
INSERT INTO `help_relation` VALUES (522, 743);
INSERT INTO `help_relation` VALUES (523, 743);
INSERT INTO `help_relation` VALUES (524, 743);
INSERT INTO `help_relation` VALUES (523, 744);
INSERT INTO `help_relation` VALUES (523, 745);
INSERT INTO `help_relation` VALUES (524, 745);
INSERT INTO `help_relation` VALUES (524, 746);
INSERT INTO `help_relation` VALUES (525, 747);
INSERT INTO `help_relation` VALUES (528, 748);
INSERT INTO `help_relation` VALUES (528, 749);
INSERT INTO `help_relation` VALUES (528, 750);
INSERT INTO `help_relation` VALUES (528, 751);
INSERT INTO `help_relation` VALUES (530, 751);
INSERT INTO `help_relation` VALUES (528, 752);
INSERT INTO `help_relation` VALUES (528, 753);
INSERT INTO `help_relation` VALUES (528, 754);
INSERT INTO `help_relation` VALUES (528, 755);
INSERT INTO `help_relation` VALUES (528, 756);
INSERT INTO `help_relation` VALUES (528, 757);
INSERT INTO `help_relation` VALUES (528, 758);
INSERT INTO `help_relation` VALUES (530, 758);
INSERT INTO `help_relation` VALUES (528, 759);
INSERT INTO `help_relation` VALUES (530, 759);
INSERT INTO `help_relation` VALUES (576, 759);
INSERT INTO `help_relation` VALUES (593, 759);
INSERT INTO `help_relation` VALUES (528, 760);
INSERT INTO `help_relation` VALUES (528, 761);
INSERT INTO `help_relation` VALUES (528, 762);
INSERT INTO `help_relation` VALUES (528, 763);
INSERT INTO `help_relation` VALUES (528, 764);
INSERT INTO `help_relation` VALUES (528, 765);
INSERT INTO `help_relation` VALUES (528, 766);
INSERT INTO `help_relation` VALUES (528, 767);
INSERT INTO `help_relation` VALUES (528, 768);
INSERT INTO `help_relation` VALUES (528, 769);
INSERT INTO `help_relation` VALUES (528, 770);
INSERT INTO `help_relation` VALUES (530, 771);
INSERT INTO `help_relation` VALUES (530, 772);
INSERT INTO `help_relation` VALUES (532, 773);
INSERT INTO `help_relation` VALUES (535, 773);
INSERT INTO `help_relation` VALUES (536, 773);
INSERT INTO `help_relation` VALUES (593, 773);
INSERT INTO `help_relation` VALUES (533, 774);
INSERT INTO `help_relation` VALUES (533, 775);
INSERT INTO `help_relation` VALUES (536, 776);
INSERT INTO `help_relation` VALUES (597, 776);
INSERT INTO `help_relation` VALUES (598, 776);
INSERT INTO `help_relation` VALUES (599, 776);
INSERT INTO `help_relation` VALUES (536, 777);
INSERT INTO `help_relation` VALUES (537, 778);
INSERT INTO `help_relation` VALUES (537, 779);
INSERT INTO `help_relation` VALUES (537, 780);
INSERT INTO `help_relation` VALUES (537, 781);
INSERT INTO `help_relation` VALUES (539, 782);
INSERT INTO `help_relation` VALUES (539, 783);
INSERT INTO `help_relation` VALUES (540, 783);
INSERT INTO `help_relation` VALUES (545, 783);
INSERT INTO `help_relation` VALUES (540, 784);
INSERT INTO `help_relation` VALUES (541, 785);
INSERT INTO `help_relation` VALUES (544, 786);
INSERT INTO `help_relation` VALUES (545, 787);
INSERT INTO `help_relation` VALUES (546, 787);
INSERT INTO `help_relation` VALUES (545, 788);
INSERT INTO `help_relation` VALUES (554, 788);
INSERT INTO `help_relation` VALUES (545, 789);
INSERT INTO `help_relation` VALUES (563, 789);
INSERT INTO `help_relation` VALUES (564, 789);
INSERT INTO `help_relation` VALUES (545, 790);
INSERT INTO `help_relation` VALUES (566, 790);
INSERT INTO `help_relation` VALUES (545, 791);
INSERT INTO `help_relation` VALUES (567, 791);
INSERT INTO `help_relation` VALUES (545, 792);
INSERT INTO `help_relation` VALUES (571, 792);
INSERT INTO `help_relation` VALUES (545, 793);
INSERT INTO `help_relation` VALUES (583, 793);
INSERT INTO `help_relation` VALUES (593, 793);
INSERT INTO `help_relation` VALUES (545, 794);
INSERT INTO `help_relation` VALUES (545, 795);
INSERT INTO `help_relation` VALUES (565, 795);
INSERT INTO `help_relation` VALUES (545, 796);
INSERT INTO `help_relation` VALUES (579, 796);
INSERT INTO `help_relation` VALUES (545, 797);
INSERT INTO `help_relation` VALUES (563, 797);
INSERT INTO `help_relation` VALUES (564, 797);
INSERT INTO `help_relation` VALUES (545, 798);
INSERT INTO `help_relation` VALUES (546, 798);
INSERT INTO `help_relation` VALUES (547, 798);
INSERT INTO `help_relation` VALUES (548, 798);
INSERT INTO `help_relation` VALUES (549, 798);
INSERT INTO `help_relation` VALUES (550, 798);
INSERT INTO `help_relation` VALUES (551, 798);
INSERT INTO `help_relation` VALUES (552, 798);
INSERT INTO `help_relation` VALUES (553, 798);
INSERT INTO `help_relation` VALUES (554, 798);
INSERT INTO `help_relation` VALUES (555, 798);
INSERT INTO `help_relation` VALUES (556, 798);
INSERT INTO `help_relation` VALUES (557, 798);
INSERT INTO `help_relation` VALUES (558, 798);
INSERT INTO `help_relation` VALUES (559, 798);
INSERT INTO `help_relation` VALUES (560, 798);
INSERT INTO `help_relation` VALUES (563, 798);
INSERT INTO `help_relation` VALUES (564, 798);
INSERT INTO `help_relation` VALUES (565, 798);
INSERT INTO `help_relation` VALUES (566, 798);
INSERT INTO `help_relation` VALUES (567, 798);
INSERT INTO `help_relation` VALUES (568, 798);
INSERT INTO `help_relation` VALUES (569, 798);
INSERT INTO `help_relation` VALUES (570, 798);
INSERT INTO `help_relation` VALUES (571, 798);
INSERT INTO `help_relation` VALUES (572, 798);
INSERT INTO `help_relation` VALUES (573, 798);
INSERT INTO `help_relation` VALUES (574, 798);
INSERT INTO `help_relation` VALUES (575, 798);
INSERT INTO `help_relation` VALUES (576, 798);
INSERT INTO `help_relation` VALUES (577, 798);
INSERT INTO `help_relation` VALUES (578, 798);
INSERT INTO `help_relation` VALUES (579, 798);
INSERT INTO `help_relation` VALUES (580, 798);
INSERT INTO `help_relation` VALUES (581, 798);
INSERT INTO `help_relation` VALUES (582, 798);
INSERT INTO `help_relation` VALUES (583, 798);
INSERT INTO `help_relation` VALUES (584, 798);
INSERT INTO `help_relation` VALUES (585, 798);
INSERT INTO `help_relation` VALUES (586, 798);
INSERT INTO `help_relation` VALUES (587, 798);
INSERT INTO `help_relation` VALUES (588, 798);
INSERT INTO `help_relation` VALUES (589, 798);
INSERT INTO `help_relation` VALUES (590, 798);
INSERT INTO `help_relation` VALUES (545, 799);
INSERT INTO `help_relation` VALUES (565, 799);
INSERT INTO `help_relation` VALUES (570, 799);
INSERT INTO `help_relation` VALUES (573, 799);
INSERT INTO `help_relation` VALUES (578, 799);
INSERT INTO `help_relation` VALUES (584, 799);
INSERT INTO `help_relation` VALUES (585, 799);
INSERT INTO `help_relation` VALUES (586, 799);
INSERT INTO `help_relation` VALUES (593, 799);
INSERT INTO `help_relation` VALUES (545, 800);
INSERT INTO `help_relation` VALUES (588, 800);
INSERT INTO `help_relation` VALUES (545, 801);
INSERT INTO `help_relation` VALUES (589, 801);
INSERT INTO `help_relation` VALUES (545, 802);
INSERT INTO `help_relation` VALUES (590, 802);
INSERT INTO `help_relation` VALUES (549, 803);
INSERT INTO `help_relation` VALUES (591, 803);
INSERT INTO `help_relation` VALUES (549, 804);
INSERT INTO `help_relation` VALUES (568, 804);
INSERT INTO `help_relation` VALUES (582, 804);
INSERT INTO `help_relation` VALUES (566, 805);
INSERT INTO `help_relation` VALUES (569, 806);
INSERT INTO `help_relation` VALUES (577, 806);
INSERT INTO `help_relation` VALUES (575, 807);
INSERT INTO `help_relation` VALUES (580, 808);
INSERT INTO `help_relation` VALUES (581, 809);
INSERT INTO `help_relation` VALUES (582, 810);
INSERT INTO `help_relation` VALUES (593, 811);
INSERT INTO `help_relation` VALUES (593, 812);
INSERT INTO `help_relation` VALUES (593, 813);
INSERT INTO `help_relation` VALUES (593, 814);
INSERT INTO `help_relation` VALUES (593, 815);
INSERT INTO `help_relation` VALUES (593, 816);
INSERT INTO `help_relation` VALUES (593, 817);
INSERT INTO `help_relation` VALUES (594, 818);
INSERT INTO `help_relation` VALUES (595, 819);
INSERT INTO `help_relation` VALUES (597, 820);
INSERT INTO `help_relation` VALUES (598, 820);
INSERT INTO `help_relation` VALUES (599, 820);
INSERT INTO `help_relation` VALUES (597, 821);
INSERT INTO `help_relation` VALUES (598, 821);
INSERT INTO `help_relation` VALUES (599, 821);
INSERT INTO `help_relation` VALUES (597, 822);
INSERT INTO `help_relation` VALUES (598, 822);
INSERT INTO `help_relation` VALUES (599, 822);
INSERT INTO `help_relation` VALUES (597, 823);
INSERT INTO `help_relation` VALUES (598, 823);
INSERT INTO `help_relation` VALUES (599, 823);
INSERT INTO `help_relation` VALUES (597, 824);
INSERT INTO `help_relation` VALUES (598, 824);
INSERT INTO `help_relation` VALUES (599, 824);

-- ----------------------------
-- Table structure for help_topic
-- ----------------------------
DROP TABLE IF EXISTS `help_topic`;
CREATE TABLE `help_topic`  (
  `help_topic_id` int UNSIGNED NOT NULL,
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `help_category_id` smallint UNSIGNED NOT NULL,
  `description` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `example` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `url` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  PRIMARY KEY (`help_topic_id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'help topics' ROW_FORMAT = Page;

-- ----------------------------
-- Records of help_topic
-- ----------------------------
INSERT INTO `help_topic` VALUES (0, 'HELP_DATE', 1, 'This help information was generated from the MySQL 5.6 Reference Manual\non: 2021-01-04\n', '', '');
INSERT INTO `help_topic` VALUES (1, 'HELP_VERSION', 1, 'This help information was generated from the MySQL 5.6 Reference Manual\non: 2021-01-04 (revision: 68412)\n\nThis information applies to MySQL 5.6 through 5.6.51.\n', '', '');
INSERT INTO `help_topic` VALUES (2, 'AUTO_INCREMENT', 2, 'The AUTO_INCREMENT attribute can be used to generate a unique identity\nfor new rows:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/example-auto-increment.html\n\n', 'CREATE TABLE animals (\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\n     name CHAR(30) NOT NULL,\n     PRIMARY KEY (id)\n);\n\nINSERT INTO animals (name) VALUES\n    (\'dog\'),(\'cat\'),(\'penguin\'),\n    (\'lax\'),(\'whale\'),(\'ostrich\');\n\nSELECT * FROM animals;\n', 'https://dev.mysql.com/doc/refman/5.6/en/example-auto-increment.html');
INSERT INTO `help_topic` VALUES (3, 'HELP COMMAND', 3, 'Syntax:\nmysql> help search_string\n\nIf you provide an argument to the help command, mysql uses it as a\nsearch string to access server-side help from the contents of the MySQL\nReference Manual. The proper operation of this command requires that\nthe help tables in the mysql database be initialized with help topic\ninformation (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-side-help-support.html).\n\nIf there is no match for the search string, the search fails:\n\nmysql> help me\n\nNothing found\nPlease try to run \'help contents\' for a list of all accessible topics\n\nUse help contents to see a list of the help categories:\n\nmysql> help contents\nYou asked for help about help category: \"Contents\"\nFor more information, type \'help <item>\', where <item> is one of the\nfollowing categories:\n   Account Management\n   Administration\n   Data Definition\n   Data Manipulation\n   Data Types\n   Functions\n   Functions and Modifiers for Use with GROUP BY\n   Geographic Features\n   Language Structure\n   Plugins\n   Storage Engines\n   Stored Routines\n   Table Maintenance\n   Transactions\n   Triggers\n\nIf the search string matches multiple items, mysql shows a list of\nmatching topics:\n\nmysql> help logs\nMany help items for your request exist.\nTo make a more specific request, please type \'help <item>\',\nwhere <item> is one of the following topics:\n   SHOW\n   SHOW BINARY LOGS\n   SHOW ENGINE\n   SHOW LOGS\n\nUse a topic as the search string to see the help entry for that topic:\n\nmysql> help show binary logs\nName: \'SHOW BINARY LOGS\'\nDescription:\nSyntax:\nSHOW BINARY LOGS\nSHOW MASTER LOGS\n\nLists the binary log files on the server. This statement is used as\npart of the procedure described in [purge-binary-logs], that shows how\nto determine which logs can be purged.\n\nmysql> SHOW BINARY LOGS;\n+---------------+-----------+\n| Log_name      | File_size |\n+---------------+-----------+\n| binlog.000015 |    724935 |\n| binlog.000016 |    733481 |\n+---------------+-----------+\n\nThe search string can contain the wildcard characters % and _. These\nhave the same meaning as for pattern-matching operations performed with\nthe LIKE operator. For example, HELP rep% returns a list of topics that\nbegin with rep:\n\nmysql> HELP rep%\nMany help items for your request exist.\nTo make a more specific request, please type \'help <item>\',\nwhere <item> is one of the following\ntopics:\n   REPAIR TABLE\n   REPEAT FUNCTION\n   REPEAT LOOP\n   REPLACE\n   REPLACE FUNCTION\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mysql-server-side-help.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/mysql-server-side-help.html');
INSERT INTO `help_topic` VALUES (4, 'ASYMMETRIC_DECRYPT', 5, 'Syntax:\nasymmetric_decrypt(algorithm, crypt_str, key_str)\n\nDecrypts an encrypted string using the given algorithm and key string,\nand returns the resulting plaintext as a binary string. If decryption\nfails, the result is NULL.\n\nkey_str must be a valid key string in PEM format. For successful\ndecryption, it must be the public or private key string corresponding\nto the private or public key string used with asymmetric_encrypt() to\nproduce the encrypted string. algorithm indicates the encryption\nalgorithm used to create the key.\n\nSupported algorithm values: \'RSA\'\n\nFor a usage example, see the description of asymmetric_encrypt().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (5, 'ASYMMETRIC_DERIVE', 5, 'Syntax:\nasymmetric_derive(pub_key_str, priv_key_str)\n\nDerives a symmetric key using the private key of one party and the\npublic key of another, and returns the resulting key as a binary\nstring. If key derivation fails, the result is NULL.\n\npub_key_str and priv_key_str must be valid key strings in PEM format.\nThey must be created using the DH algorithm.\n\nSuppose that you have two pairs of public and private keys:\n\nSET @dhp = create_dh_parameters(1024);\nSET @priv1 = create_asymmetric_priv_key(\'DH\', @dhp);\nSET @pub1 = create_asymmetric_pub_key(\'DH\', @priv1);\nSET @priv2 = create_asymmetric_priv_key(\'DH\', @dhp);\nSET @pub2 = create_asymmetric_pub_key(\'DH\', @priv2);\n\nSuppose further that you use the private key from one pair and the\npublic key from the other pair to create a symmetric key string. Then\nthis symmetric key identity relationship holds:\n\nasymmetric_derive(@pub1, @priv2) = asymmetric_derive(@pub2, @priv1)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (10, 'CREATE_ASYMMETRIC_PUB_KEY', 5, 'Syntax:\ncreate_asymmetric_pub_key(algorithm, priv_key_str)\n\nDerives a public key from the given private key using the given\nalgorithm, and returns the key as a binary string in PEM format. If key\nderivation fails, the result is NULL.\n\npriv_key_str must be a valid key string in PEM format. algorithm\nindicates the encryption algorithm used to create the key.\n\nSupported algorithm values: \'RSA\', \'DSA\', \'DH\'\n\nFor a usage example, see the description of\ncreate_asymmetric_priv_key().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (12, 'CREATE_DIGEST', 5, 'Syntax:\ncreate_digest(digest_type, str)\n\nCreates a digest from the given string using the given digest type, and\nreturns the digest as a binary string. If digest generation fails, the\nresult is NULL.\n\nSupported digest_type values: \'SHA224\', \'SHA256\', \'SHA384\', \'SHA512\'\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', 'SET @dig = create_digest(\'SHA512\', The quick brown fox\');\n', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (14, 'FLUSH QUERY CACHE', 3, 'You can defragment the query cache to better utilize its memory with\nthe FLUSH QUERY CACHE statement. The statement does not remove any\nqueries from the cache.\n\nThe RESET QUERY CACHE statement removes all query results from the\nquery cache. The FLUSH TABLES statement also does this.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/query-cache-status-and-maintenance.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/query-cache-status-and-maintenance.html');
INSERT INTO `help_topic` VALUES (15, 'TRUE', 7, 'The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\nconstant names can be written in any lettercase.\n\nmysql> SELECT TRUE, true, FALSE, false;\n        -> 1, 1, 0, 0\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/boolean-literals.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/boolean-literals.html');
INSERT INTO `help_topic` VALUES (6, 'ASYMMETRIC_ENCRYPT', 5, 'Syntax:\nasymmetric_encrypt(algorithm, str, key_str)\n\nEncrypts a string using the given algorithm and key string, and returns\nthe resulting ciphertext as a binary string. If encryption fails, the\nresult is NULL.\n\nThe str length cannot be greater than the key_str length − 11, in\nbytes\n\nkey_str must be a valid key string in PEM format. algorithm indicates\nthe encryption algorithm used to create the key.\n\nSupported algorithm values: \'RSA\'\n\nTo encrypt a string, pass a private or public key string to\nasymmetric_encrypt(). To recover the original unencrypted string, pass\nthe encrypted string to asymmetric_decrypt(), along with the public or\nprivate key string correponding to the private or public key string\nused for encryption.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '-- Generate private/public key pair\nSET @priv = create_asymmetric_priv_key(\'RSA\', 1024);\nSET @pub = create_asymmetric_pub_key(\'RSA\', @priv);\n\n-- Encrypt using private key, decrypt using public key\nSET @ciphertext = asymmetric_encrypt(\'RSA\', \'The quick brown fox\', @priv);\nSET @plaintext = asymmetric_decrypt(\'RSA\', @ciphertext, @pub);\n\n-- Encrypt using public key, decrypt using private key\nSET @ciphertext = asymmetric_encrypt(\'RSA\', \'The quick brown fox\', @pub);\nSET @plaintext = asymmetric_decrypt(\'RSA\', @ciphertext, @priv);\n', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (7, 'ASYMMETRIC_SIGN', 5, 'Syntax:\nasymmetric_sign(algorithm, digest_str, priv_key_str, digest_type)\n\nSigns a digest string using a private key string, and returns the\nsignature as a binary string. If signing fails, the result is NULL.\n\ndigest_str is the digest string. It can be generated by calling\ncreate_digest(). digest_type indicates the digest algorithm used to\ngenerate the digest string.\n\npriv_key_str is the private key string to use for signing the digest\nstring. It must be a valid key string in PEM format. algorithm\nindicates the encryption algorithm used to create the key.\n\nSupported algorithm values: \'RSA\', \'DSA\'\n\nSupported digest_type values: \'SHA224\', \'SHA256\', \'SHA384\', \'SHA512\'\n\nFor a usage example, see the description of asymmetric_verify().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (8, 'ASYMMETRIC_VERIFY', 5, 'Syntax:\nasymmetric_verify(algorithm, digest_str, sig_str, pub_key_str,\ndigest_type)\n\nVerifies whether the signature string matches the digest string, and\nreturns 1 or 0 to indicate whether verification succeeded or failed.\n\ndigest_str is the digest string. It can be generated by calling\ncreate_digest(). digest_type indicates the digest algorithm used to\ngenerate the digest string.\n\nsig_str is the signature string. It can be generated by calling\nasymmetric_sign().\n\npub_key_str is the public key string of the signer. It corresponds to\nthe private key passed to asymmetric_sign() to generate the signature\nstring and must be a valid key string in PEM format. algorithm\nindicates the encryption algorithm used to create the key.\n\nSupported algorithm values: \'RSA\', \'DSA\'\n\nSupported digest_type values: \'SHA224\', \'SHA256\', \'SHA384\', \'SHA512\'\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', '-- Set the encryption algorithm and digest type\nSET @algo = \'RSA\';\nSET @dig_type = \'SHA224\';\n\n-- Create private/public key pair\nSET @priv = create_asymmetric_priv_key(@algo, 1024);\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\n\n-- Generate digest from string\nSET @dig = create_digest(@dig_type, \'The quick brown fox\');\n\n-- Generate signature for digest and verify signature against digest\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);\n', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (9, 'CREATE_ASYMMETRIC_PRIV_KEY', 5, 'Syntax:\ncreate_asymmetric_priv_key(algorithm, {key_len|dh_secret})\n\nCreates a private key using the given algorithm and key length or DH\nsecret, and returns the key as a binary string in PEM format. If key\ngeneration fails, the result is NULL.\n\nSupported algorithm values: \'RSA\', \'DSA\', \'DH\'\n\nSupported key_len values: The minimum key length in bits is 1,024. The\nmaximum key length depends on the algorithm: 16,384 for RSA and 10,000\nfor DSA. These key-length limits are constraints imposed by OpenSSL.\nServer administrators can impose additional limits on maximum key\nlength by setting environment variables. See\nhttps://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-usage.htm\nl.\n\nFor DH keys, pass a shared DH secret instead of a key length. To create\nthe secret, pass the key length to create_dh_parameters().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', 'SET @priv = create_asymmetric_priv_key(\'DSA\', 2048);\nSET @pub = create_asymmetric_pub_key(\'DSA\', @priv);\n', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (16, 'FALSE', 7, 'The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\nconstant names can be written in any lettercase.\n\nmysql> SELECT TRUE, true, FALSE, false;\n        -> 1, 1, 0, 0\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/boolean-literals.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/boolean-literals.html');
INSERT INTO `help_topic` VALUES (17, 'BIT', 2, 'BIT[(M)]\n\nA bit-value type. M indicates the number of bits per value, from 1 to\n64. The default is 1 if M is omitted.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (18, 'TINYINT', 2, 'TINYINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA very small integer. The signed range is -128 to 127. The unsigned\nrange is 0 to 255.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (20, 'SMALLINT', 2, 'SMALLINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA small integer. The signed range is -32768 to 32767. The unsigned\nrange is 0 to 65535.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (21, 'MEDIUMINT', 2, 'MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA medium-sized integer. The signed range is -8388608 to 8388607. The\nunsigned range is 0 to 16777215.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (22, 'INT', 2, 'INT[(M)] [UNSIGNED] [ZEROFILL]\n\nA normal-size integer. The signed range is -2147483648 to 2147483647.\nThe unsigned range is 0 to 4294967295.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (23, 'INTEGER', 2, 'INTEGER[(M)] [UNSIGNED] [ZEROFILL]\n\nThis type is a synonym for INT.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (24, 'BIGINT', 2, 'BIGINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to 18446744073709551615.\n\nSERIAL is an alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (11, 'CREATE_DH_PARAMETERS', 5, 'create_dh_parameters(key_len)\n\nCreates a shared secret for generating a DH private/public key pair and\nreturns a binary string that can be passed to\ncreate_asymmetric_priv_key(). If secret generation fails, the result is\nnull.\n\nSupported key_len values: The minimum and maximum key lengths in bits\nare 1,024 and 10,000. These key-length limits are constraints imposed\nby OpenSSL. Server administrators can impose additional limits on\nmaximum key length by setting environment variables. See\nhttps://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-usage.htm\nl.\n\nFor an example showing how to use the return value for generating\nsymmetric keys, see the description of asymmetric_derive().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html\n\n', 'SET @dhp = create_dh_parameters(1024);\n', 'https://dev.mysql.com/doc/refman/5.6/en/enterprise-encryption-functions.html');
INSERT INTO `help_topic` VALUES (13, 'PROCEDURE ANALYSE', 6, 'Syntax:\nANALYSE([max_elements[,max_memory]])\n\nANALYSE() examines the result from a query and returns an analysis of\nthe results that suggests optimal data types for each column that may\nhelp reduce table sizes. To obtain this analysis, append PROCEDURE\nANALYSE to the end of a SELECT statement:\n\nSELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max_elements,[max_memory]])\n\nFor example:\n\nSELECT col1, col2 FROM table1 PROCEDURE ANALYSE(10, 2000);\n\nThe results show some statistics for the values returned by the query,\nand propose an optimal data type for the columns. This can be helpful\nfor checking your existing tables, or after importing new data. You may\nneed to try different settings for the arguments so that PROCEDURE\nANALYSE() does not suggest the ENUM data type when it is not\nappropriate.\n\nThe arguments are optional and are used as follows:\n\no max_elements (default 256) is the maximum number of distinct values\n  that ANALYSE() notices per column. This is used by ANALYSE() to check\n  whether the optimal data type should be of type ENUM; if there are\n  more than max_elements distinct values, then ENUM is not a suggested\n  type.\n\no max_memory (default 8192) is the maximum amount of memory that\n  ANALYSE() should allocate per column while trying to find all\n  distinct values.\n\nA PROCEDURE clause is not permitted in a UNION statement.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/procedure-analyse.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/procedure-analyse.html');
INSERT INTO `help_topic` VALUES (19, 'BOOLEAN', 2, 'BOOL, BOOLEAN\n\nThese types are synonyms for TINYINT(1). A value of zero is considered\nfalse. Nonzero values are considered true:\n\nmysql> SELECT IF(0, \'true\', \'false\');\n+------------------------+\n| IF(0, \'true\', \'false\') |\n+------------------------+\n| false                  |\n+------------------------+\n\nmysql> SELECT IF(1, \'true\', \'false\');\n+------------------------+\n| IF(1, \'true\', \'false\') |\n+------------------------+\n| true                   |\n+------------------------+\n\nmysql> SELECT IF(2, \'true\', \'false\');\n+------------------------+\n| IF(2, \'true\', \'false\') |\n+------------------------+\n| true                   |\n+------------------------+\n\nHowever, the values TRUE and FALSE are merely aliases for 1 and 0,\nrespectively, as shown here:\n\nmysql> SELECT IF(0 = FALSE, \'true\', \'false\');\n+--------------------------------+\n| IF(0 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| true                           |\n+--------------------------------+\n\nmysql> SELECT IF(1 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(1 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT IF(2 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(2 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| false                         |\n+-------------------------------+\n\nmysql> SELECT IF(2 = FALSE, \'true\', \'false\');\n+--------------------------------+\n| IF(2 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| false                          |\n+--------------------------------+\n\nThe last two statements display the results shown because 2 is equal to\nneither 1 nor 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (25, 'DECIMAL', 2, 'DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nA packed \"exact\" fixed-point number. M is the total number of digits\n(the precision) and D is the number of digits after the decimal point\n(the scale). The decimal point and (for negative numbers) the - sign\nare not counted in M. If D is 0, values have no decimal point or\nfractional part. The maximum number of digits (M) for DECIMAL is 65.\nThe maximum number of supported decimals (D) is 30. If D is omitted,\nthe default is 0. If M is omitted, the default is 10. (There is also a\nlimit on how long the text of DECIMAL literals can be; see\nhttps://dev.mysql.com/doc/refman/5.6/en/precision-math-expressions.html\n.)\n\nUNSIGNED, if specified, disallows negative values.\n\nAll basic calculations (+, -, *, /) with DECIMAL columns are done with\na precision of 65 digits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (26, 'DEC', 2, 'DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED]\n[ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nThese types are synonyms for DECIMAL. The FIXED synonym is available\nfor compatibility with other database systems.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (29, 'DOUBLE PRECISION', 2, 'DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED]\n[ZEROFILL]\n\nThese types are synonyms for DOUBLE. Exception: If the REAL_AS_FLOAT\nSQL mode is enabled, REAL is a synonym for FLOAT rather than DOUBLE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (30, 'DATE', 2, 'DATE\n\nA date. The supported range is \'1000-01-01\' to \'9999-12-31\'. MySQL\ndisplays DATE values in \'YYYY-MM-DD\' format, but permits assignment of\nvalues to DATE columns using either strings or numbers.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html');
INSERT INTO `help_topic` VALUES (33, 'TIME', 2, 'TIME[(fsp)]\n\nA time. The range is \'-838:59:59.000000\' to \'838:59:59.000000\'. MySQL\ndisplays TIME values in \'hh:mm:ss[.fraction]\' format, but permits\nassignment of values to TIME columns using either strings or numbers.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html');
INSERT INTO `help_topic` VALUES (35, 'CHAR', 2, '[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA fixed-length string that is always right-padded with spaces to the\nspecified length when stored. M represents the column length in\ncharacters. The range of M is 0 to 255. If M is omitted, the length is\n1.\n\n*Note*:\n\nTrailing spaces are removed when CHAR values are retrieved unless the\nPAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (27, 'FLOAT', 2, 'FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA small (single-precision) floating-point number. Permissible values\nare -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to\n3.402823466E+38. These are the theoretical limits, based on the IEEE\nstandard. The actual range might be slightly smaller depending on your\nhardware or operating system.\n\nM is the total number of digits and D is the number of digits following\nthe decimal point. If M and D are omitted, values are stored to the\nlimits permitted by the hardware. A single-precision floating-point\nnumber is accurate to approximately 7 decimal places.\n\nFLOAT(M,D) is a nonstandard MySQL extension.\n\nUNSIGNED, if specified, disallows negative values.\n\nUsing FLOAT might give you some unexpected problems because all\ncalculations in MySQL are done with double precision. See\nhttps://dev.mysql.com/doc/refman/5.6/en/no-matching-rows.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (28, 'DOUBLE', 2, 'DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA normal-size (double-precision) floating-point number. Permissible\nvalues are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and\n2.2250738585072014E-308 to 1.7976931348623157E+308. These are the\ntheoretical limits, based on the IEEE standard. The actual range might\nbe slightly smaller depending on your hardware or operating system.\n\nM is the total number of digits and D is the number of digits following\nthe decimal point. If M and D are omitted, values are stored to the\nlimits permitted by the hardware. A double-precision floating-point\nnumber is accurate to approximately 15 decimal places.\n\nDOUBLE(M,D) is a nonstandard MySQL extension.\n\nUNSIGNED, if specified, disallows negative values.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/numeric-type-syntax.html');
INSERT INTO `help_topic` VALUES (31, 'DATETIME', 2, 'DATETIME[(fsp)]\n\nA date and time combination. The supported range is \'1000-01-01\n00:00:00.000000\' to \'9999-12-31 23:59:59.999999\'. MySQL displays\nDATETIME values in \'YYYY-MM-DD hh:mm:ss[.fraction]\' format, but permits\nassignment of values to DATETIME columns using either strings or\nnumbers.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nAutomatic initialization and updating to the current date and time for\nDATETIME columns can be specified using DEFAULT and ON UPDATE column\ndefinition clauses, as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/timestamp-initialization.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html');
INSERT INTO `help_topic` VALUES (32, 'TIMESTAMP', 2, 'TIMESTAMP[(fsp)]\n\nA timestamp. The range is \'1970-01-01 00:00:01.000000\' UTC to\n\'2038-01-19 03:14:07.999999\' UTC. TIMESTAMP values are stored as the\nnumber of seconds since the epoch (\'1970-01-01 00:00:00\' UTC). A\nTIMESTAMP cannot represent the value \'1970-01-01 00:00:00\' because that\nis equivalent to 0 seconds from the epoch and the value 0 is reserved\nfor representing \'0000-00-00 00:00:00\', the \"zero\" TIMESTAMP value.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nThe way the server handles TIMESTAMP definitions depends on the value\nof the explicit_defaults_for_timestamp system variable (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html).\n\nIf explicit_defaults_for_timestamp is enabled, there is no automatic\nassignment of the DEFAULT CURRENT_TIMESTAMP or ON UPDATE\nCURRENT_TIMESTAMP attributes to any TIMESTAMP column. They must be\nincluded explicitly in the column definition. Also, any TIMESTAMP not\nexplicitly declared as NOT NULL permits NULL values.\n\nIf explicit_defaults_for_timestamp is disabled, the server handles\nTIMESTAMP as follows:\n\nUnless specified otherwise, the first TIMESTAMP column in a table is\ndefined to be automatically set to the date and time of the most recent\nmodification if not explicitly assigned a value. This makes TIMESTAMP\nuseful for recording the timestamp of an INSERT or UPDATE operation.\nYou can also set any TIMESTAMP column to the current date and time by\nassigning it a NULL value, unless it has been defined with the NULL\nattribute to permit NULL values.\n\nAutomatic initialization and updating to the current date and time can\nbe specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE\nCURRENT_TIMESTAMP column definition clauses. By default, the first\nTIMESTAMP column has these properties, as previously noted. However,\nany TIMESTAMP column in a table can be defined to have these\nproperties.\n\nexplicit_defaults_for_timestamp is available as of MySQL 5.6.6. Before\n5.6.6, the server handles TIMESTAMP as discussed for\nexplicit_defaults_for_timestamp disabled. Those behaviors, while they\nremain the default, are nonstandard and are deprecated as of 5.6.6. For\ndiscussion regarding upgrading to an installation with\nexplicit_defaults_for_timestamp enabled, see\nhttps://dev.mysql.com/doc/refman/5.6/en/upgrading-from-previous-series.\nhtml.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html');
INSERT INTO `help_topic` VALUES (36, 'CHAR BYTE', 2, 'The CHAR BYTE data type is an alias for the BINARY data type. This is a\ncompatibility feature.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (38, 'BINARY', 2, 'BINARY[(M)]\n\nThe BINARY type is similar to the CHAR type, but stores binary byte\nstrings rather than nonbinary character strings. An optional length M\nrepresents the column length in bytes. If omitted, M defaults to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (39, 'VARBINARY', 2, 'VARBINARY(M)\n\nThe VARBINARY type is similar to the VARCHAR type, but stores binary\nbyte strings rather than nonbinary character strings. M represents the\nmaximum column length in bytes.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (40, 'TINYBLOB', 2, 'TINYBLOB\n\nA BLOB column with a maximum length of 255 (28 − 1) bytes. Each\nTINYBLOB value is stored using a 1-byte length prefix that indicates\nthe number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (41, 'TINYTEXT', 2, 'TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 255 (28 − 1) characters. The\neffective maximum length is less if the value contains multibyte\ncharacters. Each TINYTEXT value is stored using a 1-byte length prefix\nthat indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (42, 'BLOB', 2, 'BLOB[(M)]\n\nA BLOB column with a maximum length of 65,535 (216 − 1) bytes. Each\nBLOB value is stored using a 2-byte length prefix that indicates the\nnumber of bytes in the value.\n\nAn optional length M can be given for this type. If this is done, MySQL\ncreates the column as the smallest BLOB type large enough to hold\nvalues M bytes long.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (34, 'YEAR DATA TYPE', 2, 'YEAR[(2|4)]\n\nA year in 2-digit or 4-digit format. The default is 4-digit format.\nYEAR(2) or YEAR(4) differ in display format, but have the same range of\nvalues. In 4-digit format, values display as 1901 to 2155, or 0000. In\n2-digit format, values display as 70 to 69, representing years from\n1970 to 2069. MySQL displays YEAR values in YYYY or YY format, but\npermits assignment of values to YEAR columns using either strings or\nnumbers.\n\n*Note*:\n\nThe 2-digit YEAR(2) data type has certain issues that you should\nconsider before choosing to use it. As of MySQL 5.6.6, YEAR(2) is\ndeprecated: 2-digit YEAR(2) columns in existing tables are treated as\nbefore, but 2-digit YEAR(2) columns in new or altered tables are\nconverted to 4-digit YEAR columns. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/migrating-from-year2.html.\n\nFor additional information about YEAR display format and interpretation\nof input values, see https://dev.mysql.com/doc/refman/5.6/en/year.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-type-syntax.html');
INSERT INTO `help_topic` VALUES (37, 'VARCHAR', 2, '[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA variable-length string. M represents the maximum column length in\ncharacters. The range of M is 0 to 65,535. The effective maximum length\nof a VARCHAR is subject to the maximum row size (65,535 bytes, which is\nshared among all columns) and the character set used. For example, utf8\ncharacters can require up to three bytes per character, so a VARCHAR\ncolumn that uses the utf8 character set can be declared to be a maximum\nof 21,844 characters. See\nhttps://dev.mysql.com/doc/refman/5.6/en/column-count-limit.html.\n\nMySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus\ndata. The length prefix indicates the number of bytes in the value. A\nVARCHAR column uses one length byte if values require no more than 255\nbytes, two length bytes if values may require more than 255 bytes.\n\n*Note*:\n\nMySQL follows the standard SQL specification, and does not remove\ntrailing spaces from VARCHAR values.\n\nVARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the\nstandard SQL way to define that a VARCHAR column should use some\npredefined character set. MySQL uses utf8 as this predefined character\nset. https://dev.mysql.com/doc/refman/5.6/en/charset-national.html.\nNVARCHAR is shorthand for NATIONAL VARCHAR.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (43, 'TEXT', 2, 'TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 65,535 (216 − 1) characters.\nThe effective maximum length is less if the value contains multibyte\ncharacters. Each TEXT value is stored using a 2-byte length prefix that\nindicates the number of bytes in the value.\n\nAn optional length M can be given for this type. If this is done, MySQL\ncreates the column as the smallest TEXT type large enough to hold\nvalues M characters long.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (44, 'MEDIUMBLOB', 2, 'MEDIUMBLOB\n\nA BLOB column with a maximum length of 16,777,215 (224 − 1) bytes.\nEach MEDIUMBLOB value is stored using a 3-byte length prefix that\nindicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (45, 'MEDIUMTEXT', 2, 'MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 16,777,215 (224 − 1)\ncharacters. The effective maximum length is less if the value contains\nmultibyte characters. Each MEDIUMTEXT value is stored using a 3-byte\nlength prefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (46, 'LONGBLOB', 2, 'LONGBLOB\n\nA BLOB column with a maximum length of 4,294,967,295 or 4GB (232 − 1)\nbytes. The effective maximum length of LONGBLOB columns depends on the\nconfigured maximum packet size in the client/server protocol and\navailable memory. Each LONGBLOB value is stored using a 4-byte length\nprefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (47, 'LONGTEXT', 2, 'LONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 4,294,967,295 or 4GB (232 − 1)\ncharacters. The effective maximum length is less if the value contains\nmultibyte characters. The effective maximum length of LONGTEXT columns\nalso depends on the configured maximum packet size in the client/server\nprotocol and available memory. Each LONGTEXT value is stored using a\n4-byte length prefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (48, 'ENUM', 2, 'ENUM(\'value1\',\'value2\',...) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nAn enumeration. A string object that can have only one value, chosen\nfrom the list of values \'value1\', \'value2\', ..., NULL or the special \'\'\nerror value. ENUM values are represented internally as integers.\n\nAn ENUM column can have a maximum of 65,535 distinct elements. (The\npractical limit is less than 3000.) A table can have no more than 255\nunique element list definitions among its ENUM and SET columns\nconsidered as a group. For more information on these limits, see\nhttps://dev.mysql.com/doc/refman/5.6/en/create-table-files.html#limits-\nfrm-file.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (49, 'SET DATA TYPE', 2, 'SET(\'value1\',\'value2\',...) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA set. A string object that can have zero or more values, each of which\nmust be chosen from the list of values \'value1\', \'value2\', ... SET\nvalues are represented internally as integers.\n\nA SET column can have a maximum of 64 distinct members. A table can\nhave no more than 255 unique element list definitions among its ENUM\nand SET columns considered as a group. For more information on this\nlimit, see\nhttps://dev.mysql.com/doc/refman/5.6/en/create-table-files.html#limits-\nfrm-file.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-type-syntax.html');
INSERT INTO `help_topic` VALUES (50, 'BLOB DATA TYPE', 2, 'A BLOB is a binary large object that can hold a variable amount of\ndata. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB.\nThese differ only in the maximum length of the values they can hold.\nThe four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These\ncorrespond to the four BLOB types and have the same maximum lengths and\nstorage requirements. See\nhttps://dev.mysql.com/doc/refman/5.6/en/storage-requirements.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/blob.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/blob.html');
INSERT INTO `help_topic` VALUES (51, 'GEOMETRY HIERARCHY', 8, 'Geometry is the base class. It is an abstract class. The instantiable\nsubclasses of Geometry are restricted to zero-, one-, and\ntwo-dimensional geometric objects that exist in two-dimensional\ncoordinate space. All instantiable geometry classes are defined so that\nvalid instances of a geometry class are topologically closed (that is,\nall defined geometries include their boundary).\n\nThe base Geometry class has subclasses for Point, Curve, Surface, and\nGeometryCollection:\n\no Point represents zero-dimensional objects.\n\no Curve represents one-dimensional objects, and has subclass\n  LineString, with sub-subclasses Line and LinearRing.\n\no Surface is designed for two-dimensional objects and has subclass\n  Polygon.\n\no GeometryCollection has specialized zero-, one-, and two-dimensional\n  collection classes named MultiPoint, MultiLineString, and\n  MultiPolygon for modeling geometries corresponding to collections of\n  Points, LineStrings, and Polygons, respectively. MultiCurve and\n  MultiSurface are introduced as abstract superclasses that generalize\n  the collection interfaces to handle Curves and Surfaces.\n\nGeometry, Curve, Surface, MultiCurve, and MultiSurface are defined as\nnoninstantiable classes. They define a common set of methods for their\nsubclasses and are included for extensibility.\n\nPoint, LineString, Polygon, GeometryCollection, MultiPoint,\nMultiLineString, and MultiPolygon are instantiable classes.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-geometry-class-hierarchy.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-geometry-class-hierarchy.html');
INSERT INTO `help_topic` VALUES (52, 'MBR DEFINITION', 9, 'Its MBR (minimum bounding rectangle), or envelope. This is the bounding\ngeometry, formed by the minimum and maximum (X,Y) coordinates:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-class-geometry.html\n\n', '((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-class-geometry.html');
INSERT INTO `help_topic` VALUES (53, 'WKT DEFINITION', 10, 'The Well-Known Text (WKT) representation of geometry values is designed\nfor exchanging geometry data in ASCII form. The OpenGIS specification\nprovides a Backus-Naur grammar that specifies the formal production\nrules for writing WKT values (see\nhttps://dev.mysql.com/doc/refman/5.6/en/spatial-types.html).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-data-formats.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-data-formats.html');
INSERT INTO `help_topic` VALUES (54, 'SPATIAL COLUMNS', 8, 'MySQL provides a standard way of creating spatial columns for geometry\ntypes, for example, with CREATE TABLE or ALTER TABLE. Spatial columns\nare supported for MyISAM, InnoDB, NDB, and ARCHIVE tables. See also the\nnotes about spatial indexes under [HELP SPATIAL indexes].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/creating-spatial-columns.html\n\n', 'CREATE TABLE geom (g GEOMETRY);\n', 'https://dev.mysql.com/doc/refman/5.6/en/creating-spatial-columns.html');
INSERT INTO `help_topic` VALUES (55, 'SPATIAL INDEXES', 8, 'For MyISAM tables, MySQL can create spatial indexes using syntax\nsimilar to that for creating regular indexes, but using the SPATIAL\nkeyword. Columns in spatial indexes must be declared NOT NULL. The\nfollowing examples demonstrate how to create spatial indexes:\n\no With CREATE TABLE:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL, SPATIAL INDEX(g)) ENGINE=MyISAM;\n\no With ALTER TABLE:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL) ENGINE=MyISAM;\nALTER TABLE geom ADD SPATIAL INDEX(g);\n\no With CREATE INDEX:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL) ENGINE=MyISAM;\nCREATE SPATIAL INDEX g ON geom (g);\n\nSPATIAL INDEX creates an R-tree index. For storage engines that support\nnonspatial indexing of spatial columns, the engine creates a B-tree\nindex. A B-tree index on spatial values is useful for exact-value\nlookups, but not for range scans.\n\nFor more information on indexing spatial columns, see [HELP CREATE\nINDEX].\n\nTo drop spatial indexes, use ALTER TABLE or DROP INDEX:\n\no With ALTER TABLE:\n\nALTER TABLE geom DROP INDEX g;\n\no With DROP INDEX:\n\nDROP INDEX g ON geom;\n\nExample: Suppose that a table geom contains more than 32,000\ngeometries, which are stored in the column g of type GEOMETRY. The\ntable also has an AUTO_INCREMENT column fid for storing object ID\nvalues.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/creating-spatial-indexes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/creating-spatial-indexes.html');
INSERT INTO `help_topic` VALUES (56, '=', 11, '=\n\nEqual:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 = 0;\n        -> 0\nmysql> SELECT \'0\' = 0;\n        -> 1\nmysql> SELECT \'0.0\' = 0;\n        -> 1\nmysql> SELECT \'0.01\' = 0;\n        -> 0\nmysql> SELECT \'.01\' = 0.01;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (57, '<=>', 11, 'Syntax:\n<=>\n\nNULL-safe equal. This operator performs an equality comparison like the\n= operator, but returns 1 rather than NULL if both operands are NULL,\nand 0 rather than NULL if one operand is NULL.\n\nThe <=> operator is equivalent to the standard SQL IS NOT DISTINCT FROM\noperator.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (58, '!=', 11, 'Syntax:\n<>, !=\n\nNot equal:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT \'.01\' <> \'0.01\';\n        -> 1\nmysql> SELECT .01 <> \'0.01\';\n        -> 0\nmysql> SELECT \'zapp\' <> \'zappp\';\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (59, '<=', 11, 'Syntax:\n<=\n\nLess than or equal:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 0.1 <= 2;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (60, '<', 11, 'Syntax:\n<\n\nLess than:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 2 < 2;\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (61, '>=', 11, 'Syntax:\n>=\n\nGreater than or equal:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 2 >= 2;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (62, '>', 11, 'Syntax:\n>\n\nGreater than:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 2 > 2;\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (64, 'NOT BETWEEN', 11, 'Syntax:\nexpr NOT BETWEEN min AND max\n\nThis is the same as NOT (expr BETWEEN min AND max).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (65, 'COALESCE', 11, 'Syntax:\nCOALESCE(value,...)\n\nReturns the first non-NULL value in the list, or NULL if there are no\nnon-NULL values.\n\nThe return type of COALESCE() is the aggregated type of the argument\ntypes.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (66, 'GREATEST', 11, 'Syntax:\nGREATEST(value1,value2,...)\n\nWith two or more arguments, returns the largest (maximum-valued)\nargument. The arguments are compared using the same rules as for\nLEAST().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST(\'B\',\'A\',\'C\');\n        -> \'C\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (63, 'BETWEEN AND', 11, 'Syntax:\nexpr BETWEEN min AND max\n\nIf expr is greater than or equal to min and expr is less than or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is equivalent\nto the expression (min <= expr AND expr <= max) if all the arguments\nare of the same type. Otherwise type conversion takes place according\nto the rules described in\nhttps://dev.mysql.com/doc/refman/5.6/en/type-conversion.html, but\napplied to all the three arguments.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT \'b\' BETWEEN \'a\' AND \'c\';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND \'3\';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND \'x-3\';\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (67, 'IN', 11, 'Syntax:\nexpr IN (value,...)\n\nReturns 1 (true) if expr is equal to any of the values in the IN()\nlist, else returns 0 (false).\n\nType conversion takes place according to the rules described in\nhttps://dev.mysql.com/doc/refman/5.6/en/type-conversion.html, applied\nto all the arguments. If no type conversion is needed for the values in\nthe IN() list, they are all constants of the same type, and expr can be\ncompared to each of them as a value of the same type (possibly after\ntype conversion), an optimization takes place. The values the list are\nsorted and the search for expr is done using a binary search, which\nmakes the IN() operation very quick.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT \'wefwf\' IN (\'wee\',\'wefwf\',\'weg\');\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (68, 'NOT IN', 11, 'Syntax:\nexpr NOT IN (value,...)\n\nThis is the same as NOT (expr IN (value,...)).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (69, 'INTERVAL', 11, 'Syntax:\nINTERVAL(N,N1,N2,N3,...)\n\nReturns 0 if N < N1, 1 if N < N2 and so on or -1 if N is NULL. All\narguments are treated as integers. It is required that N1 < N2 < N3 <\n... < Nn for this function to work correctly. This is because a binary\nsearch is used (very fast).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (70, 'IS', 11, 'Syntax:\nIS boolean_value\n\nTests a value against a boolean value, where boolean_value can be TRUE,\nFALSE, or UNKNOWN.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (71, 'IS NOT', 11, 'Syntax:\nIS NOT boolean_value\n\nTests a value against a boolean value, where boolean_value can be TRUE,\nFALSE, or UNKNOWN.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (72, 'IS NULL', 11, 'Syntax:\nIS NULL\n\nTests whether a value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (73, 'IS NOT NULL', 11, 'Syntax:\nIS NOT NULL\n\nTests whether a value is not NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (74, 'ISNULL', 11, 'Syntax:\nISNULL(expr)\n\nIf expr is NULL, ISNULL() returns 1, otherwise it returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (75, 'LEAST', 11, 'Syntax:\nLEAST(value1,value2,...)\n\nWith two or more arguments, returns the smallest (minimum-valued)\nargument. The arguments are compared using the following rules:\n\no If any argument is NULL, the result is NULL. No comparison is needed.\n\no If all arguments are integer-valued, they are compared as integers.\n\no If at least one argument is double precision, they are compared as\n  double-precision values. Otherwise, if at least one argument is a\n  DECIMAL value, they are compared as DECIMAL values.\n\no If the arguments comprise a mix of numbers and strings, they are\n  compared as numbers.\n\no If any argument is a nonbinary (character) string, the arguments are\n  compared as nonbinary strings.\n\no In all other cases, the arguments are compared as binary strings.\n\nThe return type of LEAST() is the aggregated type of the comparison\nargument types.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html\n\n', 'mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST(\'B\',\'A\',\'C\');\n        -> \'A\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/comparison-operators.html');
INSERT INTO `help_topic` VALUES (76, '!', 12, 'Syntax:\nNOT, !\n\nLogical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand is\nnonzero, and NOT NULL returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html\n\n', 'mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html');
INSERT INTO `help_topic` VALUES (77, 'AND', 12, 'Syntax:\nAND, &&\n\nLogical AND. Evaluates to 1 if all operands are nonzero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html\n\n', 'mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html');
INSERT INTO `help_topic` VALUES (78, 'OR', 12, 'Syntax:\nOR, ||\n\nLogical OR. When both operands are non-NULL, the result is 1 if any\noperand is nonzero, and 0 otherwise. With a NULL operand, the result is\n1 if the other operand is nonzero, and NULL otherwise. If both operands\nare NULL, the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html\n\n', 'mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html');
INSERT INTO `help_topic` VALUES (79, 'XOR', 12, 'Syntax:\nXOR\n\nLogical XOR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is nonzero,\notherwise 0 is returned.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html\n\n', 'mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/logical-operators.html');
INSERT INTO `help_topic` VALUES (80, 'ASSIGN-VALUE', 12, 'Syntax:\n:=\n\nAssignment operator. Causes the user variable on the left hand side of\nthe operator to take on the value to its right. The value on the right\nhand side may be a literal value, another variable storing a value, or\nany legal expression that yields a scalar value, including the result\nof a query (provided that this value is a scalar value). You can\nperform multiple assignments in the same SET statement. You can perform\nmultiple assignments in the same statement.\n\nUnlike =, the := operator is never interpreted as a comparison\noperator. This means you can use := in any valid SQL statement (not\njust in SET statements) to assign a value to a variable.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/assignment-operators.html\n\n', 'mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4\n', 'https://dev.mysql.com/doc/refman/5.6/en/assignment-operators.html');
INSERT INTO `help_topic` VALUES (81, 'ASSIGN-EQUAL', 12, 'Syntax:\n=\n\nThis operator is used to perform value assignments in two cases,\ndescribed in the next two paragraphs.\n\nWithin a SET statement, = is treated as an assignment operator that\ncauses the user variable on the left hand side of the operator to take\non the value to its right. (In other words, when used in a SET\nstatement, = is treated identically to :=.) The value on the right hand\nside may be a literal value, another variable storing a value, or any\nlegal expression that yields a scalar value, including the result of a\nquery (provided that this value is a scalar value). You can perform\nmultiple assignments in the same SET statement.\n\nIn the SET clause of an UPDATE statement, = also acts as an assignment\noperator; in this case, however, it causes the column named on the left\nhand side of the operator to assume the value given to the right,\nprovided any WHERE conditions that are part of the UPDATE are met. You\ncan make multiple assignments in the same SET clause of an UPDATE\nstatement.\n\nIn any other context, = is treated as a comparison operator.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/assignment-operators.html\n\n', 'mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/assignment-operators.html');
INSERT INTO `help_topic` VALUES (82, 'CASE OPERATOR', 13, 'Syntax:\nCASE value WHEN compare_value THEN result [WHEN compare_value THEN\nresult ...] [ELSE result] END\n\nCASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE\nresult] END\n\nThe first CASE syntax returns the result for the first\nvalue=compare_value comparison that is true. The second syntax returns\nthe result for the first condition that is true. If no comparison or\ncondition is true, the result after ELSE is returned, or NULL if there\nis no ELSE part.\n\n*Note*:\n\nThe syntax of the CASE operator described here differs slightly from\nthat of the SQL CASE statement described in [HELP CASE statement], for\nuse inside stored programs. The CASE statement cannot have an ELSE NULL\nclause, and it is terminated with END CASE instead of END.\n\nThe return type of a CASE expression result is the aggregated type of\nall result values.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html\n\n', 'mysql> SELECT CASE 1 WHEN 1 THEN \'one\'\n    ->     WHEN 2 THEN \'two\' ELSE \'more\' END;\n        -> \'one\'\nmysql> SELECT CASE WHEN 1>0 THEN \'true\' ELSE \'false\' END;\n        -> \'true\'\nmysql> SELECT CASE BINARY \'B\'\n    ->     WHEN \'a\' THEN 1 WHEN \'b\' THEN 2 END;\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html');
INSERT INTO `help_topic` VALUES (83, 'IF FUNCTION', 13, 'Syntax:\nIF(expr1,expr2,expr3)\n\nIf expr1 is TRUE (expr1 <> 0 and expr1 <> NULL), IF() returns expr2.\nOtherwise, it returns expr3.\n\n*Note*:\n\nThere is also an IF statement, which differs from the IF() function\ndescribed here. See [HELP IF statement].\n\nIf only one of expr2 or expr3 is explicitly NULL, the result type of\nthe IF() function is the type of the non-NULL expression.\n\nThe default return type of IF() (which may matter when it is stored\ninto a temporary table) is calculated as follows:\n\no If expr2 or expr3 produce a string, the result is a string.\n\n  If expr2 and expr3 are both strings, the result is case-sensitive if\n  either string is case-sensitive.\n\no If expr2 or expr3 produce a floating-point value, the result is a\n  floating-point value.\n\no If expr2 or expr3 produce an integer, the result is an integer.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html\n\n', 'mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,\'yes\',\'no\');\n        -> \'yes\'\nmysql> SELECT IF(STRCMP(\'test\',\'test1\'),\'no\',\'yes\');\n        -> \'no\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html');
INSERT INTO `help_topic` VALUES (84, 'IFNULL', 13, 'Syntax:\nIFNULL(expr1,expr2)\n\nIf expr1 is not NULL, IFNULL() returns expr1; otherwise it returns\nexpr2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html\n\n', 'mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,\'yes\');\n        -> \'yes\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html');
INSERT INTO `help_topic` VALUES (85, 'NULLIF', 13, 'Syntax:\nNULLIF(expr1,expr2)\n\nReturns NULL if expr1 = expr2 is true, otherwise returns expr1. This is\nthe same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END.\n\nThe return value has the same type as the first argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html\n\n', 'mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html');
INSERT INTO `help_topic` VALUES (86, '+', 14, 'Syntax:\n+\n\nAddition:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT 3+5;\n        -> 8\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (87, '- BINARY', 14, 'Syntax:\n-\n\nSubtraction:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT 3-5;\n        -> -2\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (88, '- UNARY', 14, 'Syntax:\n-\n\nUnary minus. This operator changes the sign of the operand.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT - 2;\n        -> -2\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (89, '*', 14, 'Syntax:\n*\n\nMultiplication:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT 3*5;\n        -> 15\nmysql> SELECT 18014398509481984*18014398509481984.0;\n        -> 324518553658426726783156020576256.0\nmysql> SELECT 18014398509481984*18014398509481984;\n        -> out-of-range error\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (90, '/', 14, 'Syntax:\n/\n\nDivision:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT 3/5;\n        -> 0.60\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (91, 'DIV', 14, 'Syntax:\nDIV\n\nInteger division. Discards from the division result any fractional part\nto the right of the decimal point.\n\nIf either operand has a noninteger type, the operands are converted to\nDECIMAL and divided using DECIMAL arithmetic before converting the\nresult to BIGINT. If the result exceeds BIGINT range, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', 'mysql> SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;\n        -> 2, -2, -2, 2\n', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (92, '%', 14, 'Syntax:\nN % M, N MOD M\n\nModulo operation. Returns the remainder of N divided by M. For more\ninformation, see the description for the MOD() function in\nhttps://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/arithmetic-functions.html');
INSERT INTO `help_topic` VALUES (93, 'ABS', 14, 'Syntax:\nABS(X)\n\nReturns the absolute value of X, or NULL if X is NULL.\n\nThe result type is derived from the argument type. An implication of\nthis is that ABS(-9223372036854775808) produces an error because the\nresult cannot be stored in a signed BIGINT value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (94, 'ACOS', 14, 'Syntax:\nACOS(X)\n\nReturns the arc cosine of X, that is, the value whose cosine is X.\nReturns NULL if X is not in the range -1 to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (95, 'ASIN', 14, 'Syntax:\nASIN(X)\n\nReturns the arc sine of X, that is, the value whose sine is X. Returns\nNULL if X is not in the range -1 to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN(\'foo\');\n\n+-------------+\n| ASIN(\'foo\') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: \'foo\' |\n+---------+------+-----------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (96, 'ATAN', 14, 'Syntax:\nATAN(X)\n\nReturns the arc tangent of X, that is, the value whose tangent is X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (97, 'ATAN2', 14, 'Syntax:\nATAN(Y,X), ATAN2(Y,X)\n\nReturns the arc tangent of the two variables X and Y. It is similar to\ncalculating the arc tangent of Y / X, except that the signs of both\narguments are used to determine the quadrant of the result.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (98, 'CEIL', 14, 'Syntax:\nCEIL(X)\n\nCEIL() is a synonym for CEILING().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (99, 'CEILING', 14, 'Syntax:\nCEILING(X)\n\nReturns the smallest integer value not less than X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (100, 'CONV', 14, 'Syntax:\nCONV(N,from_base,to_base)\n\nConverts numbers between different number bases. Returns a string\nrepresentation of the number N, converted from base from_base to base\nto_base. Returns NULL if any argument is NULL. The argument N is\ninterpreted as an integer, but may be specified as an integer or a\nstring. The minimum base is 2 and the maximum base is 36. If from_base\nis a negative number, N is regarded as a signed number. Otherwise, N is\ntreated as unsigned. CONV() works with 64-bit precision.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT CONV(\'a\',16,2);\n        -> \'1010\'\nmysql> SELECT CONV(\'6E\',18,8);\n        -> \'172\'\nmysql> SELECT CONV(-17,10,-18);\n        -> \'-H\'\nmysql> SELECT CONV(10+\'10\'+\'10\'+X\'0a\',10,10);\n        -> \'40\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (101, 'COS', 14, 'Syntax:\nCOS(X)\n\nReturns the cosine of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT COS(PI());\n        -> -1\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (102, 'COT', 14, 'Syntax:\nCOT(X)\n\nReturns the cotangent of X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (103, 'CRC32', 14, 'Syntax:\nCRC32(expr)\n\nComputes a cyclic redundancy check value and returns a 32-bit unsigned\nvalue. The result is NULL if the argument is NULL. The argument is\nexpected to be a string and (if possible) is treated as one if it is\nnot.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT CRC32(\'MySQL\');\n        -> 3259397556\nmysql> SELECT CRC32(\'mysql\');\n        -> 2501908538\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (104, 'DEGREES', 14, 'Syntax:\nDEGREES(X)\n\nReturns the argument X, converted from radians to degrees.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (105, 'EXP', 14, 'Syntax:\nEXP(X)\n\nReturns the value of e (the base of natural logarithms) raised to the\npower of X. The inverse of this function is LOG() (using a single\nargument only) or LN().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (106, 'FLOOR', 14, 'Syntax:\nFLOOR(X)\n\nReturns the largest integer value not greater than X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (107, 'LN', 14, 'Syntax:\nLN(X)\n\nReturns the natural logarithm of X; that is, the base-e logarithm of X.\nIf X is less than or equal to 0, then NULL is returned.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (108, 'LOG', 14, 'Syntax:\nLOG(X), LOG(B,X)\n\nIf called with one parameter, this function returns the natural\nlogarithm of X. If X is less than or equal to 0, then NULL is returned.\n\nThe inverse of this function (when called with a single argument) is\nthe EXP() function.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (109, 'LOG2', 14, 'Syntax:\nLOG2(X)\n\nReturns the base-2 logarithm of X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (110, 'LOG10', 14, 'Syntax:\nLOG10(X)\n\nReturns the base-10 logarithm of X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (111, 'MOD', 14, 'Syntax:\nMOD(N,M), N % M, N MOD M\n\nModulo operation. Returns the remainder of N divided by M.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (112, 'PI', 14, 'Syntax:\nPI()\n\nReturns the value of π (pi). The default number of decimal places\ndisplayed is seven, but MySQL uses the full double-precision value\ninternally.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793116\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (113, 'POW', 14, 'Syntax:\nPOW(X,Y)\n\nReturns the value of X raised to the power of Y.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (114, 'POWER', 14, 'Syntax:\nPOWER(X,Y)\n\nThis is a synonym for POW().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (115, 'RADIANS', 14, 'Syntax:\nRADIANS(X)\n\nReturns the argument X, converted from degrees to radians.\n\n*Note*:\n\nπ radians equals 180 degrees.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT RADIANS(90);\n        -> 1.5707963267949\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (116, 'RAND', 14, 'Syntax:\nRAND([N])\n\nReturns a random floating-point value v in the range 0 <= v < 1.0. To\nobtain a random integer R in the range i <= R < j, use the expression\nFLOOR(i + RAND() * (j − i)). For example, to obtain a random integer\nin the range the range 7 <= R < 12, use the following statement:\n\nSELECT FLOOR(7 + (RAND() * 5));\n\nIf an integer argument N is specified, it is used as the seed value:\n\no With a constant initializer argument, the seed is initialized once\n  when the statement is prepared, prior to execution.\n\no With a nonconstant initializer argument (such as a column name), the\n  seed is initialized with the value for each invocation of RAND().\n\nOne implication of this behavior is that for equal argument values,\nRAND(N) returns the same value each time, and thus produces a\nrepeatable sequence of column values. In the following example, the\nsequence of values produced by RAND(3) is the same both places it\noccurs.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (117, 'ROUND', 14, 'Syntax:\nROUND(X), ROUND(X,D)\n\nRounds the argument X to D decimal places. The rounding algorithm\ndepends on the data type of X. D defaults to 0 if not specified. D can\nbe negative to cause D digits left of the decimal point of the value X\nto become zero. The maximum absolute value for D is 30; any digits in\nexcess of 30 (or -30) are truncated.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (118, 'SIGN', 14, 'Syntax:\nSIGN(X)\n\nReturns the sign of the argument as -1, 0, or 1, depending on whether X\nis negative, zero, or positive.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (119, 'SIN', 14, 'Syntax:\nSIN(X)\n\nReturns the sine of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (120, 'SQRT', 14, 'Syntax:\nSQRT(X)\n\nReturns the square root of a nonnegative number X.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (121, 'TAN', 14, 'Syntax:\nTAN(X)\n\nReturns the tangent of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (122, 'TRUNCATE', 14, 'Syntax:\nTRUNCATE(X,D)\n\nReturns the number X, truncated to D decimal places. If D is 0, the\nresult has no decimal point or fractional part. D can be negative to\ncause D digits left of the decimal point of the value X to become zero.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html\n\n', 'mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028\n', 'https://dev.mysql.com/doc/refman/5.6/en/mathematical-functions.html');
INSERT INTO `help_topic` VALUES (123, 'ADDDATE', 15, 'Syntax:\nADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n\nWhen invoked with the INTERVAL form of the second argument, ADDDATE()\nis a synonym for DATE_ADD(). The related function SUBDATE() is a\nsynonym for DATE_SUB(). For information on the INTERVAL unit argument,\nsee\nhttps://dev.mysql.com/doc/refman/5.6/en/expressions.html#temporal-inter\nvals.\n\nmysql> SELECT DATE_ADD(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2008-02-02\'\nmysql> SELECT ADDDATE(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2008-02-02\'\n\nWhen invoked with the days form of the second argument, MySQL treats it\nas an integer number of days to be added to expr.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT ADDDATE(\'2008-01-02\', 31);\n        -> \'2008-02-02\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (124, 'ADDTIME', 15, 'Syntax:\nADDTIME(expr1,expr2)\n\nADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time\nor datetime expression, and expr2 is a time expression.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT ADDTIME(\'2007-12-31 23:59:59.999999\', \'1 1:1:1.000002\');\n        -> \'2008-01-02 01:01:01.000001\'\nmysql> SELECT ADDTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n        -> \'03:00:01.999997\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (125, 'CONVERT_TZ', 15, 'Syntax:\nCONVERT_TZ(dt,from_tz,to_tz)\n\nCONVERT_TZ() converts a datetime value dt from the time zone given by\nfrom_tz to the time zone given by to_tz and returns the resulting\nvalue. Time zones are specified as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/time-zone-support.html. This\nfunction returns NULL if the arguments are invalid.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT CONVERT_TZ(\'2004-01-01 12:00:00\',\'GMT\',\'MET\');\n        -> \'2004-01-01 13:00:00\'\nmysql> SELECT CONVERT_TZ(\'2004-01-01 12:00:00\',\'+00:00\',\'+10:00\');\n        -> \'2004-01-01 22:00:00\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (126, 'CURDATE', 15, 'Syntax:\nCURDATE()\n\nReturns the current date as a value in \'YYYY-MM-DD\' or YYYYMMDD format,\ndepending on whether the function is used in string or numeric context.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT CURDATE();\n        -> \'2008-06-13\'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (127, 'CURRENT_DATE', 15, 'Syntax:\nCURRENT_DATE, CURRENT_DATE()\n\nCURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (128, 'CURRENT_TIME', 15, 'Syntax:\nCURRENT_TIME, CURRENT_TIME([fsp])\n\nCURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (129, 'CURRENT_TIMESTAMP', 15, 'Syntax:\nCURRENT_TIMESTAMP, CURRENT_TIMESTAMP([fsp])\n\nCURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (130, 'CURTIME', 15, 'Syntax:\nCURTIME([fsp])\n\nReturns the current time as a value in \'hh:mm:ss\' or hhmmss format,\ndepending on whether the function is used in string or numeric context.\nThe value is expressed in the session time zone.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT CURTIME();\n        -> \'23:50:26\'\nmysql> SELECT CURTIME() + 0;\n        -> 235026.000000\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (131, 'DATE FUNCTION', 15, 'Syntax:\nDATE(expr)\n\nExtracts the date part of the date or datetime expression expr.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DATE(\'2003-12-31 01:02:03\');\n        -> \'2003-12-31\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (132, 'DATEDIFF', 15, 'Syntax:\nDATEDIFF(expr1,expr2)\n\nDATEDIFF() returns expr1 − expr2 expressed as a value in days from\none date to the other. expr1 and expr2 are date or date-and-time\nexpressions. Only the date parts of the values are used in the\ncalculation.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DATEDIFF(\'2007-12-31 23:59:59\',\'2007-12-30\');\n        -> 1\nmysql> SELECT DATEDIFF(\'2010-11-30 23:59:59\',\'2010-12-31\');\n        -> -31\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (135, 'DATE_SUB', 15, 'Syntax:\nDATE_SUB(date,INTERVAL expr unit)\n\nSee the description for DATE_ADD().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (136, 'DAY', 15, 'Syntax:\nDAY(date)\n\nDAY() is a synonym for DAYOFMONTH().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (137, 'DAYNAME', 15, 'Syntax:\nDAYNAME(date)\n\nReturns the name of the weekday for date. The language used for the\nname is controlled by the value of the lc_time_names system variable\n(https://dev.mysql.com/doc/refman/5.6/en/locale-support.html).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DAYNAME(\'2007-02-03\');\n        -> \'Saturday\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (138, 'DAYOFMONTH', 15, 'Syntax:\nDAYOFMONTH(date)\n\nReturns the day of the month for date, in the range 1 to 31, or 0 for\ndates such as \'0000-00-00\' or \'2008-00-00\' that have a zero day part.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DAYOFMONTH(\'2007-02-03\');\n        -> 3\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (139, 'DAYOFWEEK', 15, 'Syntax:\nDAYOFWEEK(date)\n\nReturns the weekday index for date (1 = Sunday, 2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC standard.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DAYOFWEEK(\'2007-02-03\');\n        -> 7\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (140, 'DAYOFYEAR', 15, 'Syntax:\nDAYOFYEAR(date)\n\nReturns the day of the year for date, in the range 1 to 366.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DAYOFYEAR(\'2007-02-03\');\n        -> 34\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (141, 'EXTRACT', 15, 'Syntax:\nEXTRACT(unit FROM date)\n\nThe EXTRACT() function uses the same kinds of unit specifiers as\nDATE_ADD() or DATE_SUB(), but extracts parts from the date rather than\nperforming date arithmetic. For information on the unit argument, see\nhttps://dev.mysql.com/doc/refman/5.6/en/expressions.html#temporal-inter\nvals.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT EXTRACT(YEAR FROM \'2019-07-02\');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM \'2019-07-02 01:02:03\');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM \'2019-07-02 01:02:03\');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM \'2003-01-02 10:30:00.000123\');\n        -> 123\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (133, 'DATE_ADD', 15, 'Syntax:\nDATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\n\nThese functions perform date arithmetic. The date argument specifies\nthe starting date or datetime value. expr is an expression specifying\nthe interval value to be added or subtracted from the starting date.\nexpr is evaluated as a string; it may start with a - for negative\nintervals. unit is a keyword indicating the units in which the\nexpression should be interpreted.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DATE_ADD(\'2018-05-01\',INTERVAL 1 DAY);\n        -> \'2018-05-02\'\nmysql> SELECT DATE_SUB(\'2018-05-01\',INTERVAL 1 YEAR);\n        -> \'2017-05-01\'\nmysql> SELECT DATE_ADD(\'2020-12-31 23:59:59\',\n    ->                 INTERVAL 1 SECOND);\n        -> \'2021-01-01 00:00:00\'\nmysql> SELECT DATE_ADD(\'2018-12-31 23:59:59\',\n    ->                 INTERVAL 1 DAY);\n        -> \'2019-01-01 23:59:59\'\nmysql> SELECT DATE_ADD(\'2100-12-31 23:59:59\',\n    ->                 INTERVAL \'1:1\' MINUTE_SECOND);\n        -> \'2101-01-01 00:01:00\'\nmysql> SELECT DATE_SUB(\'2025-01-01 00:00:00\',\n    ->                 INTERVAL \'1 1:1:1\' DAY_SECOND);\n        -> \'2024-12-30 22:58:59\'\nmysql> SELECT DATE_ADD(\'1900-01-01 00:00:00\',\n    ->                 INTERVAL \'-1 10\' DAY_HOUR);\n        -> \'1899-12-30 14:00:00\'\nmysql> SELECT DATE_SUB(\'1998-01-02\', INTERVAL 31 DAY);\n        -> \'1997-12-02\'\nmysql> SELECT DATE_ADD(\'1992-12-31 23:59:59.000002\',\n    ->            INTERVAL \'1.999999\' SECOND_MICROSECOND);\n        -> \'1993-01-01 00:00:01.000001\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (134, 'DATE_FORMAT', 15, 'Syntax:\nDATE_FORMAT(date,format)\n\nFormats the date value according to the format string.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DATE_FORMAT(\'2009-10-04 22:23:00\', \'%W %M %Y\');\n        -> \'Sunday October 2009\'\nmysql> SELECT DATE_FORMAT(\'2007-10-04 22:23:00\', \'%H:%i:%s\');\n        -> \'22:23:00\'\nmysql> SELECT DATE_FORMAT(\'1900-10-04 22:23:00\',\n    ->                 \'%D %y %a %d %m %b %j\');\n        -> \'4th 00 Thu 04 10 Oct 277\'\nmysql> SELECT DATE_FORMAT(\'1997-10-04 22:23:00\',\n    ->                 \'%H %k %I %r %T %S %w\');\n        -> \'22 22 10 10:23:00 PM 22:23:00 00 6\'\nmysql> SELECT DATE_FORMAT(\'1999-01-01\', \'%X %V\');\n        -> \'1998 52\'\nmysql> SELECT DATE_FORMAT(\'2006-06-00\', \'%d\');\n        -> \'00\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (142, 'FROM_DAYS', 15, 'Syntax:\nFROM_DAYS(N)\n\nGiven a day number N, returns a DATE value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT FROM_DAYS(730669);\n        -> \'2000-07-03\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (143, 'FROM_UNIXTIME', 15, 'Syntax:\nFROM_UNIXTIME(unix_timestamp[,format])\n\nReturns a representation of the unix_timestamp argument as a value in\n\'YYYY-MM-DD hh:mm:ss\' or YYYYMMDDhhmmss format, depending on whether\nthe function is used in a string or numeric context. unix_timestamp is\nan internal timestamp value representing seconds since \'1970-01-01\n00:00:00\' UTC, such as produced by the UNIX_TIMESTAMP() function.\n\nThe return value is expressed in the session time zone. (Clients can\nset the session time zone as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/time-zone-support.html.) The\nformat string, if given, is used to format the result the same way as\ndescribed in the entry for the DATE_FORMAT() function.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> \'2015-11-13 10:08:01\'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      \'%Y %D %M %h:%i:%s %x\');\n        -> \'2015 13th November 10:08:01 2015\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (144, 'GET_FORMAT', 15, 'Syntax:\nGET_FORMAT({DATE|TIME|DATETIME}, {\'EUR\'|\'USA\'|\'JIS\'|\'ISO\'|\'INTERNAL\'})\n\nReturns a format string. This function is useful in combination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT DATE_FORMAT(\'2003-10-03\',GET_FORMAT(DATE,\'EUR\'));\n        -> \'03.10.2003\'\nmysql> SELECT STR_TO_DATE(\'10.31.2003\',GET_FORMAT(DATE,\'USA\'));\n        -> \'2003-10-31\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (145, 'HOUR', 15, 'Syntax:\nHOUR(time)\n\nReturns the hour for time. The range of the return value is 0 to 23 for\ntime-of-day values. However, the range of TIME values actually is much\nlarger, so HOUR can return values greater than 23.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT HOUR(\'10:05:03\');\n        -> 10\nmysql> SELECT HOUR(\'272:59:59\');\n        -> 272\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (146, 'LAST_DAY', 15, 'Syntax:\nLAST_DAY(date)\n\nTakes a date or datetime value and returns the corresponding value for\nthe last day of the month. Returns NULL if the argument is invalid.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT LAST_DAY(\'2003-02-05\');\n        -> \'2003-02-28\'\nmysql> SELECT LAST_DAY(\'2004-02-05\');\n        -> \'2004-02-29\'\nmysql> SELECT LAST_DAY(\'2004-01-01 01:01:01\');\n        -> \'2004-01-31\'\nmysql> SELECT LAST_DAY(\'2003-03-32\');\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (147, 'LOCALTIME', 15, 'Syntax:\nLOCALTIME, LOCALTIME([fsp])\n\nLOCALTIME and LOCALTIME() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (148, 'LOCALTIMESTAMP', 15, 'Syntax:\nLOCALTIMESTAMP, LOCALTIMESTAMP([fsp])\n\nLOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (149, 'MAKEDATE', 15, 'Syntax:\nMAKEDATE(year,dayofyear)\n\nReturns a date, given year and day-of-year values. dayofyear must be\ngreater than 0 or the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> \'2011-01-31\', \'2011-02-01\'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> \'2011-12-31\', \'2014-12-31\'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (150, 'MAKETIME', 15, 'Syntax:\nMAKETIME(hour,minute,second)\n\nReturns a time value calculated from the hour, minute, and second\narguments.\n\nThe second argument can have a fractional part.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MAKETIME(12,15,30);\n        -> \'12:15:30\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (151, 'MICROSECOND', 15, 'Syntax:\nMICROSECOND(expr)\n\nReturns the microseconds from the time or datetime expression expr as a\nnumber in the range from 0 to 999999.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MICROSECOND(\'12:00:00.123456\');\n        -> 123456\nmysql> SELECT MICROSECOND(\'2019-12-31 23:59:59.000010\');\n        -> 10\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (152, 'MINUTE', 15, 'Syntax:\nMINUTE(time)\n\nReturns the minute for time, in the range 0 to 59.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MINUTE(\'2008-02-03 10:05:03\');\n        -> 5\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (153, 'MONTH', 15, 'Syntax:\nMONTH(date)\n\nReturns the month for date, in the range 1 to 12 for January to\nDecember, or 0 for dates such as \'0000-00-00\' or \'2008-00-00\' that have\na zero month part.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MONTH(\'2008-02-03\');\n        -> 2\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (154, 'MONTHNAME', 15, 'Syntax:\nMONTHNAME(date)\n\nReturns the full name of the month for date. The language used for the\nname is controlled by the value of the lc_time_names system variable\n(https://dev.mysql.com/doc/refman/5.6/en/locale-support.html).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT MONTHNAME(\'2008-02-03\');\n        -> \'February\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (155, 'NOW', 15, 'Syntax:\nNOW([fsp])\n\nReturns the current date and time as a value in \'YYYY-MM-DD hh:mm:ss\'\nor YYYYMMDDhhmmss format, depending on whether the function is used in\nstring or numeric context. The value is expressed in the session time\nzone.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT NOW();\n        -> \'2007-12-15 23:50:26\'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (156, 'PERIOD_ADD', 15, 'Syntax:\nPERIOD_ADD(P,N)\n\nAdds N months to period P (in the format YYMM or YYYYMM). Returns a\nvalue in the format YYYYMM.\n\n*Note*:\n\nThe period argument P is not a date value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (157, 'PERIOD_DIFF', 15, 'Syntax:\nPERIOD_DIFF(P1,P2)\n\nReturns the number of months between periods P1 and P2. P1 and P2\nshould be in the format YYMM or YYYYMM. Note that the period arguments\nP1 and P2 are not date values.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (158, 'QUARTER', 15, 'Syntax:\nQUARTER(date)\n\nReturns the quarter of the year for date, in the range 1 to 4.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT QUARTER(\'2008-04-01\');\n        -> 2\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (159, 'SECOND', 15, 'Syntax:\nSECOND(time)\n\nReturns the second for time, in the range 0 to 59.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT SECOND(\'10:05:03\');\n        -> 3\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (160, 'SEC_TO_TIME', 15, 'Syntax:\nSEC_TO_TIME(seconds)\n\nReturns the seconds argument, converted to hours, minutes, and seconds,\nas a TIME value. The range of the result is constrained to that of the\nTIME data type. A warning occurs if the argument corresponds to a value\noutside that range.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT SEC_TO_TIME(2378);\n        -> \'00:39:38\'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (161, 'STR_TO_DATE', 15, 'Syntax:\nSTR_TO_DATE(str,format)\n\nThis is the inverse of the DATE_FORMAT() function. It takes a string\nstr and a format string format. STR_TO_DATE() returns a DATETIME value\nif the format string contains both date and time parts, or a DATE or\nTIME value if the string contains only date or time parts. If the date,\ntime, or datetime value extracted from str is illegal, STR_TO_DATE()\nreturns NULL and produces a warning.\n\nThe server scans str attempting to match format to it. The format\nstring can contain literal characters and format specifiers beginning\nwith %. Literal characters in format must match literally in str.\nFormat specifiers in format must match a date or time part in str. For\nthe specifiers that can be used in format, see the DATE_FORMAT()\nfunction description.\n\nmysql> SELECT STR_TO_DATE(\'01,5,2013\',\'%d,%m,%Y\');\n        -> \'2013-05-01\'\nmysql> SELECT STR_TO_DATE(\'May 1, 2013\',\'%M %d,%Y\');\n        -> \'2013-05-01\'\n\nScanning starts at the beginning of str and fails if format is found\nnot to match. Extra characters at the end of str are ignored.\n\nmysql> SELECT STR_TO_DATE(\'a09:30:17\',\'a%h:%i:%s\');\n        -> \'09:30:17\'\nmysql> SELECT STR_TO_DATE(\'a09:30:17\',\'%h:%i:%s\');\n        -> NULL\nmysql> SELECT STR_TO_DATE(\'09:30:17a\',\'%h:%i:%s\');\n        -> \'09:30:17\'\n\nUnspecified date or time parts have a value of 0, so incompletely\nspecified values in str produce a result with some or all parts set to\n0:\n\nmysql> SELECT STR_TO_DATE(\'abc\',\'abc\');\n        -> \'0000-00-00\'\nmysql> SELECT STR_TO_DATE(\'9\',\'%m\');\n        -> \'0000-09-00\'\nmysql> SELECT STR_TO_DATE(\'9\',\'%s\');\n        -> \'00:00:09\'\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (163, 'SUBTIME', 15, 'Syntax:\nSUBTIME(expr1,expr2)\n\nSUBTIME() returns expr1 − expr2 expressed as a value in the same\nformat as expr1. expr1 is a time or datetime expression, and expr2 is a\ntime expression.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT SUBTIME(\'2007-12-31 23:59:59.999999\',\'1 1:1:1.000002\');\n        -> \'2007-12-30 22:58:58.999997\'\nmysql> SELECT SUBTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n        -> \'-00:59:59.999999\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (165, 'TIME FUNCTION', 15, 'Syntax:\nTIME(expr)\n\nExtracts the time part of the time or datetime expression expr and\nreturns it as a string.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIME(\'2003-12-31 01:02:03\');\n        -> \'01:02:03\'\nmysql> SELECT TIME(\'2003-12-31 01:02:03.000123\');\n        -> \'01:02:03.000123\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (167, 'TIMESTAMP FUNCTION', 15, 'Syntax:\nTIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n\nWith a single argument, this function returns the date or datetime\nexpression expr as a datetime value. With two arguments, it adds the\ntime expression expr2 to the date or datetime expression expr1 and\nreturns the result as a datetime value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIMESTAMP(\'2003-12-31\');\n        -> \'2003-12-31 00:00:00\'\nmysql> SELECT TIMESTAMP(\'2003-12-31 12:00:00\',\'12:00:00\');\n        -> \'2004-01-01 00:00:00\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (168, 'TIMESTAMPADD', 15, 'Syntax:\nTIMESTAMPADD(unit,interval,datetime_expr)\n\nAdds the integer expression interval to the date or datetime expression\ndatetime_expr. The unit for interval is given by the unit argument,\nwhich should be one of the following values: MICROSECOND\n(microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or\nYEAR.\n\nThe unit value may be specified using one of keywords as shown, or with\na prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are legal.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIMESTAMPADD(MINUTE,1,\'2003-01-02\');\n        -> \'2003-01-02 00:01:00\'\nmysql> SELECT TIMESTAMPADD(WEEK,1,\'2003-01-02\');\n        -> \'2003-01-09\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (162, 'SUBDATE', 15, 'Syntax:\nSUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n\nWhen invoked with the INTERVAL form of the second argument, SUBDATE()\nis a synonym for DATE_SUB(). For information on the INTERVAL unit\nargument, see the discussion for DATE_ADD().\n\nmysql> SELECT DATE_SUB(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2007-12-02\'\nmysql> SELECT SUBDATE(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2007-12-02\'\n\nThe second form enables the use of an integer value for days. In such\ncases, it is interpreted as the number of days to be subtracted from\nthe date or datetime expression expr.\n\nmysql> SELECT SUBDATE(\'2008-01-02 12:00:00\', 31);\n        -> \'2007-12-02 12:00:00\'\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (164, 'SYSDATE', 15, 'Syntax:\nSYSDATE([fsp])\n\nReturns the current date and time as a value in \'YYYY-MM-DD hh:mm:ss\'\nor YYYYMMDDhhmmss format, depending on whether the function is used in\nstring or numeric context.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nSYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored function\nor trigger, NOW() returns the time at which the function or triggering\nstatement began to execute.)\n\nmysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+\n\nIn addition, the SET TIMESTAMP statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().\n\nBecause SYSDATE() can return different values even within the same\nstatement, and is not affected by SET TIMESTAMP, it is nondeterministic\nand therefore unsafe for replication if statement-based binary logging\nis used. If that is a problem, you can use row-based logging.\n\nAlternatively, you can use the --sysdate-is-now option to cause\nSYSDATE() to be an alias for NOW(). This works if the option is used on\nboth the source and the replica.\n\nThe nondeterministic nature of SYSDATE() also means that indexes cannot\nbe used for evaluating expressions that refer to it.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (166, 'TIMEDIFF', 15, 'Syntax:\nTIMEDIFF(expr1,expr2)\n\nTIMEDIFF() returns expr1 − expr2 expressed as a time value. expr1 and\nexpr2 are time or date-and-time expressions, but both must be of the\nsame type.\n\nThe result returned by TIMEDIFF() is limited to the range allowed for\nTIME values. Alternatively, you can use either of the functions\nTIMESTAMPDIFF() and UNIX_TIMESTAMP(), both of which return integers.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIMEDIFF(\'2000:01:01 00:00:00\',\n    ->                 \'2000:01:01 00:00:00.000001\');\n        -> \'-00:00:00.000001\'\nmysql> SELECT TIMEDIFF(\'2008-12-31 23:59:59.000001\',\n    ->                 \'2008-12-30 01:01:01.000002\');\n        -> \'46:58:57.999999\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (169, 'TIMESTAMPDIFF', 15, 'Syntax:\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n\nReturns datetime_expr2 − datetime_expr1, where datetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One expression may be\na date and the other a datetime; a date value is treated as a datetime\nhaving the time part \'00:00:00\' where necessary. The unit for the\nresult (an integer) is given by the unit argument. The legal values for\nunit are the same as those listed in the description of the\nTIMESTAMPADD() function.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIMESTAMPDIFF(MONTH,\'2003-02-01\',\'2003-05-01\');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,\'2002-05-01\',\'2001-01-01\');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,\'2003-02-01\',\'2003-05-01 12:05:55\');\n        -> 128885\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (170, 'TIME_FORMAT', 15, 'Syntax:\nTIME_FORMAT(time,format)\n\nThis is used like the DATE_FORMAT() function, but the format string may\ncontain format specifiers only for hours, minutes, seconds, and\nmicroseconds. Other specifiers produce a NULL value or 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIME_FORMAT(\'100:00:00\', \'%H %k %h %I %l\');\n        -> \'100 100 04 04 4\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (171, 'TIME_TO_SEC', 15, 'Syntax:\nTIME_TO_SEC(time)\n\nReturns the time argument, converted to seconds.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TIME_TO_SEC(\'22:23:00\');\n        -> 80580\nmysql> SELECT TIME_TO_SEC(\'00:39:38\');\n        -> 2378\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (172, 'TO_DAYS', 15, 'Syntax:\nTO_DAYS(date)\n\nGiven a date date, returns a day number (the number of days since year\n0).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS(\'2007-10-07\');\n        -> 733321\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (173, 'TO_SECONDS', 15, 'Syntax:\nTO_SECONDS(expr)\n\nGiven a date or datetime expr, returns the number of seconds since the\nyear 0. If expr is not a valid date or datetime value, returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS(\'2009-11-29\');\n        -> 63426672000\nmysql> SELECT TO_SECONDS(\'2009-11-29 13:43:32\');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (175, 'UTC_DATE', 15, 'Syntax:\nUTC_DATE, UTC_DATE()\n\nReturns the current UTC date as a value in \'YYYY-MM-DD\' or YYYYMMDD\nformat, depending on whether the function is used in string or numeric\ncontext.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> \'2003-08-14\', 20030814\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (176, 'UTC_TIME', 15, 'Syntax:\nUTC_TIME, UTC_TIME([fsp])\n\nReturns the current UTC time as a value in \'hh:mm:ss\' or hhmmss format,\ndepending on whether the function is used in string or numeric context.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> \'18:07:53\', 180753.000000\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (174, 'UNIX_TIMESTAMP', 15, 'Syntax:\nUNIX_TIMESTAMP([date])\n\nIf UNIX_TIMESTAMP() is called with no date argument, it returns a Unix\ntimestamp representing seconds since \'1970-01-01 00:00:00\' UTC.\n\nIf UNIX_TIMESTAMP() is called with a date argument, it returns the\nvalue of the argument as seconds since \'1970-01-01 00:00:00\' UTC. The\nserver interprets date as a value in the session time zone and converts\nit to an internal Unix timestamp value in UTC. (Clients can set the\nsession time zone as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/time-zone-support.html.) The\ndate argument may be a DATE, DATETIME, or TIMESTAMP string, or a number\nin YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the\nargument includes a time part, it may optionally include a fractional\nseconds part.\n\nThe return value is an integer if no argument is given or the argument\ndoes not include a fractional seconds part, or DECIMAL if an argument\nis given that includes a fractional seconds part.\n\nWhen the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns\nthe internal timestamp value directly, with no implicit\n\"string-to-Unix-timestamp\" conversion.\n\nThe valid range of argument values is the same as for the TIMESTAMP\ndata type: \'1970-01-01 00:00:01.000000\' UTC to \'2038-01-19\n03:14:07.999999\' UTC. If you pass an out-of-range date to\nUNIX_TIMESTAMP(), it returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP(\'2015-11-13 10:20:19\');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP(\'2015-11-13 10:20:19.012\');\n        -> 1447431619.012\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (177, 'UTC_TIMESTAMP', 15, 'Syntax:\nUTC_TIMESTAMP, UTC_TIMESTAMP([fsp])\n\nReturns the current UTC date and time as a value in \'YYYY-MM-DD\nhh:mm:ss\' or YYYYMMDDhhmmss format, depending on whether the function\nis used in string or numeric context.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> \'2003-08-14 18:08:04\', 20030814180804.000000\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (178, 'WEEK', 15, 'Syntax:\nWEEK(date[,mode])\n\nThis function returns the week number for date. The two-argument form\nof WEEK() enables you to specify whether the week starts on Sunday or\nMonday and whether the return value should be in the range from 0 to 53\nor from 1 to 53. If the mode argument is omitted, the value of the\ndefault_week_format system variable is used. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT WEEK(\'2008-02-20\');\n        -> 7\nmysql> SELECT WEEK(\'2008-02-20\',0);\n        -> 7\nmysql> SELECT WEEK(\'2008-02-20\',1);\n        -> 8\nmysql> SELECT WEEK(\'2008-12-31\',1);\n        -> 53\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (179, 'WEEKDAY', 15, 'Syntax:\nWEEKDAY(date)\n\nReturns the weekday index for date (0 = Monday, 1 = Tuesday, ... 6 =\nSunday).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT WEEKDAY(\'2008-02-03 22:23:00\');\n        -> 6\nmysql> SELECT WEEKDAY(\'2007-11-06\');\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (180, 'WEEKOFYEAR', 15, 'Syntax:\nWEEKOFYEAR(date)\n\nReturns the calendar week of the date as a number in the range from 1\nto 53. WEEKOFYEAR() is a compatibility function that is equivalent to\nWEEK(date,3).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT WEEKOFYEAR(\'2008-02-20\');\n        -> 8\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (181, 'YEAR', 15, 'Syntax:\nYEAR(date)\n\nReturns the year for date, in the range 1000 to 9999, or 0 for the\n\"zero\" date.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT YEAR(\'1987-01-01\');\n        -> 1987\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (182, 'YEARWEEK', 15, 'Syntax:\nYEARWEEK(date), YEARWEEK(date,mode)\n\nReturns year and week for a date. The year in the result may be\ndifferent from the year in the date argument for the first and the last\nweek of the year.\n\nThe mode argument works exactly like the mode argument to WEEK(). For\nthe single-argument syntax, a mode value of 0 is used. Unlike WEEK(),\nthe value of default_week_format does not influence YEARWEEK().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\n\n', 'mysql> SELECT YEARWEEK(\'1987-01-01\');\n        -> 198652\n', 'https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html');
INSERT INTO `help_topic` VALUES (183, 'ASCII', 16, 'Syntax:\nASCII(str)\n\nReturns the numeric value of the leftmost character of the string str.\nReturns 0 if str is the empty string. Returns NULL if str is NULL.\nASCII() works for 8-bit characters.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT ASCII(\'2\');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII(\'dx\');\n        -> 100\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (184, 'BIN', 16, 'Syntax:\nBIN(N)\n\nReturns a string representation of the binary value of N, where N is a\nlonglong (BIGINT) number. This is equivalent to CONV(N,10,2). Returns\nNULL if N is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT BIN(12);\n        -> \'1100\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (185, 'BIT_LENGTH', 16, 'Syntax:\nBIT_LENGTH(str)\n\nReturns the length of the string str in bits.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT BIT_LENGTH(\'text\');\n        -> 32\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (187, 'CHAR_LENGTH', 16, 'Syntax:\nCHAR_LENGTH(str)\n\nReturns the length of the string str, measured in characters. A\nmultibyte character counts as a single character. This means that for a\nstring containing five 2-byte characters, LENGTH() returns 10, whereas\nCHAR_LENGTH() returns 5.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (188, 'CHARACTER_LENGTH', 16, 'Syntax:\nCHARACTER_LENGTH(str)\n\nCHARACTER_LENGTH() is a synonym for CHAR_LENGTH().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (189, 'CONCAT', 16, 'Syntax:\nCONCAT(str1,str2,...)\n\nReturns the string that results from concatenating the arguments. May\nhave one or more arguments. If all arguments are nonbinary strings, the\nresult is a nonbinary string. If the arguments include any binary\nstrings, the result is a binary string. A numeric argument is converted\nto its equivalent nonbinary string form.\n\nCONCAT() returns NULL if any argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT CONCAT(\'My\', \'S\', \'QL\');\n        -> \'MySQL\'\nmysql> SELECT CONCAT(\'My\', NULL, \'QL\');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> \'14.3\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (186, 'CHAR FUNCTION', 16, 'Syntax:\nCHAR(N,... [USING charset_name])\n\nCHAR() interprets each argument N as an integer and returns a string\nconsisting of the characters given by the code values of those\nintegers. NULL values are skipped.\n\nBy default, CHAR() returns a binary string. To produce a string in a\ngiven character set, use the optional USING clause:\n\nmysql> SELECT CHARSET(CHAR(X\'65\')), CHARSET(CHAR(X\'65\' USING utf8));\n+----------------------+---------------------------------+\n| CHARSET(CHAR(X\'65\')) | CHARSET(CHAR(X\'65\' USING utf8)) |\n+----------------------+---------------------------------+\n| binary               | utf8                            |\n+----------------------+---------------------------------+\n\nIf USING is given and the result string is illegal for the given\ncharacter set, a warning is issued. Also, if strict SQL mode is\nenabled, the result from CHAR() becomes NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT CHAR(77,121,83,81,\'76\');\n        -> \'MySQL\'\nmysql> SELECT CHAR(77,77.3,\'77.3\');\n        -> \'MMM\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (190, 'CONCAT_WS', 16, 'Syntax:\nCONCAT_WS(separator,str1,str2,...)\n\nCONCAT_WS() stands for Concatenate With Separator and is a special form\nof CONCAT(). The first argument is the separator for the rest of the\narguments. The separator is added between the strings to be\nconcatenated. The separator can be a string, as can the rest of the\narguments. If the separator is NULL, the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT CONCAT_WS(\',\',\'First name\',\'Second name\',\'Last Name\');\n        -> \'First name,Second name,Last Name\'\nmysql> SELECT CONCAT_WS(\',\',\'First name\',NULL,\'Last Name\');\n        -> \'First name,Last Name\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (191, 'ELT', 16, 'Syntax:\nELT(N,str1,str2,str3,...)\n\nELT() returns the Nth element of the list of strings: str1 if N = 1,\nstr2 if N = 2, and so on. Returns NULL if N is less than 1 or greater\nthan the number of arguments. ELT() is the complement of FIELD().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT ELT(1, \'Aa\', \'Bb\', \'Cc\', \'Dd\');\n        -> \'Aa\'\nmysql> SELECT ELT(4, \'Aa\', \'Bb\', \'Cc\', \'Dd\');\n        -> \'Dd\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (192, 'EXPORT_SET', 16, 'Syntax:\nEXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n\nReturns a string such that for every bit set in the value bits, you get\nan on string and for every bit not set in the value, you get an off\nstring. Bits in bits are examined from right to left (from low-order to\nhigh-order bits). Strings are added to the result from left to right,\nseparated by the separator string (the default being the comma\ncharacter ,). The number of bits examined is given by number_of_bits,\nwhich has a default of 64 if not specified. number_of_bits is silently\nclipped to 64 if larger than 64. It is treated as an unsigned integer,\nso a value of −1 is effectively the same as 64.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT EXPORT_SET(5,\'Y\',\'N\',\',\',4);\n        -> \'Y,N,Y,N\'\nmysql> SELECT EXPORT_SET(6,\'1\',\'0\',\',\',10);\n        -> \'0,1,1,0,0,0,0,0,0,0\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (193, 'FIELD', 16, 'Syntax:\nFIELD(str,str1,str2,str3,...)\n\nReturns the index (position) of str in the str1, str2, str3, ... list.\nReturns 0 if str is not found.\n\nIf all arguments to FIELD() are strings, all arguments are compared as\nstrings. If all arguments are numbers, they are compared as numbers.\nOtherwise, the arguments are compared as double.\n\nIf str is NULL, the return value is 0 because NULL fails equality\ncomparison with any value. FIELD() is the complement of ELT().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT FIELD(\'Bb\', \'Aa\', \'Bb\', \'Cc\', \'Dd\', \'Ff\');\n        -> 2\nmysql> SELECT FIELD(\'Gg\', \'Aa\', \'Bb\', \'Cc\', \'Dd\', \'Ff\');\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (194, 'FIND_IN_SET', 16, 'Syntax:\nFIND_IN_SET(str,strlist)\n\nReturns a value in the range of 1 to N if the string str is in the\nstring list strlist consisting of N substrings. A string list is a\nstring composed of substrings separated by , characters. If the first\nargument is a constant string and the second is a column of type SET,\nthe FIND_IN_SET() function is optimized to use bit arithmetic. Returns\n0 if str is not in strlist or if strlist is the empty string. Returns\nNULL if either argument is NULL. This function does not work properly\nif the first argument contains a comma (,) character.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT FIND_IN_SET(\'b\',\'a,b,c,d\');\n        -> 2\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (196, 'FROM_BASE64', 16, 'Syntax:\nFROM_BASE64(str)\n\nTakes a string encoded with the base-64 encoded rules used by\nTO_BASE64() and returns the decoded result as a binary string. The\nresult is NULL if the argument is NULL or not a valid base-64 string.\nSee the description of TO_BASE64() for details about the encoding and\ndecoding rules.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT TO_BASE64(\'abc\'), FROM_BASE64(TO_BASE64(\'abc\'));\n        -> \'JWJj\', \'abc\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (198, 'INSERT FUNCTION', 16, 'Syntax:\nINSERT(str,pos,len,newstr)\n\nReturns the string str, with the substring beginning at position pos\nand len characters long replaced by the string newstr. Returns the\noriginal string if pos is not within the length of the string. Replaces\nthe rest of the string from position pos if len is not within the\nlength of the rest of the string. Returns NULL if any argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT INSERT(\'Quadratic\', 3, 4, \'What\');\n        -> \'QuWhattic\'\nmysql> SELECT INSERT(\'Quadratic\', -1, 4, \'What\');\n        -> \'Quadratic\'\nmysql> SELECT INSERT(\'Quadratic\', 3, 100, \'What\');\n        -> \'QuWhat\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (199, 'INSTR', 16, 'Syntax:\nINSTR(str,substr)\n\nReturns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of LOCATE(),\nexcept that the order of the arguments is reversed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT INSTR(\'foobarbar\', \'bar\');\n        -> 4\nmysql> SELECT INSTR(\'xbar\', \'foobar\');\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (200, 'LCASE', 16, 'Syntax:\nLCASE(str)\n\nLCASE() is a synonym for LOWER().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (201, 'LEFT', 16, 'Syntax:\nLEFT(str,len)\n\nReturns the leftmost len characters from the string str, or NULL if any\nargument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT LEFT(\'foobarbar\', 5);\n        -> \'fooba\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (202, 'LENGTH', 16, 'Syntax:\nLENGTH(str)\n\nReturns the length of the string str, measured in bytes. A multibyte\ncharacter counts as multiple bytes. This means that for a string\ncontaining five 2-byte characters, LENGTH() returns 10, whereas\nCHAR_LENGTH() returns 5.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT LENGTH(\'text\');\n        -> 4\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (195, 'FORMAT', 16, 'Syntax:\nFORMAT(X,D[,locale])\n\nFormats the number X to a format like \'#,###,###.##\', rounded to D\ndecimal places, and returns the result as a string. If D is 0, the\nresult has no decimal point or fractional part.\n\nThe optional third parameter enables a locale to be specified to be\nused for the result number\'s decimal point, thousands separator, and\ngrouping between separators. Permissible locale values are the same as\nthe legal values for the lc_time_names system variable (see\nhttps://dev.mysql.com/doc/refman/5.6/en/locale-support.html). If no\nlocale is specified, the default is \'en_US\'.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT FORMAT(12332.123456, 4);\n        -> \'12,332.1235\'\nmysql> SELECT FORMAT(12332.1,4);\n        -> \'12,332.1000\'\nmysql> SELECT FORMAT(12332.2,0);\n        -> \'12,332\'\nmysql> SELECT FORMAT(12332.2,2,\'de_DE\');\n        -> \'12.332,20\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (197, 'HEX', 16, 'Syntax:\nHEX(str), HEX(N)\n\nFor a string argument str, HEX() returns a hexadecimal string\nrepresentation of str where each byte of each character in str is\nconverted to two hexadecimal digits. (Multibyte characters therefore\nbecome more than two digits.) The inverse of this operation is\nperformed by the UNHEX() function.\n\nFor a numeric argument N, HEX() returns a hexadecimal string\nrepresentation of the value of N treated as a longlong (BIGINT) number.\nThis is equivalent to CONV(N,10,16). The inverse of this operation is\nperformed by CONV(HEX(N),16,10).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT X\'616263\', HEX(\'abc\'), UNHEX(HEX(\'abc\'));\n        -> \'abc\', 616263, \'abc\'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> \'FF\', 255\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (203, 'LOAD_FILE', 16, 'Syntax:\nLOAD_FILE(file_name)\n\nReads the file and returns the file contents as a string. To use this\nfunction, the file must be located on the server host, you must specify\nthe full path name to the file, and you must have the FILE privilege.\nThe file must be readable by all and its size less than\nmax_allowed_packet bytes. If the secure_file_priv system variable is\nset to a nonempty directory name, the file to be loaded must be located\nin that directory.\n\nIf the file does not exist or cannot be read because one of the\npreceding conditions is not satisfied, the function returns NULL.\n\nThe character_set_filesystem system variable controls interpretation of\nfile names that are given as literal strings.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> UPDATE t\n            SET blob_col=LOAD_FILE(\'/tmp/picture\')\n            WHERE id=1;\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (204, 'LOCATE', 16, 'Syntax:\nLOCATE(substr,str), LOCATE(substr,str,pos)\n\nThe first syntax returns the position of the first occurrence of\nsubstring substr in string str. The second syntax returns the position\nof the first occurrence of substring substr in string str, starting at\nposition pos. Returns 0 if substr is not in str. Returns NULL if substr\nor str is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT LOCATE(\'bar\', \'foobarbar\');\n        -> 4\nmysql> SELECT LOCATE(\'xbar\', \'foobar\');\n        -> 0\nmysql> SELECT LOCATE(\'bar\', \'foobarbar\', 5);\n        -> 7\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (205, 'LOWER', 16, 'Syntax:\nLOWER(str)\n\nReturns the string str with all characters changed to lowercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nmysql> SELECT LOWER(\'QUADRATICALLY\');\n        -> \'quadratically\'\n\nLOWER() (and UPPER()) are ineffective when applied to binary strings\n(BINARY, VARBINARY, BLOB). To perform lettercase conversion of a binary\nstring, first convert it to a nonbinary string using a character set\nappropriate for the data stored in the string:\n\nmysql> SET @str = BINARY \'New York\';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));\n+-------------+-----------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING latin1)) |\n+-------------+-----------------------------------+\n| New York    | new york                          |\n+-------------+-----------------------------------+\n\nFor collations of Unicode character sets, LOWER() and UPPER() work\naccording to the Unicode Collation Algorithm (UCA) version in the\ncollation name, if there is one, and UCA 4.0.0 if no version is\nspecified. For example, utf8_unicode_520_ci works according to UCA\n5.2.0, whereas utf8_unicode_ci works according to UCA 4.0.0. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-unicode-sets.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (206, 'LPAD', 16, 'Syntax:\nLPAD(str,len,padstr)\n\nReturns the string str, left-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT LPAD(\'hi\',4,\'??\');\n        -> \'??hi\'\nmysql> SELECT LPAD(\'hi\',1,\'??\');\n        -> \'h\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (207, 'LTRIM', 16, 'Syntax:\nLTRIM(str)\n\nReturns the string str with leading space characters removed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT LTRIM(\'  barbar\');\n        -> \'barbar\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (208, 'MAKE_SET', 16, 'Syntax:\nMAKE_SET(bits,str1,str2,...)\n\nReturns a set value (a string containing substrings separated by ,\ncharacters) consisting of the strings that have the corresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL\nvalues in str1, str2, ... are not appended to the result.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT MAKE_SET(1,\'a\',\'b\',\'c\');\n        -> \'a\'\nmysql> SELECT MAKE_SET(1 | 4,\'hello\',\'nice\',\'world\');\n        -> \'hello,world\'\nmysql> SELECT MAKE_SET(1 | 4,\'hello\',\'nice\',NULL,\'world\');\n        -> \'hello\'\nmysql> SELECT MAKE_SET(0,\'a\',\'b\',\'c\');\n        -> \'\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (209, 'MID', 16, 'Syntax:\nMID(str,pos,len)\n\nMID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (210, 'OCT', 16, 'Syntax:\nOCT(N)\n\nReturns a string representation of the octal value of N, where N is a\nlonglong (BIGINT) number. This is equivalent to CONV(N,10,8). Returns\nNULL if N is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT OCT(12);\n        -> \'14\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (211, 'OCTET_LENGTH', 16, 'Syntax:\nOCTET_LENGTH(str)\n\nOCTET_LENGTH() is a synonym for LENGTH().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (212, 'ORD', 16, 'Syntax:\nORD(str)\n\nIf the leftmost character of the string str is a multibyte character,\nreturns the code for that character, calculated from the numeric values\nof its constituent bytes using this formula:\n\n  (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...\n\nIf the leftmost character is not a multibyte character, ORD() returns\nthe same value as the ASCII() function.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT ORD(\'2\');\n        -> 50\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (213, 'POSITION', 16, 'Syntax:\nPOSITION(substr IN str)\n\nPOSITION(substr IN str) is a synonym for LOCATE(substr,str).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (214, 'QUOTE', 16, 'Syntax:\nQUOTE(str)\n\nQuotes a string to produce a result that can be used as a properly\nescaped data value in an SQL statement. The string is returned enclosed\nby single quotation marks and with each instance of backslash (\\),\nsingle quote (\'), ASCII NUL, and Control+Z preceded by a backslash. If\nthe argument is NULL, the return value is the word \"NULL\" without\nenclosing single quotation marks.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT QUOTE(\'Don\\\'t!\');\n        -> \'Don\\\'t!\'\nmysql> SELECT QUOTE(NULL);\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (215, 'REPEAT FUNCTION', 16, 'Syntax:\nREPEAT(str,count)\n\nReturns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount are NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT REPEAT(\'MySQL\', 3);\n        -> \'MySQLMySQLMySQL\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (216, 'REPLACE FUNCTION', 16, 'Syntax:\nREPLACE(str,from_str,to_str)\n\nReturns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT REPLACE(\'www.mysql.com\', \'w\', \'Ww\');\n        -> \'WwWwWw.mysql.com\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (217, 'REVERSE', 16, 'Syntax:\nREVERSE(str)\n\nReturns the string str with the order of the characters reversed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT REVERSE(\'abc\');\n        -> \'cba\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (218, 'RIGHT', 16, 'Syntax:\nRIGHT(str,len)\n\nReturns the rightmost len characters from the string str, or NULL if\nany argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT RIGHT(\'foobarbar\', 4);\n        -> \'rbar\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (219, 'RPAD', 16, 'Syntax:\nRPAD(str,len,padstr)\n\nReturns the string str, right-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT RPAD(\'hi\',5,\'?\');\n        -> \'hi???\'\nmysql> SELECT RPAD(\'hi\',1,\'?\');\n        -> \'h\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (220, 'RTRIM', 16, 'Syntax:\nRTRIM(str)\n\nReturns the string str with trailing space characters removed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT RTRIM(\'barbar   \');\n        -> \'barbar\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (221, 'SOUNDEX', 16, 'Syntax:\nSOUNDEX(str)\n\nReturns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string\nis four characters long, but the SOUNDEX() function returns an\narbitrarily long string. You can use SUBSTRING() on the result to get a\nstandard soundex string. All nonalphabetic characters in str are\nignored. All international alphabetic characters outside the A-Z range\nare treated as vowels.\n\n*Important*:\n\nWhen using SOUNDEX(), you should be aware of the following limitations:\n\no This function, as currently implemented, is intended to work well\n  with strings that are in the English language only. Strings in other\n  languages may not produce reliable results.\n\no This function is not guaranteed to provide consistent results with\n  strings that use multibyte character sets, including utf-8. See Bug\n  #22638 for more information.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT SOUNDEX(\'Hello\');\n        -> \'H400\'\nmysql> SELECT SOUNDEX(\'Quadratically\');\n        -> \'Q36324\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (222, 'SOUNDS LIKE', 16, 'Syntax:\nexpr1 SOUNDS LIKE expr2\n\nThis is the same as SOUNDEX(expr1) = SOUNDEX(expr2).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (223, 'SPACE', 16, 'Syntax:\nSPACE(N)\n\nReturns a string consisting of N space characters.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT SPACE(6);\n        -> \'      \'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (224, 'SUBSTR', 16, 'Syntax:\nSUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str\nFROM pos FOR len)\n\nSUBSTR() is a synonym for SUBSTRING().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (226, 'SUBSTRING_INDEX', 16, 'Syntax:\nSUBSTRING_INDEX(str,delim,count)\n\nReturns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left of the\nfinal delimiter (counting from the left) is returned. If count is\nnegative, everything to the right of the final delimiter (counting from\nthe right) is returned. SUBSTRING_INDEX() performs a case-sensitive\nmatch when searching for delim.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', 2);\n        -> \'www.mysql\'\nmysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', -2);\n        -> \'mysql.com\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (227, 'TO_BASE64', 16, 'Syntax:\nTO_BASE64(str)\n\nConverts the string argument to base-64 encoded form and returns the\nresult as a character string with the connection character set and\ncollation. If the argument is not a string, it is converted to a string\nbefore conversion takes place. The result is NULL if the argument is\nNULL. Base-64 encoded strings can be decoded using the FROM_BASE64()\nfunction.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT TO_BASE64(\'abc\'), FROM_BASE64(TO_BASE64(\'abc\'));\n        -> \'JWJj\', \'abc\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (228, 'TRIM', 16, 'Syntax:\nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr\nFROM] str)\n\nReturns the string str with all remstr prefixes or suffixes removed. If\nnone of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is\nassumed. remstr is optional and, if not specified, spaces are removed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT TRIM(\'  bar   \');\n        -> \'bar\'\nmysql> SELECT TRIM(LEADING \'x\' FROM \'xxxbarxxx\');\n        -> \'barxxx\'\nmysql> SELECT TRIM(BOTH \'x\' FROM \'xxxbarxxx\');\n        -> \'bar\'\nmysql> SELECT TRIM(TRAILING \'xyz\' FROM \'barxxyz\');\n        -> \'barx\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (229, 'UCASE', 16, 'Syntax:\nUCASE(str)\n\nUCASE() is a synonym for UPPER().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (225, 'SUBSTRING', 16, 'Syntax:\nSUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nThe forms without a len argument return a substring from string str\nstarting at position pos. The forms with a len argument return a\nsubstring len characters long from string str, starting at position\npos. The forms that use FROM are standard SQL syntax. It is also\npossible to use a negative value for pos. In this case, the beginning\nof the substring is pos characters from the end of the string, rather\nthan the beginning. A negative value may be used for pos in any of the\nforms of this function. A value of 0 for pos returns an empty string.\n\nFor all forms of SUBSTRING(), the position of the first character in\nthe string from which the substring is to be extracted is reckoned as\n1.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT SUBSTRING(\'Quadratically\',5);\n        -> \'ratically\'\nmysql> SELECT SUBSTRING(\'foobarbar\' FROM 4);\n        -> \'barbar\'\nmysql> SELECT SUBSTRING(\'Quadratically\',5,6);\n        -> \'ratica\'\nmysql> SELECT SUBSTRING(\'Sakila\', -3);\n        -> \'ila\'\nmysql> SELECT SUBSTRING(\'Sakila\', -5, 3);\n        -> \'aki\'\nmysql> SELECT SUBSTRING(\'Sakila\' FROM -4 FOR 2);\n        -> \'ki\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (230, 'UNHEX', 16, 'Syntax:\nUNHEX(str)\n\nFor a string argument str, UNHEX(str) interprets each pair of\ncharacters in the argument as a hexadecimal number and converts it to\nthe byte represented by the number. The return value is a binary\nstring.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', 'mysql> SELECT UNHEX(\'4D7953514C\');\n        -> \'MySQL\'\nmysql> SELECT X\'4D7953514C\';\n        -> \'MySQL\'\nmysql> SELECT UNHEX(HEX(\'string\'));\n        -> \'string\'\nmysql> SELECT HEX(UNHEX(\'1267\'));\n        -> \'1267\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (231, 'UPPER', 16, 'Syntax:\nUPPER(str)\n\nReturns the string str with all characters changed to uppercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nmysql> SELECT UPPER(\'Hej\');\n        -> \'HEJ\'\n\nSee the description of LOWER() for information that also applies to\nUPPER(). This included information about how to perform lettercase\nconversion of binary strings (BINARY, VARBINARY, BLOB) for which these\nfunctions are ineffective, and information about case folding for\nUnicode character sets.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (232, 'WEIGHT_STRING', 16, 'Syntax:\nWEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n\nlevels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ...\n\nThis function returns the weight string for the input string. The\nreturn value is a binary string that represents the comparison and\nsorting value of the string. It has these properties:\n\no If WEIGHT_STRING(str1) = WEIGHT_STRING(str2), then str1 = str2 (str1\n  and str2 are considered equal)\n\no If WEIGHT_STRING(str1) < WEIGHT_STRING(str2), then str1 < str2 (str1\n  sorts before str2)\n\nWEIGHT_STRING() is a debugging function intended for internal use. Its\nbehavior can change without notice between MySQL versions. It can be\nused for testing and debugging of collations, especially if you are\nadding a new collation. See\nhttps://dev.mysql.com/doc/refman/5.6/en/adding-collation.html.\n\nThis list briefly summarizes the arguments. More details are given in\nthe discussion following the list.\n\no str: The input string expression.\n\no AS clause: Optional; cast the input string to a given type and\n  length.\n\no LEVEL clause: Optional; specify weight levels for the return value.\n\no flags: Optional; unused.\n\nThe input string, str, is a string expression. If the input is a\nnonbinary (character) string such as a CHAR, VARCHAR, or TEXT value,\nthe return value contains the collation weights for the string. If the\ninput is a binary (byte) string such as a BINARY, VARBINARY, or BLOB\nvalue, the return value is the same as the input (the weight for each\nbyte in a binary string is the byte value). If the input is NULL,\nWEIGHT_STRING() returns NULL.\n\nExamples:\n\nmysql> SET @s = _latin1 \'AB\' COLLATE latin1_swedish_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = _latin1 \'ab\' COLLATE latin1_swedish_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'AB\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'ab\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-functions.html');
INSERT INTO `help_topic` VALUES (233, 'LIKE', 16, 'Syntax:\nexpr LIKE pat [ESCAPE \'escape_char\']\n\nPattern matching using an SQL pattern. Returns 1 (TRUE) or 0 (FALSE).\nIf either expr or pat is NULL, the result is NULL.\n\nThe pattern need not be a literal string. For example, it can be\nspecified as a string expression or table column. In the latter case,\nthe column must be defined as one of the MySQL string types (see\nhttps://dev.mysql.com/doc/refman/5.6/en/string-types.html).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html\n\n', 'mysql> SELECT \'David!\' LIKE \'David_\';\n        -> 1\nmysql> SELECT \'David!\' LIKE \'%D%v%\';\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html');
INSERT INTO `help_topic` VALUES (234, 'NOT LIKE', 16, 'Syntax:\nexpr NOT LIKE pat [ESCAPE \'escape_char\']\n\nThis is the same as NOT (expr LIKE pat [ESCAPE \'escape_char\']).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html');
INSERT INTO `help_topic` VALUES (235, 'STRCMP', 16, 'Syntax:\nSTRCMP(expr1,expr2)\n\nSTRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort\norder, and 1 otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html\n\n', 'mysql> SELECT STRCMP(\'text\', \'text2\');\n        -> -1\nmysql> SELECT STRCMP(\'text2\', \'text\');\n        -> 1\nmysql> SELECT STRCMP(\'text\', \'text\');\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/string-comparison-functions.html');
INSERT INTO `help_topic` VALUES (236, 'NOT REGEXP', 16, 'Syntax:\nexpr NOT REGEXP pat, expr NOT RLIKE pat\n\nThis is the same as NOT (expr REGEXP pat).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/regexp.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/regexp.html');
INSERT INTO `help_topic` VALUES (237, 'REGEXP', 16, 'Syntax:\nexpr REGEXP pat, expr RLIKE pat\n\nReturns 1 if the string expr matches the regular expression specified\nby the pattern pat, 0 otherwise. If either expr or pat is NULL, the\nreturn value is NULL.\n\nRLIKE is a synonym for REGEXP, provided for mSQL compatibility.\n\nThe pattern can be an extended regular expression, the syntax for which\nis discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/regexp.html#regexp-syntax. The\npattern need not be a literal string. For example, it can be specified\nas a string expression or table column.\n\n*Note*:\n\nBecause MySQL uses the C escape syntax in strings (for example, \\n to\nrepresent the newline character), you must double any \\ that you use in\nyour REGEXP arguments.\n\nRegular expression operations use the character set and collation of\nthe string expression and pattern arguments when deciding the type of a\ncharacter and performing the comparison. If the arguments have\ndifferent character sets or collations, coercibility rules apply as\ndescribed in\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-collation-coercibility.\nhtml. If either argument is a binary string, the arguments are handled\nin case-sensitive fashion as binary strings.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/regexp.html\n\n', 'mysql> SELECT \'Michael!\' REGEXP \'.*\';\n+------------------------+\n| \'Michael!\' REGEXP \'.*\' |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\';\n+---------------------------------------+\n| \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\' |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\nmysql> SELECT \'a\' REGEXP \'^[a-d]\';\n+---------------------+\n| \'a\' REGEXP \'^[a-d]\' |\n+---------------------+\n|                   1 |\n+---------------------+\nmysql> SELECT \'a\' REGEXP \'A\', \'a\' REGEXP BINARY \'A\';\n+----------------+-----------------------+\n| \'a\' REGEXP \'A\' | \'a\' REGEXP BINARY \'A\' |\n+----------------+-----------------------+\n|              1 |                     0 |\n+----------------+-----------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/regexp.html');
INSERT INTO `help_topic` VALUES (238, 'MATCH AGAINST', 16, 'Syntax:\nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n\nMySQL has support for full-text indexing and searching:\n\no A full-text index in MySQL is an index of type FULLTEXT.\n\no Full-text indexes can be used only with InnoDB or MyISAM tables, and\n  can be created only for CHAR, VARCHAR, or TEXT columns.\n\no A FULLTEXT index definition can be given in the CREATE TABLE\n  statement when a table is created, or added later using ALTER TABLE\n  or CREATE INDEX.\n\no For large data sets, it is much faster to load your data into a table\n  that has no FULLTEXT index and then create the index after that, than\n  to load data into a table that has an existing FULLTEXT index.\n\nFull-text searching is performed using MATCH() ... AGAINST syntax.\nMATCH() takes a comma-separated list that names the columns to be\nsearched. AGAINST takes a string to search for, and an optional\nmodifier that indicates what type of search to perform. The search\nstring must be a string value that is constant during query evaluation.\nThis rules out, for example, a table column because that can differ for\neach row.\n\nThere are three types of full-text searches:\n\no A natural language search interprets the search string as a phrase in\n  natural human language (a phrase in free text). There are no special\n  operators, with the exception of double quote (\") characters. The\n  stopword list applies. For more information about stopword lists, see\n  https://dev.mysql.com/doc/refman/5.6/en/fulltext-stopwords.html.\n\n  Full-text searches are natural language searches if the IN NATURAL\n  LANGUAGE MODE modifier is given or if no modifier is given. For more\n  information, see\n  https://dev.mysql.com/doc/refman/5.6/en/fulltext-natural-language.htm\n  l.\n\no A boolean search interprets the search string using the rules of a\n  special query language. The string contains the words to search for.\n  It can also contain operators that specify requirements such that a\n  word must be present or absent in matching rows, or that it should be\n  weighted higher or lower than usual. Certain common words (stopwords)\n  are omitted from the search index and do not match if present in the\n  search string. The IN BOOLEAN MODE modifier specifies a boolean\n  search. For more information, see\n  https://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html.\n\no A query expansion search is a modification of a natural language\n  search. The search string is used to perform a natural language\n  search. Then words from the most relevant rows returned by the search\n  are added to the search string and the search is done again. The\n  query returns the rows from the second search. The IN NATURAL\n  LANGUAGE MODE WITH QUERY EXPANSION or WITH QUERY EXPANSION modifier\n  specifies a query expansion search. For more information, see\n  https://dev.mysql.com/doc/refman/5.6/en/fulltext-query-expansion.html\n  .\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/fulltext-search.html\n\n', 'mysql> SELECT id, body, MATCH (title,body) AGAINST\n    (\'Security implications of running MySQL as root\'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    (\'Security implications of running MySQL as root\'\n    IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n2 rows in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/fulltext-search.html');
INSERT INTO `help_topic` VALUES (240, 'CAST', 16, 'Syntax:\nCAST(expr AS type)\n\nThe CAST() function takes an expression of any type and produces a\nresult value of the specified type, similar to CONVERT(). For more\ninformation, see the description of CONVERT().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html');
INSERT INTO `help_topic` VALUES (244, '|', 17, 'Syntax:\n|\n\nBitwise OR.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 29 | 15;\n        -> 31\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (245, '&', 17, 'Syntax:\n&\n\nBitwise AND.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 29 & 15;\n        -> 13\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (246, '^', 17, 'Syntax:\n^\n\nBitwise XOR.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (247, '<<', 17, 'Syntax:\n<<\n\nShifts a longlong (BIGINT) number to the left.\n\nThe result is an unsigned 64-bit integer. The value is truncated to 64\nbits. In particular, if the shift count is greater or equal to the\nwidth of an unsigned 64-bit number, the result is zero.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 1 << 2;\n        -> 4\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (239, 'BINARY OPERATOR', 16, 'Syntax:\nBINARY expr\n\nThe BINARY operator converts the expression to a binary string (a\nstring that has the binary character set and binary collation). A\ncommon use for BINARY is to force a character string comparison to be\ndone byte by byte using numeric byte values rather than character by\ncharacter. The BINARY operator also causes trailing spaces in\ncomparisons to be significant. For information about the differences\nbetween the binary collation of the binary character set and the _bin\ncollations of nonbinary character sets, see\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-binary-collations.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html\n\n', 'mysql> SELECT \'a\' = \'A\';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'A\';\n        -> 0\nmysql> SELECT \'a\' = \'a \';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'a \';\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html');
INSERT INTO `help_topic` VALUES (241, 'CONVERT', 16, 'Syntax:\nCONVERT(expr USING transcoding_name), CONVERT(expr,type)\n\nThe CONVERT() function takes an expression of any type and produces a\nresult value of the specified type.\n\nCONVERT(... USING ...) is standard SQL syntax. The non-USING form of\nCONVERT() is ODBC syntax.\n\nCONVERT(expr USING transcoding_name) converts data between different\ncharacter sets. In MySQL, transcoding names are the same as the\ncorresponding character set names. For example, this statement converts\nthe string \'abc\' in the default character set to the corresponding\nstring in the utf8 character set:\n\nSELECT CONVERT(\'abc\' USING utf8);\n\nCONVERT(expr, type) syntax (without USING) takes an expression and a\ntype value specifying the result type. This operation may also be\nexpressed as CAST(expr AS type), which is equivalent. These type values\nare permitted:\n\no BINARY[(N)]\n\n  Produces a string with the BINARY data type. For a description of how\n  this affects comparisons, see\n  https://dev.mysql.com/doc/refman/5.6/en/binary-varbinary.html. If the\n  optional length N is given, BINARY(N) causes the cast to use no more\n  than N bytes of the argument. Values shorter than N bytes are padded\n  with 0x00 bytes to a length of N.\n\no CHAR[(N)] [charset_info]\n\n  Produces a string with the CHAR data type. If the optional length N\n  is given, CHAR(N) causes the cast to use no more than N characters of\n  the argument. No padding occurs for values shorter than N characters.\n\n  With no charset_info clause, CHAR produces a string with the default\n  character set. To specify the character set explicitly, these\n  charset_info values are permitted:\n\n  o CHARACTER SET charset_name: Produces a string with the given\n    character set.\n\n  o ASCII: Shorthand for CHARACTER SET latin1.\n\n  o UNICODE: Shorthand for CHARACTER SET ucs2.\n\n  In all cases, the string has the character set default collation.\n\no DATE\n\n  Produces a DATE value.\n\no DATETIME\n\n  Produces a DATETIME value.\n\no DECIMAL[(M[,D])]\n\n  Produces a DECIMAL value. If the optional M and D values are given,\n  they specify the maximum number of digits (the precision) and the\n  number of digits following the decimal point (the scale).\n\no NCHAR[(N)]\n\n  Like CHAR, but produces a string with the national character set. See\n  https://dev.mysql.com/doc/refman/5.6/en/charset-national.html.\n\n  Unlike CHAR, NCHAR does not permit trailing character set information\n  to be specified.\n\no SIGNED [INTEGER]\n\n  Produces a signed integer value.\n\no TIME\n\n  Produces a TIME value.\n\no UNSIGNED [INTEGER]\n\n  Produces an unsigned integer value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/cast-functions.html');
INSERT INTO `help_topic` VALUES (243, 'UPDATEXML', 16, 'Syntax:\nUpdateXML(xml_target, xpath_expr, new_xml)\n\nThis function replaces a single portion of a given fragment of XML\nmarkup xml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an\nXPath expression xpath_expr supplied by the user.\n\nIf no expression matching xpath_expr is found, or if multiple matches\nare found, the function returns the original xml_target XML fragment.\nAll three arguments should be strings.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/xml-functions.html\n\n', 'mysql> SELECT\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a\', \'<e>fff</e>\') AS val1,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/b\', \'<e>fff</e>\') AS val2,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'//b\', \'<e>fff</e>\') AS val3,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val4,\n    ->   UpdateXML(\'<a><d></d><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n', 'https://dev.mysql.com/doc/refman/5.6/en/xml-functions.html');
INSERT INTO `help_topic` VALUES (248, '>>', 17, 'Syntax:\n>>\n\nShifts a longlong (BIGINT) number to the right.\n\nThe result is an unsigned 64-bit integer. The value is truncated to 64\nbits. In particular, if the shift count is greater or equal to the\nwidth of an unsigned 64-bit number, the result is zero.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 4 >> 2;\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (249, '~', 17, 'Syntax:\n~\n\nInvert all bits.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT 5 & ~1;\n        -> 4\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (250, 'BIT_COUNT', 17, 'Syntax:\nBIT_COUNT(N)\n\nReturns the number of bits that are set in the argument N as an\nunsigned 64-bit integer, or NULL if the argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html\n\n', 'mysql> SELECT BIT_COUNT(29), BIT_COUNT(b\'101010\');\n        -> 4, 3\n', 'https://dev.mysql.com/doc/refman/5.6/en/bit-functions.html');
INSERT INTO `help_topic` VALUES (251, 'AES_DECRYPT', 18, 'Syntax:\nAES_DECRYPT(crypt_str,key_str[,init_vector])\n\nThis function decrypts data using the official AES (Advanced Encryption\nStandard) algorithm. For more information, see the description of\nAES_ENCRYPT().\n\nThe optional initialization vector argument, init_vector, is available\nas of MySQL 5.6.17. As of that version, statements that use\nAES_DECRYPT() are unsafe for statement-based replication and cannot be\nstored in the query cache.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (253, 'COMPRESS', 18, 'Syntax:\nCOMPRESS(string_to_compress)\n\nCompresses a string and returns the result as a binary string. This\nfunction requires MySQL to have been compiled with a compression\nlibrary such as zlib. Otherwise, the return value is always NULL. The\ncompressed string can be uncompressed with UNCOMPRESS().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT LENGTH(COMPRESS(REPEAT(\'a\',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(\'\'));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS(\'a\'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT(\'a\',16)));\n        -> 15\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (254, 'DECODE', 18, 'Syntax:\nDECODE(crypt_str,pass_str)\n\nDecrypts the encrypted string crypt_str using pass_str as the password.\ncrypt_str should be a string returned from ENCODE().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (242, 'EXTRACTVALUE', 16, 'Syntax:\nExtractValue(xml_frag, xpath_expr)\n\nExtractValue() takes two string arguments, a fragment of XML markup\nxml_frag and an XPath expression xpath_expr (also known as a locator);\nit returns the text (CDATA) of the first text node which is a child of\nthe element or elements matched by the XPath expression.\n\nUsing this function is the equivalent of performing a match using the\nxpath_expr after appending /text(). In other words,\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b\') and\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b/text()\') produce the same\nresult.\n\nIf multiple matches are found, the content of the first child text node\nof each matching element is returned (in the order matched) as a\nsingle, space-delimited string.\n\nIf no matching text node is found for the expression (including the\nimplicit /text())---for whatever reason, as long as xpath_expr is\nvalid, and xml_frag consists of elements which are properly nested and\nclosed---an empty string is returned. No distinction is made between a\nmatch on an empty element and no match at all. This is by design.\n\nIf you need to determine whether no matching element was found in\nxml_frag or such an element was found but contained no child text\nnodes, you should test the result of an expression that uses the XPath\ncount() function. For example, both of these statements return an empty\nstring, as shown here:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\n*Note*:\n\nIn MySQL 5.6.28 and MySQL 5.6.29, when ExtractValue() failed to find a\nmatch for the supplied expression, it returned NULL. This issue was\nresolved in MySQL 5.6.30. (Bug #22552615)\n\nHowever, you can determine whether there was actually a matching\nelement using the following:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)\n\n*Important*:\n\nExtractValue() returns only CDATA, and does not return any tags that\nmight be contained within a matching tag, nor any of their content (see\nthe result returned as val1 in the following example).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/xml-functions.html\n\n', 'mysql> SELECT\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a\') AS val1,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a/b\') AS val2,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'//b\') AS val3,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/b\') AS val4,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b><b>eee</b></a>\', \'//b\') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/xml-functions.html');
INSERT INTO `help_topic` VALUES (255, 'DES_DECRYPT', 18, 'Syntax:\nDES_DECRYPT(crypt_str[,key_str])\n\nDecrypts a string encrypted with DES_ENCRYPT(). If an error occurs,\nthis function returns NULL.\n\nThis function works only if MySQL has been configured with SSL support.\nSee https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html.\n\nIf no key_str argument is given, DES_DECRYPT() examines the first byte\nof the encrypted string to determine the DES key number that was used\nto encrypt the original string, and then reads the key from the DES key\nfile to decrypt the message. For this to work, the user must have the\nSUPER privilege. The key file can be specified with the --des-key-file\nserver option.\n\nIf you pass this function a key_str argument, that string is used as\nthe key for decrypting the message.\n\nIf the crypt_str argument does not appear to be an encrypted string,\nMySQL returns the given crypt_str.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (256, 'DES_ENCRYPT', 18, 'Syntax:\nDES_ENCRYPT(str[,{key_num|key_str}])\n\nEncrypts the string with the given key using the Triple-DES algorithm.\n\nThis function works only if MySQL has been configured with SSL support.\nSee https://dev.mysql.com/doc/refman/5.6/en/encrypted-connections.html.\n\nThe encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key number\n(0 to 9) from the DES key file is used. With a key_str argument, the\ngiven key string is used to encrypt str.\n\nThe key file can be specified with the --des-key-file server option.\n\nThe return string is a binary string where the first character is\nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.\n\nThe 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.\n\nThe string length for the result is given by this formula:\n\nnew_len = orig_len + (8 - (orig_len % 8)) + 1\n\nEach line in the DES key file has the following format:\n\nkey_num des_key_str\n\nEach key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used to\nencrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().\n\nYou can tell MySQL to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.\n\nOne benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT customer_address FROM customer_table \n     > WHERE crypted_credit_card = DES_ENCRYPT(\'credit_card_number\');\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (257, 'ENCODE', 18, 'Syntax:\nENCODE(str,pass_str)\n\nEncrypt str using pass_str as the password. The result is a binary\nstring of the same length as str. To decrypt the result, use DECODE().\n\nThe ENCODE() function should no longer be used. If you still need to\nuse ENCODE(), a salt value must be used with it to reduce risk. For\nexample:\n\nENCODE(\'cleartext\', CONCAT(\'my_random_salt\',\'my_secret_password\'))\n\nA new random salt value must be used whenever a password is updated.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (252, 'AES_ENCRYPT', 18, 'Syntax:\nAES_ENCRYPT(str,key_str[,init_vector])\n\nAES_ENCRYPT() and AES_DECRYPT() implement encryption and decryption of\ndata using the official AES (Advanced Encryption Standard) algorithm,\npreviously known as \"Rijndael.\" The AES standard permits various key\nlengths. By default these functions implement AES with a 128-bit key\nlength. As of MySQL 5.6.17, key lengths of 196 or 256 bits can be used,\nas described later. The key length is a trade off between performance\nand security.\n\nAES_ENCRYPT() encrypts the string str using the key string key_str and\nreturns a binary string containing the encrypted output. AES_DECRYPT()\ndecrypts the encrypted string crypt_str using the key string key_str\nand returns the original plaintext string. If either function argument\nis NULL, the function returns NULL.\n\nThe str and crypt_str arguments can be any length, and padding is\nautomatically added to str so it is a multiple of a block as required\nby block-based algorithms such as AES. This padding is automatically\nremoved by the AES_DECRYPT() function. The length of crypt_str can be\ncalculated using this formula:\n\n16 * (trunc(string_length / 16) + 1)\n\nFor a key length of 128 bits, the most secure way to pass a key to the\nkey_str argument is to create a truly random 128-bit value and pass it\nas a binary value. For example:\n\nINSERT INTO t\nVALUES (1,AES_ENCRYPT(\'text\',UNHEX(\'F3229A0B371ED2D9441B830D21A390C3\')));\n\nA passphrase can be used to generate an AES key by hashing the\npassphrase. For example:\n\nINSERT INTO t\nVALUES (1,AES_ENCRYPT(\'text\', UNHEX(SHA2(\'My secret passphrase\',512))));\n\nDo not pass a password or passphrase directly to crypt_str, hash it\nfirst. Previous versions of this documentation suggested the former\napproach, but it is no longer recommended as the examples shown here\nare more secure.\n\nIf AES_DECRYPT() detects invalid data or incorrect padding, it returns\nNULL. However, it is possible for AES_DECRYPT() to return a non-NULL\nvalue (possibly garbage) if the input data or the key is invalid.\n\nAs of MySQL 5.6.17, AES_ENCRYPT() and AES_DECRYPT() permit control of\nthe block encryption mode and take an optional init_vector\ninitialization vector argument:\n\no The block_encryption_mode system variable controls the mode for\n  block-based encryption algorithms. Its default value is aes-128-ecb,\n  which signifies encryption using a key length of 128 bits and ECB\n  mode. For a description of the permitted values of this variable, see\n  https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\no The optional init_vector argument provides an initialization vector\n  for block encryption modes that require it.\n\nFor modes that require the optional init_vector argument, it must be 16\nbytes or longer (bytes in excess of 16 are ignored). An error occurs if\ninit_vector is missing.\n\nFor modes that do not require init_vector, it is ignored and a warning\nis generated if it is specified.\n\nA random string of bytes to use for the initialization vector can be\nproduced by calling RANDOM_BYTES(16). For encryption modes that require\nan initialization vector, the same vector must be used for encryption\nand decryption.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SET block_encryption_mode = \'aes-256-cbc\';\nmysql> SET @key_str = SHA2(\'My secret passphrase\',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT(\'text\',@key_str,@init_vector);\nmysql> SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector);\n+-----------------------------------------------+\n| AES_DECRYPT(@crypt_str,@key_str,@init_vector) |\n+-----------------------------------------------+\n| text                                          |\n+-----------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (258, 'ENCRYPT', 18, 'Syntax:\nENCRYPT(str[,salt])\n\nEncrypts str using the Unix crypt() system call and returns a binary\nstring. The salt argument must be a string with at least two characters\nor the result is NULL. If no salt argument is given, a random value is\nused.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT ENCRYPT(\'hello\');\n        -> \'VxuFAJXVARROc\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (259, 'MD5', 18, 'Syntax:\nMD5(str)\n\nCalculates an MD5 128-bit checksum for the string. The value is\nreturned as a string of 32 hexadecimal digits, or NULL if the argument\nwas NULL. The return value can, for example, be used as a hash key. See\nthe notes at the beginning of this section about storing hash values\nefficiently.\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT MD5(\'testing\');\n        -> \'ae2b1fca515949e5d54fb22b8ed95575\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (263, 'SHA1', 18, 'Syntax:\nSHA1(str), SHA(str)\n\nCalculates an SHA-1 160-bit checksum for the string, as described in\nRFC 3174 (Secure Hash Algorithm). The value is returned as a string of\n40 hexadecimal digits, or NULL if the argument was NULL. One of the\npossible uses for this function is as a hash key. See the notes at the\nbeginning of this section about storing hash values efficiently. SHA()\nis synonymous with SHA1().\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT SHA1(\'abc\');\n        -> \'a9993e364706816aba3e25717850c26c9cd0d89d\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (265, 'UNCOMPRESS', 18, 'Syntax:\nUNCOMPRESS(string_to_uncompress)\n\nUncompresses a string compressed by the COMPRESS() function. If the\nargument is not a compressed value, the result is NULL. This function\nrequires MySQL to have been compiled with a compression library such as\nzlib. Otherwise, the return value is always NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT UNCOMPRESS(COMPRESS(\'any string\'));\n        -> \'any string\'\nmysql> SELECT UNCOMPRESS(\'any string\');\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (266, 'UNCOMPRESSED_LENGTH', 18, 'Syntax:\nUNCOMPRESSED_LENGTH(compressed_string)\n\nReturns the length that the compressed string had before being\ncompressed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT(\'a\',30)));\n        -> 30\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (267, 'VALIDATE_PASSWORD_STRENGTH', 18, 'Syntax:\nVALIDATE_PASSWORD_STRENGTH(str)\n\nGiven an argument representing a plaintext password, this function\nreturns an integer to indicate how strong the password is. The return\nvalue ranges from 0 (weak) to 100 (strong).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (269, 'IS_FREE_LOCK', 19, 'Syntax:\nIS_FREE_LOCK(str)\n\nChecks whether the lock named str is free to use (that is, not locked).\nReturns 1 if the lock is free (no one is using the lock), 0 if the lock\nis in use, and NULL if an error occurs (such as an incorrect argument).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html');
INSERT INTO `help_topic` VALUES (260, 'OLD_PASSWORD', 18, 'Syntax:\nOLD_PASSWORD(str)\n\nOLD_PASSWORD() was added when the implementation of PASSWORD() was\nchanged in MySQL 4.1 to improve security. OLD_PASSWORD() returns the\nvalue of the pre-4.1 implementation of PASSWORD() as a string, and is\nintended to permit you to reset passwords for any pre-4.1 clients that\nneed to connect to your MySQL server without locking them out. See\nhttps://dev.mysql.com/doc/refman/5.6/en/password-hashing.html.\n\nThe return value is a string in the connection character set.\n\n*Note*:\n\nPasswords that use the pre-4.1 hashing method are less secure than\npasswords that use the native password hashing method and should be\navoided. Pre-4.1 passwords are deprecated; expect support for them to\nbe removed in a future MySQL release. Consequently, OLD_PASSWORD() is\nalso deprecated.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (261, 'PASSWORD', 18, 'Syntax:\nPASSWORD(str)\n\nReturns a hashed password string calculated from the cleartext password\nstr. The return value is a string in the connection character set, or\nNULL if the argument is NULL. This function is the SQL interface to the\nalgorithm used by the server to encrypt MySQL passwords for storage in\nthe mysql.user grant table.\n\nThe old_passwords system variable controls the password hashing method\nused by the PASSWORD() function. It also influences password hashing\nperformed by CREATE USER and GRANT statements that specify a password\nusing an IDENTIFIED BY clause.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SET old_passwords = 0;\nmysql> SELECT PASSWORD(\'mypass\'), OLD_PASSWORD(\'mypass\');\n+-------------------------------------------+------------------------+\n| PASSWORD(\'mypass\')                        | OLD_PASSWORD(\'mypass\') |\n+-------------------------------------------+------------------------+\n| *6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4 | 6f8c114b58f2ce9e       |\n+-------------------------------------------+------------------------+\n\nmysql> SET old_passwords = 1;\nmysql> SELECT PASSWORD(\'mypass\'), OLD_PASSWORD(\'mypass\');\n+--------------------+------------------------+\n| PASSWORD(\'mypass\') | OLD_PASSWORD(\'mypass\') |\n+--------------------+------------------------+\n| 6f8c114b58f2ce9e   | 6f8c114b58f2ce9e       |\n+--------------------+------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (262, 'RANDOM_BYTES', 18, 'Syntax:\nRANDOM_BYTES(len)\n\nThis function returns a binary string of len random bytes generated\nusing the random number generator of the SSL library. Permitted values\nof len range from 1 to 1024. For values outside that range, an error\noccurs.\n\nRANDOM_BYTES() can be used to provide the initialization vector for the\nAES_DECRYPT() and AES_ENCRYPT() functions. For use in that context, len\nmust be at least 16. Larger values are permitted, but bytes in excess\nof 16 are ignored.\n\nRANDOM_BYTES() generates a random value, which makes its result\nnondeterministic. Consequently, statements that use this function are\nunsafe for statement-based replication and cannot be stored in the\nquery cache.\n\nThis function is available as of MySQL 5.6.17.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (264, 'SHA2', 18, 'Syntax:\nSHA2(str, hash_length)\n\nCalculates the SHA-2 family of hash functions (SHA-224, SHA-256,\nSHA-384, and SHA-512). The first argument is the plaintext string to be\nhashed. The second argument indicates the desired bit length of the\nresult, which must have a value of 224, 256, 384, 512, or 0 (which is\nequivalent to 256). If either argument is NULL or the hash length is\nnot one of the permitted values, the return value is NULL. Otherwise,\nthe function result is a hash value containing the desired number of\nbits. See the notes at the beginning of this section about storing hash\nvalues efficiently.\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html\n\n', 'mysql> SELECT SHA2(\'abc\', 224);\n        -> \'23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/encryption-functions.html');
INSERT INTO `help_topic` VALUES (268, 'GET_LOCK', 19, 'Syntax:\nGET_LOCK(str,timeout)\n\nTries to obtain a lock with a name given by the string str, using a\ntimeout of timeout seconds. A negative timeout value means infinite\ntimeout. The lock is exclusive. While held by one session, other\nsessions cannot obtain a lock of the same name.\n\nReturns 1 if the lock was obtained successfully, 0 if the attempt timed\nout (for example, because another client has previously locked the\nname), or NULL if an error occurred (such as running out of memory or\nthe thread was killed with mysqladmin kill).\n\nA lock obtained with GET_LOCK() is released explicitly by executing\nRELEASE_LOCK() or implicitly when your session terminates (either\nnormally or abnormally). Locks obtained with GET_LOCK() are not\nreleased when transactions commit or roll back.\n\n*Important*:\n\nThe behavior of GET_LOCK() changes in MySQL 5.7. In consideration of\nfuture upgrades, limit the str value to 64 characters or less and do\nnot rely on subsequent calls to GET_LOCK() releasing previous locks.\n\nGET_LOCK() can be used to implement application locks or to simulate\nrecord locks. Names are locked on a server-wide basis. If a name has\nbeen locked within one session, GET_LOCK() blocks any request by\nanother session for a lock with the same name. This enables clients\nthat agree on a given lock name to use the name to perform cooperative\nadvisory locking. But be aware that it also enables a client that is\nnot among the set of cooperating clients to lock a name, either\ninadvertently or deliberately, and thus prevent any of the cooperating\nclients from locking that name. One way to reduce the likelihood of\nthis is to use lock names that are database-specific or\napplication-specific. For example, use lock names of the form\ndb_name.str or app_name.str.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html\n\n', 'mysql> SELECT GET_LOCK(\'lock1\',10);\n        -> 1\nmysql> SELECT IS_FREE_LOCK(\'lock2\');\n        -> 1\nmysql> SELECT GET_LOCK(\'lock2\',10);\n        -> 1\nmysql> SELECT RELEASE_LOCK(\'lock2\');\n        -> 1\nmysql> SELECT RELEASE_LOCK(\'lock1\');\n        -> NULL\n', 'https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html');
INSERT INTO `help_topic` VALUES (270, 'IS_USED_LOCK', 19, 'Syntax:\nIS_USED_LOCK(str)\n\nChecks whether the lock named str is in use (that is, locked). If so,\nit returns the connection identifier of the client session that holds\nthe lock. Otherwise, it returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html');
INSERT INTO `help_topic` VALUES (271, 'RELEASE_LOCK', 19, 'Syntax:\nRELEASE_LOCK(str)\n\nReleases the lock named by the string str that was obtained with\nGET_LOCK(). Returns 1 if the lock was released, 0 if the lock was not\nestablished by this thread (in which case the lock is not released),\nand NULL if the named lock did not exist. The lock does not exist if it\nwas never obtained by a call to GET_LOCK() or if it has previously been\nreleased.\n\nThe DO statement is convenient to use with RELEASE_LOCK(). See [HELP\nDO].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/locking-functions.html');
INSERT INTO `help_topic` VALUES (272, 'BENCHMARK', 20, 'Syntax:\nBENCHMARK(count,expr)\n\nThe BENCHMARK() function executes the expression expr repeatedly count\ntimes. It may be used to time how quickly MySQL processes the\nexpression. The result value is 0, or NULL for inappropriate arguments\nsuch as a NULL or negative repeat count.\n\nThe intended use is from within the mysql client, which reports query\nexecution times:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT(\'hello\',\'goodbye\'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT(\'hello\',\'goodbye\')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (273, 'CHARSET', 20, 'Syntax:\nCHARSET(str)\n\nReturns the character set of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT CHARSET(\'abc\');\n        -> \'latin1\'\nmysql> SELECT CHARSET(CONVERT(\'abc\' USING utf8));\n        -> \'utf8\'\nmysql> SELECT CHARSET(USER());\n        -> \'utf8\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (274, 'COERCIBILITY', 20, 'Syntax:\nCOERCIBILITY(str)\n\nReturns the collation coercibility value of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT COERCIBILITY(\'abc\' COLLATE latin1_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY(\'abc\');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (275, 'COLLATION', 20, 'Syntax:\nCOLLATION(str)\n\nReturns the collation of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT COLLATION(\'abc\');\n        -> \'latin1_swedish_ci\'\nmysql> SELECT COLLATION(_utf8\'abc\');\n        -> \'utf8_general_ci\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (276, 'CONNECTION_ID', 20, 'Syntax:\nCONNECTION_ID()\n\nReturns the connection ID (thread ID) for the connection. Every\nconnection has an ID that is unique among the set of currently\nconnected clients.\n\nThe value returned by CONNECTION_ID() is the same type of value as\ndisplayed in the ID column of the INFORMATION_SCHEMA.PROCESSLIST table,\nthe Id column of SHOW PROCESSLIST output, and the PROCESSLIST_ID column\nof the Performance Schema threads table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT CONNECTION_ID();\n        -> 23786\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (277, 'CURRENT_USER', 20, 'Syntax:\nCURRENT_USER, CURRENT_USER()\n\nReturns the user name and host name combination for the MySQL account\nthat the server used to authenticate the current client. This account\ndetermines your access privileges. The return value is a string in the\nutf8 character set.\n\nThe value of CURRENT_USER() can differ from the value of USER().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT USER();\n        -> \'davida@localhost\'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user \'\'@\'localhost\' to\ndatabase \'mysql\'\nmysql> SELECT CURRENT_USER();\n        -> \'@localhost\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (278, 'DATABASE', 20, 'Syntax:\nDATABASE()\n\nReturns the default (current) database name as a string in the utf8\ncharacter set. If there is no default database, DATABASE() returns\nNULL. Within a stored routine, the default database is the database\nthat the routine is associated with, which is not necessarily the same\nas the database that is the default in the calling context.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT DATABASE();\n        -> \'test\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (279, 'FOUND_ROWS', 20, 'Syntax:\nFOUND_ROWS()\n\nA SELECT statement may include a LIMIT clause to restrict the number of\nrows the server returns to the client. In some cases, it is desirable\nto know how many rows the statement would have returned without the\nLIMIT, but without running the statement again. To obtain this row\ncount, include an SQL_CALC_FOUND_ROWS option in the SELECT statement,\nand then invoke FOUND_ROWS() afterward:\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (280, 'LAST_INSERT_ID', 20, 'Syntax:\nLAST_INSERT_ID(), LAST_INSERT_ID(expr)\n\nWith no argument, LAST_INSERT_ID() returns a 64-bit value representing\nthe first automatically generated value successfully inserted for an\nAUTO_INCREMENT column as a result of the most recently executed INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged if no rows\nare successfully inserted.\n\nWith an argument, LAST_INSERT_ID() returns an unsigned integer.\n\nFor example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:\n\nmysql> SELECT LAST_INSERT_ID();\n        -> 195\n\nThe currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() remains stable\nin the second statement; its value for the second and later rows is not\naffected by the earlier row insertions. (However, if you mix references\nto LAST_INSERT_ID() and LAST_INSERT_ID(expr), the effect is undefined.)\n\nIf the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of LAST_INSERT_ID()\nis left undefined. For manual ROLLBACK, the value of LAST_INSERT_ID()\nis not restored to that before the transaction; it remains as it was at\nthe point of the ROLLBACK.\n\nPrior to MySQL 5.6.15, this function was not replicated correctly if\nreplication filtering rules were in use. (Bug #17234370, Bug #69861)\n\nWithin the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:\n\no If a stored procedure executes statements that change the value of\n  LAST_INSERT_ID(), the changed value is seen by statements that follow\n  the procedure call.\n\no For stored functions and triggers that change the value, the value is\n  restored when the function or trigger ends, so statements following\n  it do not see a changed value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (282, 'SCHEMA', 20, 'Syntax:\nSCHEMA()\n\nThis function is a synonym for DATABASE().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (281, 'ROW_COUNT', 20, 'Syntax:\nROW_COUNT()\n\nROW_COUNT() returns a value as follows:\n\no DDL statements: 0. This applies to statements such as CREATE TABLE or\n  DROP TABLE.\n\no DML statements other than SELECT: The number of affected rows. This\n  applies to statements such as UPDATE, INSERT, or DELETE (as before),\n  but now also to statements such as ALTER TABLE and LOAD DATA.\n\no SELECT: -1 if the statement returns a result set, or the number of\n  rows \"affected\" if it does not. For example, for SELECT * FROM t1,\n  ROW_COUNT() returns -1. For SELECT * FROM t1 INTO OUTFILE\n  \'file_name\', ROW_COUNT() returns the number of rows written to the\n  file.\n\no SIGNAL statements: 0.\n\nFor UPDATE statements, the affected-rows value by default is the number\nof rows actually changed. If you specify the CLIENT_FOUND_ROWS flag to\nmysql_real_connect()\n(https://dev.mysql.com/doc/c-api/5.6/en/mysql-real-connect.html) when\nconnecting to mysqld, the affected-rows value is the number of rows\n\"found\"; that is, matched by the WHERE clause.\n\nFor REPLACE statements, the affected-rows value is 2 if the new row\nreplaced an old row, because in this case, one row was inserted after\nthe duplicate was deleted.\n\nFor INSERT ... ON DUPLICATE KEY UPDATE statements, the affected-rows\nvalue per row is 1 if the row is inserted as a new row, 2 if an\nexisting row is updated, and 0 if an existing row is set to its current\nvalues. If you specify the CLIENT_FOUND_ROWS flag, the affected-rows\nvalue is 1 (not 0) if an existing row is set to its current values.\n\nThe ROW_COUNT() value is similar to the value from the\nmysql_affected_rows()\n(https://dev.mysql.com/doc/c-api/5.6/en/mysql-affected-rows.html) C API\nfunction and the row count that the mysql client displays following\nstatement execution.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (283, 'SESSION_USER', 20, 'Syntax:\nSESSION_USER()\n\nSESSION_USER() is a synonym for USER().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (284, 'SYSTEM_USER', 20, 'Syntax:\nSYSTEM_USER()\n\nSYSTEM_USER() is a synonym for USER().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (285, 'USER', 20, 'Syntax:\nUSER()\n\nReturns the current MySQL user name and host name as a string in the\nutf8 character set.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT USER();\n        -> \'davida@localhost\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (286, 'VERSION', 20, 'Syntax:\nVERSION()\n\nReturns a string that indicates the MySQL server version. The string\nuses the utf8 character set. The value might have a suffix in addition\nto the version number. See the description of the version system\nvariable in\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/information-functions.html\n\n', 'mysql> SELECT VERSION();\n        -> \'5.6.51-standard\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/information-functions.html');
INSERT INTO `help_topic` VALUES (287, 'GEOMCOLLFROMTEXT', 22, 'GeomCollFromText(wkt [, srid]), GeometryCollectionFromText(wkt [,\nsrid])\n\nST_GeomCollFromText(), ST_GeometryCollectionFromText(),\nGeomCollFromText(), and GeometryCollectionFromText() are synonyms. For\nmore information, see the description of ST_GeomCollFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (288, 'GEOMFROMTEXT', 22, 'GeomFromText(wkt [, srid]), GeometryFromText(wkt [, srid])\n\nST_GeomFromText(), ST_GeometryFromText(), GeomFromText(), and\nGeometryFromText() are synonyms. For more information, see the\ndescription of ST_GeomFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (289, 'LINEFROMTEXT', 22, 'LineFromText(wkt [, srid]), LineStringFromText(wkt [, srid])\n\nST_LineFromText(), ST_LineStringFromText(), LineFromText(), and\nLineStringFromText() are synonyms. For more information, see the\ndescription of ST_LineFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (290, 'MLINEFROMTEXT', 22, 'MLineFromText(wkt [, srid]), MultiLineStringFromText(wkt [, srid])\n\nConstructs a MultiLineString value using its WKT representation and\nSRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (291, 'MPOINTFROMTEXT', 22, 'MPointFromText(wkt [, srid]), MultiPointFromText(wkt [, srid])\n\nConstructs a MultiPoint value using its WKT representation and SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (292, 'MPOLYFROMTEXT', 22, 'MPolyFromText(wkt [, srid]), MultiPolygonFromText(wkt [, srid])\n\nConstructs a MultiPolygon value using its WKT representation and SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (293, 'POINTFROMTEXT', 22, 'PointFromText(wkt [, srid])\n\nST_PointFromText() and PointFromText() are synonyms. For more\ninformation, see the description of ST_PointFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (294, 'POLYFROMTEXT', 22, 'PolyFromText(wkt [, srid]), PolygonFromText(wkt [, srid])\n\nST_PolyFromText(), ST_PolygonFromText(), PolyFromText(), and\nPolygonFromText() are synonyms. For more information, see the\ndescription of ST_PolyFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (295, 'ST_GEOMCOLLFROMTEXT', 22, 'ST_GeomCollFromText(wkt [, srid]), ST_GeometryCollectionFromText(wkt [,\nsrid])\n\nConstructs a GeometryCollection value using its WKT representation and\nSRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', 'mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (296, 'ST_GEOMFROMTEXT', 22, 'ST_GeomFromText(wkt [, srid]), ST_GeometryFromText(wkt [, srid])\n\nConstructs a geometry value of any type using its WKT representation\nand SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (297, 'ST_LINEFROMTEXT', 22, 'ST_LineFromText(wkt [, srid]), ST_LineStringFromText(wkt [, srid])\n\nConstructs a LineString value using its WKT representation and SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (298, 'ST_POINTFROMTEXT', 22, 'ST_PointFromText(wkt [, srid])\n\nConstructs a Point value using its WKT representation and SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (299, 'ST_POLYFROMTEXT', 22, 'ST_PolyFromText(wkt [, srid]), ST_PolygonFromText(wkt [, srid])\n\nConstructs a Polygon value using its WKT representation and SRID.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkt-functions.html');
INSERT INTO `help_topic` VALUES (300, 'GEOMCOLLFROMWKB', 23, 'GeomCollFromWKB(wkb [, srid]), GeometryCollectionFromWKB(wkb [, srid])\n\nST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(),\nGeomCollFromWKB(), and GeometryCollectionFromWKB() are synonyms. For\nmore information, see the description of ST_GeomCollFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (301, 'GEOMFROMWKB', 23, 'GeomFromWKB(wkb [, srid]), GeometryFromWKB(wkb [, srid])\n\nST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB(), and\nGeometryFromWKB() are synonyms. For more information, see the\ndescription of ST_GeomFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (302, 'LINEFROMWKB', 23, 'LineFromWKB(wkb [, srid]), LineStringFromWKB(wkb [, srid])\n\nST_LineFromWKB(), ST_LineStringFromWKB(), LineFromWKB(), and\nLineStringFromWKB() are synonyms. For more information, see the\ndescription of ST_LineFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (303, 'MLINEFROMWKB', 23, 'MLineFromWKB(wkb [, srid]), MultiLineStringFromWKB(wkb [, srid])\n\nConstructs a MultiLineString value using its WKB representation and\nSRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (304, 'MPOINTFROMWKB', 23, 'MPointFromWKB(wkb [, srid]), MultiPointFromWKB(wkb [, srid])\n\nConstructs a MultiPoint value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (305, 'MPOLYFROMWKB', 23, 'MPolyFromWKB(wkb [, srid]), MultiPolygonFromWKB(wkb [, srid])\n\nConstructs a MultiPolygon value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (306, 'POINTFROMWKB', 23, 'PointFromWKB(wkb [, srid])\n\nST_PointFromWKB() and PointFromWKB() are synonyms. For more\ninformation, see the description of ST_PointFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (307, 'POLYFROMWKB', 23, 'PolyFromWKB(wkb [, srid]), PolygonFromWKB(wkb [, srid])\n\nST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB(), and\nPolygonFromWKB() are synonyms. For more information, see the\ndescription of ST_PolyFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (308, 'ST_GEOMCOLLFROMWKB', 23, 'ST_GeomCollFromWKB(wkb [, srid]), ST_GeometryCollectionFromWKB(wkb [,\nsrid])\n\nConstructs a GeometryCollection value using its WKB representation and\nSRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (309, 'ST_GEOMFROMWKB', 23, 'ST_GeomFromWKB(wkb [, srid]), ST_GeometryFromWKB(wkb [, srid])\n\nConstructs a geometry value of any type using its WKB representation\nand SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (310, 'ST_LINEFROMWKB', 23, 'ST_LineFromWKB(wkb [, srid]), ST_LineStringFromWKB(wkb [, srid])\n\nConstructs a LineString value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (311, 'ST_POINTFROMWKB', 23, 'ST_PointFromWKB(wkb [, srid])\n\nConstructs a Point value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (312, 'ST_POLYFROMWKB', 23, 'ST_PolyFromWKB(wkb [, srid]), ST_PolygonFromWKB(wkb [, srid])\n\nConstructs a Polygon value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-wkb-functions.html');
INSERT INTO `help_topic` VALUES (313, 'GEOMETRYCOLLECTION', 24, 'GeometryCollection(g [, g] ...)\n\nConstructs a GeometryCollection value from the geometry arguments.\n\nIf an argument contains a nonsupported geometry, the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (314, 'LINESTRING', 24, 'LineString(pt [, pt] ...)\n\nConstructs a LineString value from a number of Point or WKB Point\narguments. If the number of arguments is less than two, the return\nvalue is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (315, 'MULTILINESTRING', 24, 'MultiLineString(ls [, ls] ...)\n\nConstructs a MultiLineString value using LineString or WKB LineString\narguments.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (316, 'MULTIPOINT', 24, 'MultiPoint(pt [, pt2] ...)\n\nConstructs a MultiPoint value using Point or WKB Point arguments.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (317, 'MULTIPOLYGON', 24, 'MultiPolygon(poly [, poly] ...)\n\nConstructs a MultiPolygon value from a set of Polygon or WKB Polygon\narguments.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (318, 'POINT', 24, 'Point(x, y)\n\nConstructs a Point using its coordinates.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (319, 'POLYGON', 24, 'Polygon(ls [, ls] ...)\n\nConstructs a Polygon value from a number of LineString or WKB\nLineString arguments. If any argument does not represent a LinearRing\n(that is, not a closed and simple LineString), the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-mysql-specific-functions.html');
INSERT INTO `help_topic` VALUES (320, 'ASBINARY', 23, 'AsBinary(g), AsWKB(g)\n\nST_AsBinary(), ST_AsWKB(), AsBinary(), and AsWKB() are synonyms. For\nmore information, see the description of ST_AsBinary().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html');
INSERT INTO `help_topic` VALUES (321, 'ASTEXT', 23, 'AsText(g), AsWKT(g)\n\nST_AsText(), ST_AsWKT(), AsText(), and AsWKT() are synonyms. For more\ninformation, see the description of ST_AsText().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html');
INSERT INTO `help_topic` VALUES (322, 'ST_ASBINARY', 23, 'ST_AsBinary(g), ST_AsWKB(g)\n\nConverts a value in internal geometry format to its WKB representation\nand returns the binary result.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html\n\n', 'SELECT ST_AsBinary(g) FROM geom;\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html');
INSERT INTO `help_topic` VALUES (323, 'ST_ASTEXT', 23, 'ST_AsText(g), ST_AsWKT(g)\n\nConverts a value in internal geometry format to its WKT representation\nand returns the string result.\n\nThe result is NULL if the geometry argument is NULL or not a\nsyntactically well-formed geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html\n\n', 'mysql> SET @g = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-format-conversion-functions.html');
INSERT INTO `help_topic` VALUES (324, 'DIMENSION', 25, 'Dimension(g)\n\nST_Dimension() and Dimension() are synonyms. For more information, see\nthe description of ST_Dimension().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (325, 'ENVELOPE', 25, 'Envelope(g)\n\nST_Envelope() and Envelope() are synonyms. For more information, see\nthe description of ST_Envelope().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (326, 'GEOMETRYTYPE', 25, 'GeometryType(g)\n\nST_GeometryType() and GeometryType() are synonyms. For more\ninformation, see the description of ST_GeometryType().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (327, 'ISEMPTY', 25, 'IsEmpty(g)\n\nST_IsEmpty() and IsEmpty() are synonyms. For more information, see the\ndescription of ST_IsEmpty().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (328, 'ISSIMPLE', 25, 'IsSimple(g)\n\nST_IsSimple() and IsSimple() are synonyms. For more information, see\nthe description of ST_IsSimple().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (329, 'SRID', 25, 'SRID(g)\n\nST_SRID() and SRID() are synonyms. For more information, see the\ndescription of ST_SRID().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (330, 'ST_DIMENSION', 25, 'ST_Dimension(g)\n\nReturns the inherent dimension of the geometry value g, or NULL if the\nargument is NULL. The dimension can be −1, 0, 1, or 2. The meaning of\nthese values is given in\nhttps://dev.mysql.com/doc/refman/5.6/en/gis-class-geometry.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', 'mysql> SELECT ST_Dimension(ST_GeomFromText(\'LineString(1 1,2 2)\'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText(\'LineString(1 1,2 2)\')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (332, 'ST_GEOMETRYTYPE', 25, 'ST_GeometryType(g)\n\nReturns a binary string indicating the name of the geometry type of\nwhich the geometry instance g is a member, or NULL if the argument is\nNULL. The name corresponds to one of the instantiable Geometry\nsubclasses.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', 'mysql> SELECT ST_GeometryType(ST_GeomFromText(\'POINT(1 1)\'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText(\'POINT(1 1)\')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (333, 'ST_ISEMPTY', 25, 'ST_IsEmpty(g)\n\nThis function is a placeholder that returns 0 for any valid geometry\nvalue, 1 for any invalid geometry value, or NULL if the argument is\nNULL.\n\nMySQL does not support GIS EMPTY values such as POINT EMPTY.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (334, 'ST_ISSIMPLE', 25, 'ST_IsSimple(g)\n\nReturns 1 if the geometry value g has no anomalous geometric points,\nsuch as self-intersection or self-tangency. ST_IsSimple() returns 0 if\nthe argument is not simple, and NULL if the argument is NULL.\n\nThe descriptions of the instantiable geometric classes given under\nhttps://dev.mysql.com/doc/refman/5.6/en/opengis-geometry-model.html\nincludes the specific conditions that cause class instances to be\nclassified as not simple.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (335, 'ST_SRID', 25, 'ST_SRID(g)\n\nReturns an integer indicating the spatial reference system ID\nassociated with the geometry value g, or NULL if the argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', 'mysql> SELECT ST_SRID(ST_GeomFromText(\'LineString(1 1,2 2)\',101));\n+-----------------------------------------------------+\n| ST_SRID(ST_GeomFromText(\'LineString(1 1,2 2)\',101)) |\n+-----------------------------------------------------+\n|                                                 101 |\n+-----------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (331, 'ST_ENVELOPE', 25, 'ST_Envelope(g)\n\nReturns the minimum bounding rectangle (MBR) for the geometry value g,\nor NULL if the argument is NULL. The result is returned as a Polygon\nvalue that is defined by the corner points of the bounding box:\n\nPOLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html\n\n', 'mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,2 2)\')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,2 2)\'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-general-property-functions.html');
INSERT INTO `help_topic` VALUES (336, 'ST_X', 26, 'ST_X(p)\n\nReturns the X-coordinate value for the Point object p as a\ndouble-precision number.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html\n\n', 'mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html');
INSERT INTO `help_topic` VALUES (337, 'ST_Y', 26, 'ST_Y(p)\n\nReturns the Y-coordinate value for the Point object p as a\ndouble-precision number.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html\n\n', 'mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html');
INSERT INTO `help_topic` VALUES (338, 'X', 26, 'X(p)\n\nST_X() and X() are synonyms. For more information, see the description\nof ST_X().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html');
INSERT INTO `help_topic` VALUES (339, 'Y', 26, 'Y(p)\n\nST_Y() and Y() are synonyms. For more information, see the description\nof ST_Y().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-point-property-functions.html');
INSERT INTO `help_topic` VALUES (340, 'ENDPOINT', 27, 'EndPoint(ls)\n\nST_EndPoint() and EndPoint() are synonyms. For more information, see\nthe description of ST_EndPoint().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (341, 'GLENGTH', 27, 'GLength(ls)\n\nReturns a double-precision number indicating the length of the\nLineString or MultiLineString value ls in its associated spatial\nreference. The length of a MultiLineString value is equal to the sum of\nthe lengths of its elements. If the argument is NULL or an empty\ngeometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT GLength(GeomFromText(@ls));\n+----------------------------+\n| GLength(GeomFromText(@ls)) |\n+----------------------------+\n|         2.8284271247461903 |\n+----------------------------+\n\nmysql> SET @mls = \'MultiLineString((1 1,2 2,3 3),(4 4,5 5))\';\nmysql> SELECT GLength(GeomFromText(@mls));\n+-----------------------------+\n| GLength(GeomFromText(@mls)) |\n+-----------------------------+\n|           4.242640687119286 |\n+-----------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (342, 'ISCLOSED', 27, 'IsClosed(ls)\n\nST_IsClosed() and IsClosed() are synonyms. For more information, see\nthe description of ST_IsClosed().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (343, 'NUMPOINTS', 27, 'NumPoints(ls)\n\nST_NumPoints() and NumPoints() are synonyms. For more information, see\nthe description of ST_NumPoints().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (344, 'POINTN', 27, 'PointN(ls, N)\n\nST_PointN() and PointN() are synonyms. For more information, see the\ndescription of ST_PointN().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (345, 'ST_ENDPOINT', 27, 'ST_EndPoint(ls)\n\nReturns the Point that is the endpoint of the LineString value ls. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (347, 'ST_NUMPOINTS', 27, 'ST_NumPoints(ls)\n\nReturns the number of Point objects in the LineString value ls. If the\nargument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (348, 'ST_POINTN', 27, 'ST_PointN(ls, N)\n\nReturns the N-th Point in the Linestring value ls. Points are numbered\nbeginning with 1. If any argument is NULL or the geometry argument is\nan empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (349, 'ST_STARTPOINT', 27, 'ST_StartPoint(ls)\n\nReturns the Point that is the start point of the LineString value ls.\nIf the argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (346, 'ST_ISCLOSED', 27, 'ST_IsClosed(ls)\n\nFor a LineString value ls, ST_IsClosed() returns 1 if ls is closed\n(that is, its ST_StartPoint() and ST_EndPoint() values are the same).\nIf the argument is NULL or an empty geometry, the return value is NULL.\n\nFor a MultiLineString value ls, ST_IsClosed() returns 1 if ls is closed\n(that is, the ST_StartPoint() and ST_EndPoint() values are the same for\neach LineString in ls).\n\nST_IsClosed() returns 0 if ls is not closed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', 'mysql> SET @ls1 = \'LineString(1 1,2 2,3 3,2 2)\';\nmysql> SET @ls2 = \'LineString(1 1,2 2,3 3,1 1)\';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = \'MultiLineString((1 1,2 2,3 3),(4 4,5 5))\';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (350, 'STARTPOINT', 27, 'StartPoint(ls)\n\nST_StartPoint() and StartPoint() are synonyms. For more information,\nsee the description of ST_StartPoint().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-linestring-property-functions.html');
INSERT INTO `help_topic` VALUES (351, 'AREA', 28, 'Area({poly|mpoly})\n\nST_Area() and Area() are synonyms. For more information, see the\ndescription of ST_Area().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (352, 'CENTROID', 28, 'Centroid({poly|mpoly})\n\nST_Centroid() and Centroid() are synonyms. For more information, see\nthe description of ST_Centroid().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (353, 'EXTERIORRING', 28, 'ExteriorRing(poly)\n\nST_ExteriorRing() and ExteriorRing() are synonyms. For more\ninformation, see the description of ST_ExteriorRing().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (354, 'INTERIORRINGN', 28, 'InteriorRingN(poly, N)\n\nST_InteriorRingN() and InteriorRingN() are synonyms. For more\ninformation, see the description of ST_InteriorRingN().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (355, 'NUMINTERIORRINGS', 28, 'NumInteriorRings(poly)\n\nST_NumInteriorRings() and NumInteriorRings() are synonyms. For more\ninformation, see the description of ST_NumInteriorRings().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (356, 'ST_AREA', 28, 'ST_Area({poly|mpoly})\n\nReturns a double-precision number indicating the area of the Polygon or\nMultiPolygon argument, as measured in its spatial reference system. For\narguments of dimension 0 or 1, the result is 0. If the argument is an\nempty geometry the return value is 0. If the argument is NULL the\nreturn value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', 'mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))\';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       \'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))\';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (357, 'ST_CENTROID', 28, 'ST_Centroid({poly|mpoly})\n\nReturns the mathematical centroid for the Polygon or MultiPolygon\nargument as a Point. The result is not guaranteed to be on the\nMultiPolygon. If the argument is NULL or an empty geometry, the return\nvalue is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', 'mysql> SET @poly =\n       ST_GeomFromText(\'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))\');\nmysql> SELECT GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+---------------------+--------------------------------------------+\n| GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+---------------------+--------------------------------------------+\n| POLYGON             | POINT(4.958333333333333 4.958333333333333) |\n+---------------------+--------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (358, 'ST_EXTERIORRING', 28, 'ST_ExteriorRing(poly)\n\nReturns the exterior ring of the Polygon value poly as a LineString. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', 'mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (360, 'ST_NUMINTERIORRINGS', 28, 'ST_NumInteriorRings(poly)\n\nReturns the number of interior rings in the Polygon value poly. If the\nargument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', 'mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (361, 'GEOMETRYN', 29, 'GeometryN(gc, N)\n\nST_GeometryN() and GeometryN() are synonyms. For more information, see\nthe description of ST_GeometryN().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html');
INSERT INTO `help_topic` VALUES (359, 'ST_INTERIORRINGN', 28, 'ST_InteriorRingN(poly, N)\n\nReturns the N-th interior ring for the Polygon value poly as a\nLineString. Rings are numbered beginning with 1. If the argument is\nNULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html\n\n', 'mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-polygon-property-functions.html');
INSERT INTO `help_topic` VALUES (362, 'NUMGEOMETRIES', 29, 'NumGeometries(gc)\n\nST_NumGeometries() and NumGeometries() are synonyms. For more\ninformation, see the description of ST_NumGeometries().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html');
INSERT INTO `help_topic` VALUES (363, 'ST_GEOMETRYN', 29, 'ST_GeometryN(gc, N)\n\nReturns the N-th geometry in the GeometryCollection value gc.\nGeometries are numbered beginning with 1. If any argument is NULL or\nthe geometry argument is an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html\n\n', 'mysql> SET @gc = \'GeometryCollection(Point(1 1),LineString(2 2, 3 3))\';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html');
INSERT INTO `help_topic` VALUES (364, 'ST_NUMGEOMETRIES', 29, 'ST_NumGeometries(gc)\n\nReturns the number of geometries in the GeometryCollection value gc. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html\n\n', 'mysql> SET @gc = \'GeometryCollection(Point(1 1),LineString(2 2, 3 3))\';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/gis-geometrycollection-property-functions.html');
INSERT INTO `help_topic` VALUES (365, 'BUFFER', 29, 'Buffer(g, d)\n\nST_Buffer() and Buffer() are synonyms. For more information, see the\ndescription of ST_Buffer().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (366, 'ST_BUFFER', 29, 'ST_Buffer(g, d)\n\nReturns a geometry that represents all points whose distance from the\ngeometry value g is less than or equal to a distance of d, or NULL if\nany argument is NULL.\n\nST_Buffer() supports negative distances for polygons, multipolygons,\nand geometry collections containing polygons or multipolygons. For\npoint, multipoint, linestring, multilinestring, and geometry\ncollections not containing any polygons or multipolygons, ST_Buffer()\nwith a negative distance returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (367, 'ST_DIFFERENCE', 29, 'ST_Difference(g1, g2)\n\nReturns a geometry that represents the point set difference of the\ngeometry values g1 and g2. If any argument is NULL, the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', 'mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (368, 'ST_INTERSECTION', 29, 'ST_Intersection(g1, g2)\n\nReturns a geometry that represents the point set intersection of the\ngeometry values g1 and g2. If any argument is NULL, the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', 'mysql> SET @g1 = ST_GeomFromText(\'LineString(1 1, 3 3)\');\nmysql> SET @g2 = ST_GeomFromText(\'LineString(1 3, 3 1)\');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (370, 'ST_UNION', 29, 'ST_Union(g1, g2)\n\nReturns a geometry that represents the point set union of the geometry\nvalues g1 and g2. If any argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', 'mysql> SET @g1 = ST_GeomFromText(\'LineString(1 1, 3 3)\');\nmysql> SET @g2 = ST_GeomFromText(\'LineString(1 3, 3 1)\');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(3 1,1 3)) |\n+--------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (371, 'ST_CONTAINS', 30, 'ST_Contains(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 completely contains g2. This\ntests the opposite relationship as ST_Within().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (372, 'CROSSES', 30, 'Crosses(g1, g2)\n\nST_Crosses() and Crosses() are synonyms. For more information, see the\ndescription of ST_Crosses().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (373, 'ST_CROSSES', 30, 'ST_Crosses(g1, g2)\n\nThe term spatially crosses denotes a spatial relation between two given\ngeometries that has the following properties:\n\no The two geometries intersect.\n\no Their intersection results in a geometry that has a dimension that is\n  one less than the maximum dimension of the two given geometries.\n\no Their intersection is not equal to either of the two given\n  geometries.\n\nThis function returns 1 or 0 to indicate whether g1 spatially crosses\ng2. If g1 is a Polygon or a MultiPolygon, or if g2 is a Point or a\nMultiPoint, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (374, 'ST_DISJOINT', 30, 'ST_Disjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially disjoint from (does\nnot intersect) g2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (369, 'ST_SYMDIFFERENCE', 29, 'ST_SymDifference(g1, g2)\n\nReturns a geometry that represents the point set symmetric difference\nof the geometry values g1 and g2, which is defined as:\n\ng1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)\n\nOr, in function call notation:\n\nST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))\n\nIf any argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html\n\n', 'mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT(1 1,2 2)                   |\n+---------------------------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-operator-functions.html');
INSERT INTO `help_topic` VALUES (375, 'ST_DISTANCE', 30, 'ST_Distance(g1, g2)\n\nReturns the distance between g1 and g2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', 'mysql> SET @g1 = Point(1,1);\nmysql> SET @g2 = Point(2,2);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (376, 'ST_EQUALS', 30, 'ST_Equals(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially equal to g2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', 'mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (377, 'ST_INTERSECTS', 30, 'ST_Intersects(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 spatially intersects g2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (378, 'ST_OVERLAPS', 30, 'ST_Overlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether g1 spatially overlaps\ng2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (379, 'ST_TOUCHES', 30, 'ST_Touches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether g1 spatially touches\ng2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (380, 'ST_WITHIN', 30, 'ST_Within(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially within g2. This\ntests the opposite relationship as ST_Contains().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (381, 'TOUCHES', 30, 'Touches(g1, g2)\n\nST_Touches() and Touches() are synonyms. For more information, see the\ndescription of ST_Touches().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-object-shapes.html');
INSERT INTO `help_topic` VALUES (382, 'MBRCONTAINS', 31, 'MBRContains(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\ncontains the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRWithin().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', 'mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Point(1 1)\');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (383, 'MBRDISJOINT', 31, 'MBRDisjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are disjoint (do not intersect).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (384, 'MBREQUAL', 31, 'MBREqual(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are the same.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (385, 'MBRINTERSECTS', 31, 'MBRIntersects(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 intersect.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (386, 'MBROVERLAPS', 31, 'MBROverlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 overlap.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (387, 'MBRTOUCHES', 31, 'MBRTouches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 touch.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (388, 'MBRWITHIN', 31, 'MBRWithin(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\nis within the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRContains().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', 'mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Polygon((0 0,0 5,5 5,5 0,0 0))\');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (389, 'CONTAINS', 31, 'Contains(g1, g2)\n\nMBRContains() and Contains() are synonyms. For more information, see\nthe description of MBRContains().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (390, 'DISJOINT', 31, 'Disjoint(g1, g2)\n\nMBRDisjoint() and Disjoint() are synonyms. For more information, see\nthe description of MBRDisjoint().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (391, 'EQUALS', 31, 'Equals(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially equal to g2.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (392, 'INTERSECTS', 31, 'Intersects(g1, g2)\n\nMBRIntersects() and Intersects() are synonyms. For more information,\nsee the description of MBRIntersects().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (393, 'OVERLAPS', 31, 'Overlaps(g1, g2)\n\nMBROverlaps() and Overlaps() are synonyms. For more information, see\nthe description of MBROverlaps().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (394, 'WITHIN', 31, 'Within(g1, g2)\n\nMBRWithin() and Within() are synonyms. For more information, see the\ndescription of MBRWithin().\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/spatial-relation-functions-mbr.html');
INSERT INTO `help_topic` VALUES (395, 'GTID_SUBSET', 31, 'Syntax:\nGTID_SUBSET(subset,set)\n\nGiven two sets of global transaction IDs subset and set, returns true\n(1) if all GTIDs in subset are also in set. Returns false (0)\notherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html\n\n', 'mysql> SELECT GTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:23\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\')\\G\n*************************** 1. row ***************************\nGTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:23\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\'): 1\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\')\\G\n*************************** 1. row ***************************\nGTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\'): 1\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\')\\G\n*************************** 1. row ***************************\nGTID_SUBSET(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\'): 0\n1 row in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html');
INSERT INTO `help_topic` VALUES (396, 'GTID_SUBTRACT', 31, 'Syntax:\nGTID_SUBTRACT(set,subset)\n\nGiven two sets of global transaction IDs subset and set, returns only\nthose GTIDs from set that are not in subset.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html\n\n', 'mysql> SELECT GTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21\')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:21\'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:22-57\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25\')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25\'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:26-57\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    ->     \'3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24\')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57\',\n    \'3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24\'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:21-22:25-57\n1 row in set (0.01 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html');
INSERT INTO `help_topic` VALUES (397, 'SQL_THREAD_WAIT_AFTER_GTIDS', 31, 'Syntax:\nSQL_THREAD_WAIT_AFTER_GTIDS(gtid_set[, timeout])\n\nSQL_THREAD_WAIT_AFTER_GTIDS() was added in MySQL 5.6.5, and replaced by\nWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() in MySQL 5.6.9. (Bug #14775984)\n\nFor more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-gtids.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html');
INSERT INTO `help_topic` VALUES (399, 'AVG', 32, 'Syntax:\nAVG([DISTINCT] expr)\n\nReturns the average value of expr. The DISTINCT option can be used to\nreturn the average of the distinct values of expr.\n\nIf there are no matching rows, AVG() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (400, 'BIT_AND', 32, 'Syntax:\nBIT_AND(expr)\n\nReturns the bitwise AND of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nIf there are no matching rows, BIT_AND() returns a neutral value (all\nbits set to 1).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (401, 'BIT_OR', 32, 'Syntax:\nBIT_OR(expr)\n\nReturns the bitwise OR of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nIf there are no matching rows, BIT_OR() returns a neutral value (all\nbits set to 0).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (402, 'BIT_XOR', 32, 'Syntax:\nBIT_XOR(expr)\n\nReturns the bitwise XOR of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nIf there are no matching rows, BIT_XOR() returns a neutral value (all\nbits set to 0).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (403, 'COUNT', 32, 'Syntax:\nCOUNT(expr)\n\nReturns a count of the number of non-NULL values of expr in the rows\nretrieved by a SELECT statement. The result is a BIGINT value.\n\nIf there are no matching rows, COUNT() returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (404, 'COUNT DISTINCT', 32, 'Syntax:\nCOUNT(DISTINCT expr,[expr...])\n\nReturns a count of the number of rows with different non-NULL expr\nvalues.\n\nIf there are no matching rows, COUNT(DISTINCT) returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT COUNT(DISTINCT results) FROM student;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (398, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS', 31, 'Syntax:\nWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(gtid_set[, timeout])\n\nWait until the replica SQL thread has executed all of the transactions\nwhose global transaction identifiers are contained in gtid_set (see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-gtids-concepts.html\n, for a definition of \"GTID sets\"), or until timeout seconds have\nelapsed, whichever occurs first. timeout is optional; the default\ntimeout is 0 seconds, in which case the source simply waits until all\nof the transactions in the GTID set have been executed.\n\nPrior to MySQL 5.6.9, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() was named\nSQL_THREAD_WAIT_AFTER_GTIDS(). (Bug #14775984)\n\nFor more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-gtids.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html\n\n', 'mysql> SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(\'3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5\');\n        -> 5\n', 'https://dev.mysql.com/doc/refman/5.6/en/gtid-functions.html');
INSERT INTO `help_topic` VALUES (405, 'GROUP_CONCAT', 32, 'Syntax:\nGROUP_CONCAT(expr)\n\nThis function returns a string result with the concatenated non-NULL\nvalues from a group. It returns NULL if there are no non-NULL values.\nThe full syntax is as follows:\n\nGROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (406, 'MAX', 32, 'Syntax:\nMAX([DISTINCT] expr)\n\nReturns the maximum value of expr. MAX() may take a string argument; in\nsuch cases, it returns the maximum string value. See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-indexes.html. The\nDISTINCT keyword can be used to find the maximum of the distinct values\nof expr, however, this produces the same result as omitting DISTINCT.\n\nIf there are no matching rows, MAX() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (407, 'MIN', 32, 'Syntax:\nMIN([DISTINCT] expr)\n\nReturns the minimum value of expr. MIN() may take a string argument; in\nsuch cases, it returns the minimum string value. See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-indexes.html. The\nDISTINCT keyword can be used to find the minimum of the distinct values\nof expr, however, this produces the same result as omitting DISTINCT.\n\nIf there are no matching rows, MIN() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', 'mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;\n', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (408, 'STD', 32, 'Syntax:\nSTD(expr)\n\nReturns the population standard deviation of expr. STD() is a synonym\nfor the standard SQL function STDDEV_POP(), provided as a MySQL\nextension.\n\nIf there are no matching rows, STD() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (409, 'STDDEV', 32, 'Syntax:\nSTDDEV(expr)\n\nReturns the population standard deviation of expr. STDDEV() is a\nsynonym for the standard SQL function STDDEV_POP(), provided for\ncompatibility with Oracle.\n\nIf there are no matching rows, STDDEV() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (410, 'STDDEV_POP', 32, 'Syntax:\nSTDDEV_POP(expr)\n\nReturns the population standard deviation of expr (the square root of\nVAR_POP()). You can also use STD() or STDDEV(), which are equivalent\nbut not standard SQL.\n\nIf there are no matching rows, STDDEV_POP() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (411, 'STDDEV_SAMP', 32, 'Syntax:\nSTDDEV_SAMP(expr)\n\nReturns the sample standard deviation of expr (the square root of\nVAR_SAMP().\n\nIf there are no matching rows, STDDEV_SAMP() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (412, 'SUM', 32, 'Syntax:\nSUM([DISTINCT] expr)\n\nReturns the sum of expr. If the return set has no rows, SUM() returns\nNULL. The DISTINCT keyword can be used to sum only the distinct values\nof expr.\n\nIf there are no matching rows, SUM() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (413, 'VAR_POP', 32, 'Syntax:\nVAR_POP(expr)\n\nReturns the population standard variance of expr. It considers rows as\nthe whole population, not as a sample, so it has the number of rows as\nthe denominator. You can also use VARIANCE(), which is equivalent but\nis not standard SQL.\n\nIf there are no matching rows, VAR_POP() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (414, 'VAR_SAMP', 32, 'Syntax:\nVAR_SAMP(expr)\n\nReturns the sample variance of expr. That is, the denominator is the\nnumber of rows minus one.\n\nIf there are no matching rows, VAR_SAMP() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (415, 'VARIANCE', 32, 'Syntax:\nVARIANCE(expr)\n\nReturns the population standard variance of expr. VARIANCE() is a\nsynonym for the standard SQL function VAR_POP(), provided as a MySQL\nextension.\n\nIf there are no matching rows, VARIANCE() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/aggregate-functions.html');
INSERT INTO `help_topic` VALUES (416, 'DEFAULT', 34, 'Syntax:\nDEFAULT(col_name)\n\nReturns the default value for a table column. An error results if the\ncolumn has no default value.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (417, 'INET_ATON', 34, 'Syntax:\nINET_ATON(expr)\n\nGiven the dotted-quad representation of an IPv4 network address as a\nstring, returns an integer that represents the numeric value of the\naddress in network byte order (big endian). INET_ATON() returns NULL if\nit does not understand its argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT INET_ATON(\'10.0.5.9\');\n        -> 167773449\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (418, 'INET_NTOA', 34, 'Syntax:\nINET_NTOA(expr)\n\nGiven a numeric IPv4 network address in network byte order, returns the\ndotted-quad string representation of the address as a string in the\nconnection character set. INET_NTOA() returns NULL if it does not\nunderstand its argument.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT INET_NTOA(167773449);\n        -> \'10.0.5.9\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (419, 'INET6_ATON', 34, 'Syntax:\nINET6_ATON(expr)\n\nGiven an IPv6 or IPv4 network address as a string, returns a binary\nstring that represents the numeric value of the address in network byte\norder (big endian). Because numeric-format IPv6 addresses require more\nbytes than the largest integer type, the representation returned by\nthis function has the VARBINARY data type: VARBINARY(16) for IPv6\naddresses and VARBINARY(4) for IPv4 addresses. If the argument is not a\nvalid address, INET6_ATON() returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT HEX(INET6_ATON(\'fdfe::5a55:caff:fefa:9089\'));\n        -> \'FDFE0000000000005A55CAFFFEFA9089\'\nmysql> SELECT HEX(INET6_ATON(\'10.0.5.9\'));\n        -> \'0A000509\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (420, 'INET6_NTOA', 34, 'Syntax:\nINET6_NTOA(expr)\n\nGiven an IPv6 or IPv4 network address represented in numeric form as a\nbinary string, returns the string representation of the address as a\nstring in the connection character set. If the argument is not a valid\naddress, INET6_NTOA() returns NULL.\n\nINET6_NTOA() has these properties:\n\no It does not use operating system functions to perform conversions,\n  thus the output string is platform independent.\n\no The return string has a maximum length of 39 (4 x 8 + 7). Given this\n  statement:\n\nCREATE TABLE t AS SELECT INET6_NTOA(expr) AS c1;\n\n  The resulting table would have this definition:\n\nCREATE TABLE t (c1 VARCHAR(39) CHARACTER SET utf8 DEFAULT NULL);\n\no The return string uses lowercase letters for IPv6 addresses.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT INET6_NTOA(INET6_ATON(\'fdfe::5a55:caff:fefa:9089\'));\n        -> \'fdfe::5a55:caff:fefa:9089\'\nmysql> SELECT INET6_NTOA(INET6_ATON(\'10.0.5.9\'));\n        -> \'10.0.5.9\'\n\nmysql> SELECT INET6_NTOA(UNHEX(\'FDFE0000000000005A55CAFFFEFA9089\'));\n        -> \'fdfe::5a55:caff:fefa:9089\'\nmysql> SELECT INET6_NTOA(UNHEX(\'0A000509\'));\n        -> \'10.0.5.9\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (421, 'IS_IPV4', 34, 'Syntax:\nIS_IPV4(expr)\n\nReturns 1 if the argument is a valid IPv4 address specified as a\nstring, 0 otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT IS_IPV4(\'10.0.5.9\'), IS_IPV4(\'10.0.5.256\');\n        -> 1, 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (422, 'IS_IPV4_COMPAT', 34, 'Syntax:\nIS_IPV4_COMPAT(expr)\n\nThis function takes an IPv6 address represented in numeric form as a\nbinary string, as returned by INET6_ATON(). It returns 1 if the\nargument is a valid IPv4-compatible IPv6 address, 0 otherwise.\nIPv4-compatible addresses have the form ::ipv4_address.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT IS_IPV4_COMPAT(INET6_ATON(\'::10.0.5.9\'));\n        -> 1\nmysql> SELECT IS_IPV4_COMPAT(INET6_ATON(\'::ffff:10.0.5.9\'));\n        -> 0\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (423, 'IS_IPV4_MAPPED', 34, 'Syntax:\nIS_IPV4_MAPPED(expr)\n\nThis function takes an IPv6 address represented in numeric form as a\nbinary string, as returned by INET6_ATON(). It returns 1 if the\nargument is a valid IPv4-mapped IPv6 address, 0 otherwise. IPv4-mapped\naddresses have the form ::ffff:ipv4_address.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT IS_IPV4_MAPPED(INET6_ATON(\'::10.0.5.9\'));\n        -> 0\nmysql> SELECT IS_IPV4_MAPPED(INET6_ATON(\'::ffff:10.0.5.9\'));\n        -> 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (424, 'IS_IPV6', 34, 'Syntax:\nIS_IPV6(expr)\n\nReturns 1 if the argument is a valid IPv6 address specified as a\nstring, 0 otherwise. This function does not consider IPv4 addresses to\nbe valid IPv6 addresses.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT IS_IPV6(\'10.0.5.9\'), IS_IPV6(\'::1\');\n        -> 0, 1\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (425, 'MASTER_POS_WAIT', 34, 'Syntax:\nMASTER_POS_WAIT(log_name,log_pos[,timeout])\n\nThis function is useful for control of source/replica synchronization.\nIt blocks until the replica has read and applied all updates up to the\nspecified position in the source log. The return value is the number of\nlog events the replica had to wait for to advance to the specified\nposition. The function returns NULL if the replica SQL thread is not\nstarted, the replica\'s source information is not initialized, the\narguments are incorrect, or an error occurs. It returns -1 if the\ntimeout has been exceeded. If the replica SQL thread stops while\nMASTER_POS_WAIT() is waiting, the function returns NULL. If the replica\nis past the specified position, the function returns immediately.\n\nOn a multithreaded replica, the function waits until expiry of the\nlimit set by the slave_checkpoint_group or slave_checkpoint_period\nsystem variable, when the checkpoint operation is called to update the\nstatus of the replica. Depending on the setting for the system\nvariables, the function might therefore return some time after the\nspecified position was reached.\n\nIf a timeout value is specified, MASTER_POS_WAIT() stops waiting when\ntimeout seconds have elapsed. timeout must be greater than 0; a zero or\nnegative timeout means no timeout.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (426, 'NAME_CONST', 34, 'Syntax:\nNAME_CONST(name,value)\n\nReturns the given value. When used to produce a result set column,\nNAME_CONST() causes the column to have the given name. The arguments\nshould be constants.\n\nmysql> SELECT NAME_CONST(\'myname\', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (437, 'ALTER SERVER', 35, 'Syntax:\nALTER SERVER  server_name\n    OPTIONS (option [, option] ...)\n\nAlters the server information for server_name, adjusting any of the\noptions permitted in the CREATE SERVER statement. The corresponding\nfields in the mysql.servers table are updated accordingly. This\nstatement requires the SUPER privilege.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-server.html\n\n', 'ALTER SERVER s OPTIONS (USER \'sally\');\n', 'https://dev.mysql.com/doc/refman/5.6/en/alter-server.html');
INSERT INTO `help_topic` VALUES (440, 'ALTER VIEW', 35, 'Syntax:\nALTER\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = user]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]\n\nThis statement changes the definition of a view, which must exist. The\nsyntax is similar to that for CREATE VIEW see [HELP CREATE VIEW]). This\nstatement requires the CREATE VIEW and DROP privileges for the view,\nand some privilege for each column referred to in the SELECT statement.\nALTER VIEW is permitted only to the definer or users with the SUPER\nprivilege.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-view.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-view.html');
INSERT INTO `help_topic` VALUES (441, 'CREATE DATABASE', 35, 'Syntax:\nCREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n    [create_option] ...\n\ncreate_option: [DEFAULT] {\n    CHARACTER SET [=] charset_name\n  | COLLATE [=] collation_name\n}\n\nCREATE DATABASE creates a database with the given name. To use this\nstatement, you need the CREATE privilege for the database. CREATE\nSCHEMA is a synonym for CREATE DATABASE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-database.html');
INSERT INTO `help_topic` VALUES (427, 'SLEEP', 34, 'Syntax:\nSLEEP(duration)\n\nSleeps (pauses) for the number of seconds given by the duration\nargument, then returns 0. If SLEEP() is interrupted, it returns 1. The\nduration may have a fractional part.\n\nWhen sleep returns normally (without interruption), it returns 0:\n\nmysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+\n\nWhen SLEEP() is the only thing invoked by a query that is interrupted,\nit returns 1 and the query itself returns no error. This statement is\ninterrupted using KILL QUERY from another session:\n\nmysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n\nWhen SLEEP() is only part of a query that is interrupted, the query\nreturns an error. This statement is interrupted using KILL QUERY from\nanother session:\n\nmysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (428, 'UUID', 34, 'Syntax:\nUUID()\n\nReturns a Universal Unique Identifier (UUID) generated according to RFC\n4122, \"A Universally Unique IDentifier (UUID) URN Namespace\"\n(http://www.ietf.org/rfc/rfc4122.txt).\n\nA UUID is designed as a number that is globally unique in space and\ntime. Two calls to UUID() are expected to generate two different\nvalues, even if these calls are performed on two separate devices not\nconnected to each other.\n\n*Warning*:\n\nAlthough UUID() values are intended to be unique, they are not\nnecessarily unguessable or unpredictable. If unpredictability is\nrequired, UUID values should be generated some other way.\n\nUUID() returns a value that conforms to UUID version 1 as described in\nRFC 4122. The value is a 128-bit number represented as a utf8 string of\nfive hexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nformat:\n\no The first three numbers are generated from the low, middle, and high\n  parts of a timestamp. The high part also includes the UUID version\n  number.\n\no The fourth number preserves temporal uniqueness in case the timestamp\n  value loses monotonicity (for example, due to daylight saving time).\n\no The fifth number is an IEEE 802 node number that provides spatial\n  uniqueness. A random number is substituted if the latter is not\n  available (for example, because the host device has no Ethernet card,\n  or it is unknown how to find the hardware address of an interface on\n  the host operating system). In this case, spatial uniqueness cannot\n  be guaranteed. Nevertheless, a collision should have very low\n  probability.\n\n  The MAC address of an interface is taken into account only on\n  FreeBSD, Linux, and Windows. On other operating systems, MySQL uses a\n  randomly generated 48-bit number.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT UUID();\n        -> \'6ccd780c-baba-1026-9564-5b8c656024db\'\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (429, 'UUID_SHORT', 34, 'Syntax:\nUUID_SHORT()\n\nReturns a \"short\" universal identifier as a 64-bit unsigned integer.\nValues returned by UUID_SHORT() differ from the string-format 128-bit\nidentifiers returned by the UUID() function and have different\nuniqueness properties. The value of UUID_SHORT() is guaranteed to be\nunique if the following conditions hold:\n\no The server_id value of the current server is between 0 and 255 and is\n  unique among your set of source and replica servers\n\no You do not set back the system time for your server host between\n  mysqld restarts\n\no You invoke UUID_SHORT() on average fewer than 16 million times per\n  second between mysqld restarts\n\nThe UUID_SHORT() return value is constructed this way:\n\n  (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> SELECT UUID_SHORT();\n        -> 92395783831158784\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (430, 'VALUES', 34, 'Syntax:\nVALUES(col_name)\n\nIn an INSERT ... ON DUPLICATE KEY UPDATE statement, you can use the\nVALUES(col_name) function in the UPDATE clause to refer to column\nvalues from the INSERT portion of the statement. In other words,\nVALUES(col_name) in the UPDATE clause refers to the value of col_name\nthat would be inserted, had no duplicate-key conflict occurred. This\nfunction is especially useful in multiple-row inserts. The VALUES()\nfunction is meaningful only in the ON DUPLICATE KEY UPDATE clause of\nINSERT statements and returns NULL otherwise. See\nhttps://dev.mysql.com/doc/refman/5.6/en/insert-on-duplicate.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html\n\n', 'mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\n', 'https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html');
INSERT INTO `help_topic` VALUES (442, 'CREATE SCHEMA', 35, 'Syntax:\nCREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n    [create_option] ...\n\ncreate_option: [DEFAULT] {\n    CHARACTER SET [=] charset_name\n  | COLLATE [=] collation_name\n}\n\nCREATE DATABASE creates a database with the given name. To use this\nstatement, you need the CREATE privilege for the database. CREATE\nSCHEMA is a synonym for CREATE DATABASE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-database.html');
INSERT INTO `help_topic` VALUES (446, 'CREATE PROCEDURE', 35, 'Syntax:\nCREATE\n    [DEFINER = user]\n    PROCEDURE sp_name ([proc_parameter[,...]])\n    [characteristic ...] routine_body\n\nCREATE\n    [DEFINER = user]\n    FUNCTION sp_name ([func_parameter[,...]])\n    RETURNS type\n    [characteristic ...] routine_body\n\nproc_parameter:\n    [ IN | OUT | INOUT ] param_name type\n\nfunc_parameter:\n    param_name type\n\ntype:\n    Any valid MySQL data type\n\ncharacteristic: {\n    COMMENT \'string\'\n  | LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}\n\nroutine_body:\n    Valid SQL routine statement\n\nThese statements are used to create a stored routine (a stored\nprocedure or function). That is, the specified routine becomes known to\nthe server. By default, a stored routine is associated with the default\ndatabase. To associate the routine explicitly with a given database,\nspecify the name as db_name.sp_name when you create it.\n\nThe CREATE FUNCTION statement is also used in MySQL to support UDFs\n(user-defined functions). See [HELP CREATE FUNCTION UDF]. A UDF can be\nregarded as an external stored function. Stored functions share their\nnamespace with UDFs. See\nhttps://dev.mysql.com/doc/refman/5.6/en/function-resolution.html, for\nthe rules describing how the server interprets references to different\nkinds of functions.\n\nTo invoke a stored procedure, use the CALL statement (see [HELP CALL]).\nTo invoke a stored function, refer to it in an expression. The function\nreturns a value during expression evaluation.\n\nCREATE PROCEDURE and CREATE FUNCTION require the CREATE ROUTINE\nprivilege. If the DEFINER clause is present, the privileges required\ndepend on the user value, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\nIf binary logging is enabled, CREATE FUNCTION might require the SUPER\nprivilege, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-logging.html.\n\nBy default, MySQL automatically grants the ALTER ROUTINE and EXECUTE\nprivileges to the routine creator. This behavior can be changed by\ndisabling the automatic_sp_privileges system variable. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-routines-privileges.html\n.\n\nThe DEFINER and SQL SECURITY clauses specify the security context to be\nused when checking access privileges at routine execution time, as\ndescribed later in this section.\n\nIf the routine name is the same as the name of a built-in SQL function,\na syntax error occurs unless you use a space between the name and the\nfollowing parenthesis when defining the routine or invoking it later.\nFor this reason, avoid using the names of existing SQL functions for\nyour own stored routines.\n\nThe IGNORE_SPACE SQL mode applies to built-in functions, not to stored\nroutines. It is always permissible to have spaces after a stored\nroutine name, regardless of whether IGNORE_SPACE is enabled.\n\nThe parameter list enclosed within parentheses must always be present.\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case-sensitive.\n\nEach parameter is an IN parameter by default. To specify otherwise for\na parameter, use the keyword OUT or INOUT before the parameter name.\n\n*Note*:\n\nSpecifying a parameter as IN, OUT, or INOUT is valid only for a\nPROCEDURE. For a FUNCTION, parameters are always regarded as IN\nparameters.\n\nAn IN parameter passes a value into a procedure. The procedure might\nmodify the value, but the modification is not visible to the caller\nwhen the procedure returns. An OUT parameter passes a value from the\nprocedure back to the caller. Its initial value is NULL within the\nprocedure, and its value is visible to the caller when the procedure\nreturns. An INOUT parameter is initialized by the caller, can be\nmodified by the procedure, and any change made by the procedure is\nvisible to the caller when the procedure returns.\n\nFor each OUT or INOUT parameter, pass a user-defined variable in the\nCALL statement that invokes the procedure so that you can obtain its\nvalue when the procedure returns. If you are calling the procedure from\nwithin another stored procedure or function, you can also pass a\nroutine parameter or local routine variable as an OUT or INOUT\nparameter. If you are calling the procedure from within a trigger, you\ncan also pass NEW.col_name as an OUT or INOUT parameter.\n\nFor information about the effect of unhandled conditions on procedure\nparameters, see\nhttps://dev.mysql.com/doc/refman/5.6/en/conditions-and-parameters.html.\n\nRoutine parameters cannot be referenced in statements prepared within\nthe routine; see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.htm\nl.\n\nThe following example shows a simple stored procedure that, given a\ncountry code, counts the number of cities for that country that appear\nin the city table of the world database. The country code is passed\nusing an IN parameter, and the city count is returned using an OUT\nparameter:\n\nmysql> delimiter //\n\nmysql> CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)\n       BEGIN\n         SELECT COUNT(*) INTO cities FROM world.city\n         WHERE CountryCode = country;\n       END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n\nmysql> CALL citycount(\'JPN\', @cities); -- cities in Japan\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|     248 |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL citycount(\'FRA\', @cities); -- cities in France\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|      40 |\n+---------+\n1 row in set (0.00 sec)\n\nThe example uses the mysql client delimiter command to change the\nstatement delimiter from ; to // while the procedure is being defined.\nThis enables the ; delimiter used in the procedure body to be passed\nthrough to the server rather than being interpreted by mysql itself.\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-defining.html.\n\nThe RETURNS clause may be specified only for a FUNCTION, for which it\nis mandatory. It indicates the return type of the function, and the\nfunction body must contain a RETURN value statement. If the RETURN\nstatement returns a value of a different type, the value is coerced to\nthe proper type. For example, if a function specifies an ENUM or SET\nvalue in the RETURNS clause, but the RETURN statement returns an\ninteger, the value returned from the function is the string for the\ncorresponding ENUM member of set of SET members.\n\nThe following example function takes a parameter, performs an operation\nusing an SQL function, and returns the result. In this case, it is\nunnecessary to use delimiter because the function definition contains\nno internal ; statement delimiters:\n\nmysql> CREATE FUNCTION hello (s CHAR(20))\nmysql> RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT(\'Hello, \',s,\'!\');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT hello(\'world\');\n+----------------+\n| hello(\'world\') |\n+----------------+\n| Hello, world!  |\n+----------------+\n1 row in set (0.00 sec)\n\nParameter types and function return types can be declared to use any\nvalid data type. The COLLATE attribute can be used if preceded by a\nCHARACTER SET specification.\n\nThe routine_body consists of a valid SQL routine statement. This can be\na simple statement such as SELECT or INSERT, or a compound statement\nwritten using BEGIN and END. Compound statements can contain\ndeclarations, loops, and other control structure statements. The syntax\nfor these statements is described in\nhttps://dev.mysql.com/doc/refman/5.6/en/sql-compound-statements.html.\nIn practice, stored functions tend to use compound statements, unless\nthe body consists of a single RETURN statement.\n\nMySQL permits routines to contain DDL statements, such as CREATE and\nDROP. MySQL also permits stored procedures (but not stored functions)\nto contain SQL transaction statements such as COMMIT. Stored functions\nmay not contain statements that perform explicit or implicit commit or\nrollback. Support for these statements is not required by the SQL\nstandard, which states that each DBMS vendor may decide whether to\npermit them.\n\nStatements that return a result set can be used within a stored\nprocedure but not within a stored function. This prohibition includes\nSELECT statements that do not have an INTO var_list clause and other\nstatements such as SHOW, EXPLAIN, and CHECK TABLE. For statements that\ncan be determined at function definition time to return a result set, a\nNot allowed to return a result set from a function error occurs\n(ER_SP_NO_RETSET\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_sp_no_retset)). For statements that can be determined only\nat runtime to return a result set, a PROCEDURE %s can\'t return a result\nset in the given context error occurs (ER_SP_BADSELECT\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_sp_badselect)).\n\nUSE statements within stored routines are not permitted. When a routine\nis invoked, an implicit USE db_name is performed (and undone when the\nroutine terminates). The causes the routine to have the given default\ndatabase while it executes. References to objects in databases other\nthan the routine default database should be qualified with the\nappropriate database name.\n\nFor additional information about statements that are not permitted in\nstored routines, see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.htm\nl.\n\nFor information about invoking stored procedures from within programs\nwritten in a language that has a MySQL interface, see [HELP CALL].\n\nMySQL stores the sql_mode system variable setting in effect when a\nroutine is created or altered, and always executes the routine with\nthis setting in force, regardless of the current server SQL mode when\nthe routine begins executing.\n\nThe switch from the SQL mode of the invoker to that of the routine\noccurs after evaluation of arguments and assignment of the resulting\nvalues to routine parameters. If you define a routine in strict SQL\nmode but invoke it in nonstrict mode, assignment of arguments to\nroutine parameters does not take place in strict mode. If you require\nthat expressions passed to a routine be assigned in strict SQL mode,\nyou should invoke the routine with strict mode in effect.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-procedure.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-procedure.html');
INSERT INTO `help_topic` VALUES (447, 'CREATE FUNCTION', 35, 'Syntax:\nCREATE\n    [DEFINER = user]\n    PROCEDURE sp_name ([proc_parameter[,...]])\n    [characteristic ...] routine_body\n\nCREATE\n    [DEFINER = user]\n    FUNCTION sp_name ([func_parameter[,...]])\n    RETURNS type\n    [characteristic ...] routine_body\n\nproc_parameter:\n    [ IN | OUT | INOUT ] param_name type\n\nfunc_parameter:\n    param_name type\n\ntype:\n    Any valid MySQL data type\n\ncharacteristic: {\n    COMMENT \'string\'\n  | LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}\n\nroutine_body:\n    Valid SQL routine statement\n\nThese statements are used to create a stored routine (a stored\nprocedure or function). That is, the specified routine becomes known to\nthe server. By default, a stored routine is associated with the default\ndatabase. To associate the routine explicitly with a given database,\nspecify the name as db_name.sp_name when you create it.\n\nThe CREATE FUNCTION statement is also used in MySQL to support UDFs\n(user-defined functions). See [HELP CREATE FUNCTION UDF]. A UDF can be\nregarded as an external stored function. Stored functions share their\nnamespace with UDFs. See\nhttps://dev.mysql.com/doc/refman/5.6/en/function-resolution.html, for\nthe rules describing how the server interprets references to different\nkinds of functions.\n\nTo invoke a stored procedure, use the CALL statement (see [HELP CALL]).\nTo invoke a stored function, refer to it in an expression. The function\nreturns a value during expression evaluation.\n\nCREATE PROCEDURE and CREATE FUNCTION require the CREATE ROUTINE\nprivilege. If the DEFINER clause is present, the privileges required\ndepend on the user value, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\nIf binary logging is enabled, CREATE FUNCTION might require the SUPER\nprivilege, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-logging.html.\n\nBy default, MySQL automatically grants the ALTER ROUTINE and EXECUTE\nprivileges to the routine creator. This behavior can be changed by\ndisabling the automatic_sp_privileges system variable. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-routines-privileges.html\n.\n\nThe DEFINER and SQL SECURITY clauses specify the security context to be\nused when checking access privileges at routine execution time, as\ndescribed later in this section.\n\nIf the routine name is the same as the name of a built-in SQL function,\na syntax error occurs unless you use a space between the name and the\nfollowing parenthesis when defining the routine or invoking it later.\nFor this reason, avoid using the names of existing SQL functions for\nyour own stored routines.\n\nThe IGNORE_SPACE SQL mode applies to built-in functions, not to stored\nroutines. It is always permissible to have spaces after a stored\nroutine name, regardless of whether IGNORE_SPACE is enabled.\n\nThe parameter list enclosed within parentheses must always be present.\nIf there are no parameters, an empty parameter list of () should be\nused. Parameter names are not case-sensitive.\n\nEach parameter is an IN parameter by default. To specify otherwise for\na parameter, use the keyword OUT or INOUT before the parameter name.\n\n*Note*:\n\nSpecifying a parameter as IN, OUT, or INOUT is valid only for a\nPROCEDURE. For a FUNCTION, parameters are always regarded as IN\nparameters.\n\nAn IN parameter passes a value into a procedure. The procedure might\nmodify the value, but the modification is not visible to the caller\nwhen the procedure returns. An OUT parameter passes a value from the\nprocedure back to the caller. Its initial value is NULL within the\nprocedure, and its value is visible to the caller when the procedure\nreturns. An INOUT parameter is initialized by the caller, can be\nmodified by the procedure, and any change made by the procedure is\nvisible to the caller when the procedure returns.\n\nFor each OUT or INOUT parameter, pass a user-defined variable in the\nCALL statement that invokes the procedure so that you can obtain its\nvalue when the procedure returns. If you are calling the procedure from\nwithin another stored procedure or function, you can also pass a\nroutine parameter or local routine variable as an OUT or INOUT\nparameter. If you are calling the procedure from within a trigger, you\ncan also pass NEW.col_name as an OUT or INOUT parameter.\n\nFor information about the effect of unhandled conditions on procedure\nparameters, see\nhttps://dev.mysql.com/doc/refman/5.6/en/conditions-and-parameters.html.\n\nRoutine parameters cannot be referenced in statements prepared within\nthe routine; see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.htm\nl.\n\nThe following example shows a simple stored procedure that, given a\ncountry code, counts the number of cities for that country that appear\nin the city table of the world database. The country code is passed\nusing an IN parameter, and the city count is returned using an OUT\nparameter:\n\nmysql> delimiter //\n\nmysql> CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)\n       BEGIN\n         SELECT COUNT(*) INTO cities FROM world.city\n         WHERE CountryCode = country;\n       END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n\nmysql> CALL citycount(\'JPN\', @cities); -- cities in Japan\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|     248 |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL citycount(\'FRA\', @cities); -- cities in France\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|      40 |\n+---------+\n1 row in set (0.00 sec)\n\nThe example uses the mysql client delimiter command to change the\nstatement delimiter from ; to // while the procedure is being defined.\nThis enables the ; delimiter used in the procedure body to be passed\nthrough to the server rather than being interpreted by mysql itself.\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-defining.html.\n\nThe RETURNS clause may be specified only for a FUNCTION, for which it\nis mandatory. It indicates the return type of the function, and the\nfunction body must contain a RETURN value statement. If the RETURN\nstatement returns a value of a different type, the value is coerced to\nthe proper type. For example, if a function specifies an ENUM or SET\nvalue in the RETURNS clause, but the RETURN statement returns an\ninteger, the value returned from the function is the string for the\ncorresponding ENUM member of set of SET members.\n\nThe following example function takes a parameter, performs an operation\nusing an SQL function, and returns the result. In this case, it is\nunnecessary to use delimiter because the function definition contains\nno internal ; statement delimiters:\n\nmysql> CREATE FUNCTION hello (s CHAR(20))\nmysql> RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT(\'Hello, \',s,\'!\');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT hello(\'world\');\n+----------------+\n| hello(\'world\') |\n+----------------+\n| Hello, world!  |\n+----------------+\n1 row in set (0.00 sec)\n\nParameter types and function return types can be declared to use any\nvalid data type. The COLLATE attribute can be used if preceded by a\nCHARACTER SET specification.\n\nThe routine_body consists of a valid SQL routine statement. This can be\na simple statement such as SELECT or INSERT, or a compound statement\nwritten using BEGIN and END. Compound statements can contain\ndeclarations, loops, and other control structure statements. The syntax\nfor these statements is described in\nhttps://dev.mysql.com/doc/refman/5.6/en/sql-compound-statements.html.\nIn practice, stored functions tend to use compound statements, unless\nthe body consists of a single RETURN statement.\n\nMySQL permits routines to contain DDL statements, such as CREATE and\nDROP. MySQL also permits stored procedures (but not stored functions)\nto contain SQL transaction statements such as COMMIT. Stored functions\nmay not contain statements that perform explicit or implicit commit or\nrollback. Support for these statements is not required by the SQL\nstandard, which states that each DBMS vendor may decide whether to\npermit them.\n\nStatements that return a result set can be used within a stored\nprocedure but not within a stored function. This prohibition includes\nSELECT statements that do not have an INTO var_list clause and other\nstatements such as SHOW, EXPLAIN, and CHECK TABLE. For statements that\ncan be determined at function definition time to return a result set, a\nNot allowed to return a result set from a function error occurs\n(ER_SP_NO_RETSET\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_sp_no_retset)). For statements that can be determined only\nat runtime to return a result set, a PROCEDURE %s can\'t return a result\nset in the given context error occurs (ER_SP_BADSELECT\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_sp_badselect)).\n\nUSE statements within stored routines are not permitted. When a routine\nis invoked, an implicit USE db_name is performed (and undone when the\nroutine terminates). The causes the routine to have the given default\ndatabase while it executes. References to objects in databases other\nthan the routine default database should be qualified with the\nappropriate database name.\n\nFor additional information about statements that are not permitted in\nstored routines, see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.htm\nl.\n\nFor information about invoking stored procedures from within programs\nwritten in a language that has a MySQL interface, see [HELP CALL].\n\nMySQL stores the sql_mode system variable setting in effect when a\nroutine is created or altered, and always executes the routine with\nthis setting in force, regardless of the current server SQL mode when\nthe routine begins executing.\n\nThe switch from the SQL mode of the invoker to that of the routine\noccurs after evaluation of arguments and assignment of the resulting\nvalues to routine parameters. If you define a routine in strict SQL\nmode but invoke it in nonstrict mode, assignment of arguments to\nroutine parameters does not take place in strict mode. If you require\nthat expressions passed to a routine be assigned in strict SQL mode,\nyou should invoke the routine with strict mode in effect.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-procedure.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-procedure.html');
INSERT INTO `help_topic` VALUES (453, 'CREATE VIEW', 35, 'Syntax:\nCREATE\n    [OR REPLACE]\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = user]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]\n\nThe CREATE VIEW statement creates a new view, or replaces an existing\nview if the OR REPLACE clause is given. If the view does not exist,\nCREATE OR REPLACE VIEW is the same as CREATE VIEW. If the view does\nexist, CREATE OR REPLACE VIEW replaces it.\n\nFor information about restrictions on view use, see\nhttps://dev.mysql.com/doc/refman/5.6/en/view-restrictions.html.\n\nThe select_statement is a SELECT statement that provides the definition\nof the view. (Selecting from the view selects, in effect, using the\nSELECT statement.) The select_statement can select from base tables or\nother views.\n\nThe view definition is \"frozen\" at creation time and is not affected by\nsubsequent changes to the definitions of the underlying tables. For\nexample, if a view is defined as SELECT * on a table, new columns added\nto the table later do not become part of the view, and columns dropped\nfrom the table result in an error when selecting from the view.\n\nThe ALGORITHM clause affects how MySQL processes the view. The DEFINER\nand SQL SECURITY clauses specify the security context to be used when\nchecking access privileges at view invocation time. The WITH CHECK\nOPTION clause can be given to constrain inserts or updates to rows in\ntables referenced by the view. These clauses are described later in\nthis section.\n\nThe CREATE VIEW statement requires the CREATE VIEW privilege for the\nview, and some privilege for each column selected by the SELECT\nstatement. For columns used elsewhere in the SELECT statement, you must\nhave the SELECT privilege. If the OR REPLACE clause is present, you\nmust also have the DROP privilege for the view. If the DEFINER clause\nis present, the privileges required depend on the user value, as\ndiscussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\n\nWhen a view is referenced, privilege checking occurs as described later\nin this section.\n\nA view belongs to a database. By default, a new view is created in the\ndefault database. To create the view explicitly in a given database,\nuse db_name.view_name syntax to qualify the view name with the database\nname:\n\nCREATE VIEW test.v AS SELECT * FROM t;\n\nUnqualified table or view names in the SELECT statement are also\ninterpreted with respect to the default database. A view can refer to\ntables or views in other databases by qualifying the table or view name\nwith the appropriate database name.\n\nWithin a database, base tables and views share the same namespace, so a\nbase table and a view cannot have the same name.\n\nColumns retrieved by the SELECT statement can be simple references to\ntable columns, or expressions that use functions, constant values,\noperators, and so forth.\n\nA view must have unique column names with no duplicates, just like a\nbase table. By default, the names of the columns retrieved by the\nSELECT statement are used for the view column names. To define explicit\nnames for the view columns, specify the optional column_list clause as\na list of comma-separated identifiers. The number of names in\ncolumn_list must be the same as the number of columns retrieved by the\nSELECT statement.\n\nA view can be created from many kinds of SELECT statements. It can\nrefer to base tables or other views. It can use joins, UNION, and\nsubqueries. The SELECT need not even refer to any tables:\n\nCREATE VIEW v_today (today) AS SELECT CURRENT_DATE;\n\nThe following example defines a view that selects two columns from\nanother table as well as an expression calculated from those columns:\n\nmysql> CREATE TABLE t (qty INT, price INT);\nmysql> INSERT INTO t VALUES(3, 50);\nmysql> CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\nmysql> SELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+\n\nA view definition is subject to the following restrictions:\n\no The SELECT statement cannot contain a subquery in the FROM clause.\n\no The SELECT statement cannot refer to system variables or user-defined\n  variables.\n\no Within a stored program, the SELECT statement cannot refer to program\n  parameters or local variables.\n\no The SELECT statement cannot refer to prepared statement parameters.\n\no Any table or view referred to in the definition must exist. If, after\n  the view has been created, a table or view that the definition refers\n  to is dropped, use of the view results in an error. To check a view\n  definition for problems of this kind, use the CHECK TABLE statement.\n\no The definition cannot refer to a TEMPORARY table, and you cannot\n  create a TEMPORARY view.\n\no You cannot associate a trigger with a view.\n\no Aliases for column names in the SELECT statement are checked against\n  the maximum column length of 64 characters (not the maximum alias\n  length of 256 characters).\n\nORDER BY is permitted in a view definition, but it is ignored if you\nselect from a view using a statement that has its own ORDER BY or\nfiltering or grouping. When ORDER BY is combined with LIMIT or OFFSET\nin a view definition, the ordering is always enforced before the query\nresult is used by the outer query, but it does not guarantee that the\nsame ordering is used in the end result. As a workaround, add an ORDER\nBY clause to the outer query.\n\nFor other options or clauses in the definition, they are added to the\noptions or clauses of the statement that references the view, but the\neffect is undefined. For example, if a view definition includes a LIMIT\nclause, and you select from the view using a statement that has its own\nLIMIT clause, it is undefined which limit applies. This same principle\napplies to options such as ALL, DISTINCT, or SQL_SMALL_RESULT that\nfollow the SELECT keyword, and to clauses such as INTO, FOR UPDATE,\nLOCK IN SHARE MODE, and PROCEDURE.\n\nThe results obtained from a view may be affected if you change the\nquery processing environment by changing system variables:\n\nmysql> CREATE VIEW v (mycol) AS SELECT \'abc\';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET sql_mode = \'\';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> SET sql_mode = \'ANSI_QUOTES\';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   |\n+-------+\n1 row in set (0.00 sec)\n\nThe DEFINER and SQL SECURITY clauses determine which MySQL account to\nuse when checking access privileges for the view when a statement is\nexecuted that references the view. The valid SQL SECURITY\ncharacteristic values are DEFINER (the default) and INVOKER. These\nindicate that the required privileges must be held by the user who\ndefined or invoked the view, respectively.\n\nIf the DEFINER clause is present, the user value should be a MySQL\naccount specified as \'user_name\'@\'host_name\', CURRENT_USER, or\nCURRENT_USER(). The permitted user values depend on the privileges you\nhold, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\nAlso see that section for additional information about view security.\n\nIf the DEFINER clause is omitted, the default definer is the user who\nexecutes the CREATE VIEW statement. This is the same as specifying\nDEFINER = CURRENT_USER explicitly.\n\nWithin a view definition, the CURRENT_USER function returns the view\'s\nDEFINER value by default. For views defined with the SQL SECURITY\nINVOKER characteristic, CURRENT_USER returns the account for the view\'s\ninvoker. For information about user auditing within views, see\nhttps://dev.mysql.com/doc/refman/5.6/en/account-activity-auditing.html.\n\nWithin a stored routine that is defined with the SQL SECURITY DEFINER\ncharacteristic, CURRENT_USER returns the routine\'s DEFINER value. This\nalso affects a view defined within such a routine, if the view\ndefinition contains a DEFINER value of CURRENT_USER.\n\nMySQL checks view privileges like this:\n\no At view definition time, the view creator must have the privileges\n  needed to use the top-level objects accessed by the view. For\n  example, if the view definition refers to table columns, the creator\n  must have some privilege for each column in the select list of the\n  definition, and the SELECT privilege for each column used elsewhere\n  in the definition. If the definition refers to a stored function,\n  only the privileges needed to invoke the function can be checked. The\n  privileges required at function invocation time can be checked only\n  as it executes: For different invocations, different execution paths\n  within the function might be taken.\n\no The user who references a view must have appropriate privileges to\n  access it (SELECT to select from it, INSERT to insert into it, and so\n  forth.)\n\no When a view has been referenced, privileges for objects accessed by\n  the view are checked against the privileges held by the view DEFINER\n  account or invoker, depending on whether the SQL SECURITY\n  characteristic is DEFINER or INVOKER, respectively.\n\no If reference to a view causes execution of a stored function,\n  privilege checking for statements executed within the function depend\n  on whether the function SQL SECURITY characteristic is DEFINER or\n  INVOKER. If the security characteristic is DEFINER, the function runs\n  with the privileges of the DEFINER account. If the characteristic is\n  INVOKER, the function runs with the privileges determined by the\n  view\'s SQL SECURITY characteristic.\n\nExample: A view might depend on a stored function, and that function\nmight invoke other stored routines. For example, the following view\ninvokes a stored function f():\n\nCREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);\n\nSuppose that f() contains a statement such as this:\n\nIF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;\n\nThe privileges required for executing statements within f() need to be\nchecked when f() executes. This might mean that privileges are needed\nfor p1() or p2(), depending on the execution path within f(). Those\nprivileges must be checked at runtime, and the user who must possess\nthe privileges is determined by the SQL SECURITY values of the view v\nand the function f().\n\nThe DEFINER and SQL SECURITY clauses for views are extensions to\nstandard SQL. In standard SQL, views are handled using the rules for\nSQL SECURITY DEFINER. The standard says that the definer of the view,\nwhich is the same as the owner of the view\'s schema, gets applicable\nprivileges on the view (for example, SELECT) and may grant them. MySQL\nhas no concept of a schema \"owner\", so MySQL adds a clause to identify\nthe definer. The DEFINER clause is an extension where the intent is to\nhave what the standard has; that is, a permanent record of who defined\nthe view. This is why the default DEFINER value is the account of the\nview creator.\n\nThe optional ALGORITHM clause is a MySQL extension to standard SQL. It\naffects how MySQL processes the view. ALGORITHM takes three values:\nMERGE, TEMPTABLE, or UNDEFINED. The default algorithm is UNDEFINED if\nno ALGORITHM clause is present. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/view-algorithms.html, as well\nas\nhttps://dev.mysql.com/doc/refman/5.6/en/derived-table-optimization.html\n.\n\nSome views are updatable. That is, you can use them in statements such\nas UPDATE, DELETE, or INSERT to update the contents of the underlying\ntable. For a view to be updatable, there must be a one-to-one\nrelationship between the rows in the view and the rows in the\nunderlying table. There are also certain other constructs that make a\nview nonupdatable.\n\nThe WITH CHECK OPTION clause can be given for an updatable view to\nprevent inserts or updates to rows except those for which the WHERE\nclause in the select_statement is true.\n\nIn a WITH CHECK OPTION clause for an updatable view, the LOCAL and\nCASCADED keywords determine the scope of check testing when the view is\ndefined in terms of another view. The LOCAL keyword restricts the CHECK\nOPTION only to the view being defined. CASCADED causes the checks for\nunderlying views to be evaluated as well. When neither keyword is\ngiven, the default is CASCADED.\n\nFor more information about updatable views and the WITH CHECK OPTION\nclause, see\nhttps://dev.mysql.com/doc/refman/5.6/en/view-updatability.html, and\nhttps://dev.mysql.com/doc/refman/5.6/en/view-check-option.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-view.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-view.html');
INSERT INTO `help_topic` VALUES (454, 'DROP DATABASE', 35, 'Syntax:\nDROP {DATABASE | SCHEMA} [IF EXISTS] db_name\n\nDROP DATABASE drops all tables in the database and deletes the\ndatabase. Be very careful with this statement! To use DROP DATABASE,\nyou need the DROP privilege on the database. DROP SCHEMA is a synonym\nfor DROP DATABASE.\n\n*Important*:\n\nWhen a database is dropped, privileges granted specifically for the\ndatabase are not automatically dropped. They must be dropped manually.\nSee [HELP GRANT].\n\nIF EXISTS is used to prevent an error from occurring if the database\ndoes not exist.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-database.html');
INSERT INTO `help_topic` VALUES (455, 'DROP SCHEMA', 35, 'Syntax:\nDROP {DATABASE | SCHEMA} [IF EXISTS] db_name\n\nDROP DATABASE drops all tables in the database and deletes the\ndatabase. Be very careful with this statement! To use DROP DATABASE,\nyou need the DROP privilege on the database. DROP SCHEMA is a synonym\nfor DROP DATABASE.\n\n*Important*:\n\nWhen a database is dropped, privileges granted specifically for the\ndatabase are not automatically dropped. They must be dropped manually.\nSee [HELP GRANT].\n\nIF EXISTS is used to prevent an error from occurring if the database\ndoes not exist.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-database.html');
INSERT INTO `help_topic` VALUES (456, 'DROP EVENT', 35, 'Syntax:\nDROP EVENT [IF EXISTS] event_name\n\nThis statement drops the event named event_name. The event immediately\nceases being active, and is deleted completely from the server.\n\nIf the event does not exist, the error ERROR 1517 (HY000): Unknown\nevent \'event_name\' results. You can override this and cause the\nstatement to generate a warning for nonexistent events instead using IF\nEXISTS.\n\nThis statement requires the EVENT privilege for the schema to which the\nevent to be dropped belongs.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-event.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-event.html');
INSERT INTO `help_topic` VALUES (431, 'ALTER DATABASE', 35, 'Syntax:\nALTER {DATABASE | SCHEMA} [db_name]\n    alter_option ...\nALTER {DATABASE | SCHEMA} db_name\n    UPGRADE DATA DIRECTORY NAME\n\nalter_option: {\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n}\n\nALTER DATABASE enables you to change the overall characteristics of a\ndatabase. These characteristics are stored in the db.opt file in the\ndatabase directory. This statement requires the ALTER privilege on the\ndatabase. ALTER SCHEMA is a synonym for ALTER DATABASE.\n\nThe database name can be omitted from the first syntax, in which case\nthe statement applies to the default database. An error occurs if there\nis no default database.\n\no https://dev.mysql.com/doc/refman/5.6/en/alter-database.html#alter-dat\n  abase-charset\n\no https://dev.mysql.com/doc/refman/5.6/en/alter-database.html#alter-dat\n  abase-upgrading\n\nCharacter Set and Collation Options\n\nThe CHARACTER SET clause changes the default database character set.\nThe COLLATE clause changes the default database collation. For\ninformation about character set and collation names, see\nhttps://dev.mysql.com/doc/refman/5.6/en/charset.html.\n\nTo see the available character sets and collations, use the SHOW\nCHARACTER SET and SHOW COLLATION statements, respectively. See [HELP\nSHOW CHARACTER SET], and [HELP SHOW COLLATION].\n\nA stored routine that uses the database defaults when the routine is\ncreated includes those defaults as part of its definition. (In a stored\nroutine, variables with character data types use the database defaults\nif the character set or collation are not specified explicitly. See\n[HELP CREATE PROCEDURE].) If you change the default character set or\ncollation for a database, any stored routines that are to use the new\ndefaults must be dropped and recreated.\n\nUpgrading from Versions Older than MySQL 5.1\n\nThe syntax that includes the UPGRADE DATA DIRECTORY NAME clause updates\nthe name of the directory associated with the database to use the\nencoding implemented in MySQL 5.1 for mapping database names to\ndatabase directory names (see\nhttps://dev.mysql.com/doc/refman/5.6/en/identifier-mapping.html). This\nclause is for use under these conditions:\n\no It is intended when upgrading MySQL to 5.1 or later from older\n  versions.\n\no It is intended to update a database directory name to the current\n  encoding format if the name contains special characters that need\n  encoding.\n\no The statement is used by mysqlcheck (as invoked by mysql_upgrade).\n\nFor example, if a database in MySQL 5.0 has the name a-b-c, the name\ncontains instances of the - (dash) character. In MySQL 5.0, the\ndatabase directory is also named a-b-c, which is not necessarily safe\nfor all file systems. In MySQL 5.1 and later, the same database name is\nencoded as a@002db@002dc to produce a file system-neutral directory\nname.\n\nWhen a MySQL installation is upgraded to MySQL 5.1 or later from an\nolder version,the server displays a name such as a-b-c (which is in the\nold format) as #mysql50#a-b-c, and you must refer to the name using the\n#mysql50# prefix. Use UPGRADE DATA DIRECTORY NAME in this case to\nexplicitly tell the server to re-encode the database directory name to\nthe current encoding format:\n\nALTER DATABASE `#mysql50#a-b-c` UPGRADE DATA DIRECTORY NAME;\n\nAfter executing this statement, you can refer to the database as a-b-c\nwithout the special #mysql50# prefix.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-database.html');
INSERT INTO `help_topic` VALUES (433, 'ALTER EVENT', 35, 'Syntax:\nALTER\n    [DEFINER = user]\n    EVENT event_name\n    [ON SCHEDULE schedule]\n    [ON COMPLETION [NOT] PRESERVE]\n    [RENAME TO new_event_name]\n    [ENABLE | DISABLE | DISABLE ON SLAVE]\n    [COMMENT \'string\']\n    [DO event_body]\n\nThe ALTER EVENT statement changes one or more of the characteristics of\nan existing event without the need to drop and recreate it. The syntax\nfor each of the DEFINER, ON SCHEDULE, ON COMPLETION, COMMENT, ENABLE /\nDISABLE, and DO clauses is exactly the same as when used with CREATE\nEVENT. (See [HELP CREATE EVENT].)\n\nAny user can alter an event defined on a database for which that user\nhas the EVENT privilege. When a user executes a successful ALTER EVENT\nstatement, that user becomes the definer for the affected event.\n\nALTER EVENT works only with an existing event:\n\nmysql> ALTER EVENT no_such_event \n     >     ON SCHEDULE \n     >       EVERY \'2:3\' DAY_HOUR;\nERROR 1517 (HY000): Unknown event \'no_such_event\'\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-event.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-event.html');
INSERT INTO `help_topic` VALUES (434, 'ALTER FUNCTION', 35, 'Syntax:\nALTER FUNCTION func_name [characteristic ...]\n\ncharacteristic: {\n    COMMENT \'string\'\n  | LANGUAGE SQL\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}\n\nThis statement can be used to change the characteristics of a stored\nfunction. More than one change may be specified in an ALTER FUNCTION\nstatement. However, you cannot change the parameters or body of a\nstored function using this statement; to make such changes, you must\ndrop and re-create the function using DROP FUNCTION and CREATE\nFUNCTION.\n\nYou must have the ALTER ROUTINE privilege for the function. (That\nprivilege is granted automatically to the function creator.) If binary\nlogging is enabled, the ALTER FUNCTION statement might also require the\nSUPER privilege, as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-logging.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-function.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-function.html');
INSERT INTO `help_topic` VALUES (457, 'DROP INDEX', 35, 'Syntax:\nDROP INDEX [ONLINE | OFFLINE] index_name ON tbl_name\n    [algorithm_option | lock_option] ...\n\nalgorithm_option:\n    ALGORITHM [=] {DEFAULT | INPLACE | COPY}\n\nlock_option:\n    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}\n\nDROP INDEX drops the index named index_name from the table tbl_name.\nThis statement is mapped to an ALTER TABLE statement to drop the index.\nSee [HELP ALTER TABLE].\n\nTo drop a primary key, the index name is always PRIMARY, which must be\nspecified as a quoted identifier because PRIMARY is a reserved word:\n\nDROP INDEX `PRIMARY` ON t;\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-index.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-index.html');
INSERT INTO `help_topic` VALUES (460, 'DROP SERVER', 35, 'Syntax:\nDROP SERVER [ IF EXISTS ] server_name\n\nDrops the server definition for the server named server_name. The\ncorresponding row in the mysql.servers table is deleted. This statement\nrequires the SUPER privilege.\n\nDropping a server for a table does not affect any FEDERATED tables that\nused this connection information when they were created. See [HELP\nCREATE SERVER].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-server.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-server.html');
INSERT INTO `help_topic` VALUES (463, 'DROP TRIGGER', 35, 'Syntax:\nDROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n\nThis statement drops a trigger. The schema (database) name is optional.\nIf the schema is omitted, the trigger is dropped from the default\nschema. DROP TRIGGER requires the TRIGGER privilege for the table\nassociated with the trigger.\n\nUse IF EXISTS to prevent an error from occurring for a trigger that\ndoes not exist. A NOTE is generated for a nonexistent trigger when\nusing IF EXISTS. See [HELP SHOW WARNINGS].\n\nTriggers for a table are also dropped if you drop the table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-trigger.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-trigger.html');
INSERT INTO `help_topic` VALUES (432, 'ALTER SCHEMA', 35, 'Syntax:\nALTER {DATABASE | SCHEMA} [db_name]\n    alter_option ...\nALTER {DATABASE | SCHEMA} db_name\n    UPGRADE DATA DIRECTORY NAME\n\nalter_option: {\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n}\n\nALTER DATABASE enables you to change the overall characteristics of a\ndatabase. These characteristics are stored in the db.opt file in the\ndatabase directory. This statement requires the ALTER privilege on the\ndatabase. ALTER SCHEMA is a synonym for ALTER DATABASE.\n\nThe database name can be omitted from the first syntax, in which case\nthe statement applies to the default database. An error occurs if there\nis no default database.\n\no https://dev.mysql.com/doc/refman/5.6/en/alter-database.html#alter-dat\n  abase-charset\n\no https://dev.mysql.com/doc/refman/5.6/en/alter-database.html#alter-dat\n  abase-upgrading\n\nCharacter Set and Collation Options\n\nThe CHARACTER SET clause changes the default database character set.\nThe COLLATE clause changes the default database collation. For\ninformation about character set and collation names, see\nhttps://dev.mysql.com/doc/refman/5.6/en/charset.html.\n\nTo see the available character sets and collations, use the SHOW\nCHARACTER SET and SHOW COLLATION statements, respectively. See [HELP\nSHOW CHARACTER SET], and [HELP SHOW COLLATION].\n\nA stored routine that uses the database defaults when the routine is\ncreated includes those defaults as part of its definition. (In a stored\nroutine, variables with character data types use the database defaults\nif the character set or collation are not specified explicitly. See\n[HELP CREATE PROCEDURE].) If you change the default character set or\ncollation for a database, any stored routines that are to use the new\ndefaults must be dropped and recreated.\n\nUpgrading from Versions Older than MySQL 5.1\n\nThe syntax that includes the UPGRADE DATA DIRECTORY NAME clause updates\nthe name of the directory associated with the database to use the\nencoding implemented in MySQL 5.1 for mapping database names to\ndatabase directory names (see\nhttps://dev.mysql.com/doc/refman/5.6/en/identifier-mapping.html). This\nclause is for use under these conditions:\n\no It is intended when upgrading MySQL to 5.1 or later from older\n  versions.\n\no It is intended to update a database directory name to the current\n  encoding format if the name contains special characters that need\n  encoding.\n\no The statement is used by mysqlcheck (as invoked by mysql_upgrade).\n\nFor example, if a database in MySQL 5.0 has the name a-b-c, the name\ncontains instances of the - (dash) character. In MySQL 5.0, the\ndatabase directory is also named a-b-c, which is not necessarily safe\nfor all file systems. In MySQL 5.1 and later, the same database name is\nencoded as a@002db@002dc to produce a file system-neutral directory\nname.\n\nWhen a MySQL installation is upgraded to MySQL 5.1 or later from an\nolder version,the server displays a name such as a-b-c (which is in the\nold format) as #mysql50#a-b-c, and you must refer to the name using the\n#mysql50# prefix. Use UPGRADE DATA DIRECTORY NAME in this case to\nexplicitly tell the server to re-encode the database directory name to\nthe current encoding format:\n\nALTER DATABASE `#mysql50#a-b-c` UPGRADE DATA DIRECTORY NAME;\n\nAfter executing this statement, you can refer to the database as a-b-c\nwithout the special #mysql50# prefix.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-database.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-database.html');
INSERT INTO `help_topic` VALUES (435, 'ALTER LOGFILE GROUP', 35, 'Syntax:\nALTER LOGFILE GROUP logfile_group\n    ADD UNDOFILE \'file_name\'\n    [INITIAL_SIZE [=] size]\n    [WAIT]\n    ENGINE [=] engine_name\n\nThis statement adds an UNDO file named \'file_name\' to an existing log\nfile group logfile_group. An ALTER LOGFILE GROUP statement has one and\nonly one ADD UNDOFILE clause. No DROP UNDOFILE clause is currently\nsupported.\n\n*Note*:\n\nAll NDB Cluster Disk Data objects share the same namespace. This means\nthat each Disk Data object must be uniquely named (and not merely each\nDisk Data object of a given type). For example, you cannot have a\ntablespace and an undo log file with the same name, or an undo log file\nand a data file with the same name.\n\nThe optional INITIAL_SIZE parameter sets the UNDO file\'s initial size\nin bytes; if not specified, the initial size defaults to 134217728 (128\nMB). Prior to MySQL NDB Cluster 7.3.2, this value was required to be\nspecified using digits; in MySQL NDB Cluster 7.3.2 and later, you may\noptionally follow size with a one-letter abbreviation for an order of\nmagnitude, similar to those used in my.cnf. Generally, this is one of\nthe letters M (megabytes) or G (gigabytes). (Bug #13116514, Bug\n#16104705, Bug #62858)\n\nOn 32-bit systems, the maximum supported value for INITIAL_SIZE is\n4294967296 (4 GB). (Bug #29186)\n\nThe minimum allowed value for INITIAL_SIZE is 1048576 (1 MB). (Bug\n#29574)\n\n*Note*:\n\nWAIT is parsed but otherwise ignored. This keyword currently has no\neffect, and is intended for future expansion.\n\nThe ENGINE parameter (required) determines the storage engine which is\nused by this log file group, with engine_name being the name of the\nstorage engine. Currently, the only accepted values for engine_name are\n\"NDBCLUSTER\" and \"NDB\". The two values are equivalent.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-logfile-group.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-logfile-group.html');
INSERT INTO `help_topic` VALUES (464, 'DROP VIEW', 35, 'Syntax:\nDROP VIEW [IF EXISTS]\n    view_name [, view_name] ...\n    [RESTRICT | CASCADE]\n\nDROP VIEW removes one or more views. You must have the DROP privilege\nfor each view.\n\nIf any views named in the argument list do not exist, the statement\nreturns an error indicating by name which nonexisting views it was\nunable to drop, but also drops all views in the list that do exist.\n\nThe IF EXISTS clause prevents an error from occurring for views that\ndon\'t exist. When this clause is given, a NOTE is generated for each\nnonexistent view. See [HELP SHOW WARNINGS].\n\nRESTRICT and CASCADE, if given, are parsed and ignored.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-view.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-view.html');
INSERT INTO `help_topic` VALUES (470, 'HANDLER', 36, 'Syntax:\nHANDLER tbl_name OPEN [ [AS] alias]\n\nHANDLER tbl_name READ index_name { = | <= | >= | < | > } (value1,value2,...)\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ { FIRST | NEXT }\n    [ WHERE where_condition ] [LIMIT ... ]\n\nHANDLER tbl_name CLOSE\n\nThe HANDLER statement provides direct access to table storage engine\ninterfaces. It is available for InnoDB and MyISAM tables.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/handler.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/handler.html');
INSERT INTO `help_topic` VALUES (472, 'INSERT SELECT', 36, 'Syntax:\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    SELECT ...\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nvalue:\n    {expr | DEFAULT}\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n\nWith INSERT ... SELECT, you can quickly insert many rows into a table\nfrom the result of a SELECT statement, which can select from one or\nmany tables. For example:\n\nINSERT INTO tbl_temp2 (fld_id)\n  SELECT tbl_temp1.fld_order_id\n  FROM tbl_temp1 WHERE tbl_temp1.fld_order_id > 100;\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/insert-select.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/insert-select.html');
INSERT INTO `help_topic` VALUES (436, 'ALTER PROCEDURE', 35, 'Syntax:\nALTER PROCEDURE proc_name [characteristic ...]\n\ncharacteristic: {\n    COMMENT \'string\'\n  | LANGUAGE SQL\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}\n\nThis statement can be used to change the characteristics of a stored\nprocedure. More than one change may be specified in an ALTER PROCEDURE\nstatement. However, you cannot change the parameters or body of a\nstored procedure using this statement; to make such changes, you must\ndrop and re-create the procedure using DROP PROCEDURE and CREATE\nPROCEDURE.\n\nYou must have the ALTER ROUTINE privilege for the procedure. By\ndefault, that privilege is granted automatically to the procedure\ncreator. This behavior can be changed by disabling the\nautomatic_sp_privileges system variable. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-routines-privileges.html\n.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-procedure.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-procedure.html');
INSERT INTO `help_topic` VALUES (438, 'ALTER TABLE', 35, 'Syntax:\nALTER [ONLINE | OFFLINE] [IGNORE] TABLE tbl_name\n    [alter_option [, alter_option] ...]\n    [partition_options]\n\nalter_option: {\n    table_options\n  | ADD [COLUMN] col_name column_definition\n        [FIRST | AFTER col_name]\n  | ADD [COLUMN] (col_name column_definition,...)\n  | ADD {INDEX | KEY} [index_name]\n        [index_type] (key_part,...) [index_option] ...\n  | ADD {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name]\n        (key_part,...) [index_option] ...\n  | ADD [CONSTRAINT [symbol]] PRIMARY KEY\n        [index_type] (key_part,...)\n        [index_option] ...\n  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]\n        [index_name] [index_type] (key_part,...)\n        [index_option] ...\n  | ADD [CONSTRAINT [symbol]] FOREIGN KEY\n        [index_name] (col_name,...)\n        reference_definition\n  | ADD CHECK (expr)\n  | ALGORITHM [=] {DEFAULT | INPLACE | COPY}\n  | ALTER [COLUMN] col_name {\n        SET DEFAULT {literal | (expr)}\n      | DROP DEFAULT\n    }\n  | CHANGE [COLUMN] old_col_name new_col_name column_definition\n        [FIRST | AFTER col_name]\n  | [DEFAULT] CHARACTER SET [=] charset_name [COLLATE [=] collation_name]\n  | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]\n  | {DISABLE | ENABLE} KEYS\n  | {DISCARD | IMPORT} TABLESPACE\n  | DROP [COLUMN] col_name\n  | DROP {INDEX | KEY} index_name\n  | DROP PRIMARY KEY\n  | DROP FOREIGN KEY fk_symbol\n  | FORCE\n  | LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}\n  | MODIFY [COLUMN] col_name column_definition\n        [FIRST | AFTER col_name]\n  | ORDER BY col_name [, col_name] ...\n  | RENAME [TO | AS] new_tbl_name\n}\n\npartition_options:\n    partition_option [partition_option] ...\n\npartition_option: {\n    ADD PARTITION (partition_definition)\n  | DROP PARTITION partition_names\n  | TRUNCATE PARTITION {partition_names | ALL}\n  | COALESCE PARTITION number\n  | REORGANIZE PARTITION partition_names INTO (partition_definitions)\n  | EXCHANGE PARTITION partition_name WITH TABLE tbl_name\n  | ANALYZE PARTITION {partition_names | ALL}\n  | CHECK PARTITION {partition_names | ALL}\n  | OPTIMIZE PARTITION {partition_names | ALL}\n  | REBUILD PARTITION {partition_names | ALL}\n  | REPAIR PARTITION {partition_names | ALL}\n  | REMOVE PARTITIONING\n}\n\nkey_part:\n    col_name [(length)] [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH}\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT \'string\'\n}\n\ntable_options:\n    table_option [[,] table_option] ...\n\ntable_option: {\n    AUTO_INCREMENT [=] value\n  | AVG_ROW_LENGTH [=] value\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | CHECKSUM [=] {0 | 1}\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] \'string\'\n  | CONNECTION [=] \'connect_string\'\n  | {DATA | INDEX} DIRECTORY [=] \'absolute path to directory\'\n  | DELAY_KEY_WRITE [=] {0 | 1}\n  | ENGINE [=] engine_name\n  | INSERT_METHOD [=] { NO | FIRST | LAST }\n  | KEY_BLOCK_SIZE [=] value\n  | MAX_ROWS [=] value\n  | MIN_ROWS [=] value\n  | PACK_KEYS [=] {0 | 1 | DEFAULT}\n  | PASSWORD [=] \'string\'\n  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}\n  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}\n  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}\n  | STATS_SAMPLE_PAGES [=] value\n  | TABLESPACE tablespace_name [STORAGE {DISK | MEMORY}]\n  | UNION [=] (tbl_name[,tbl_name]...)\n}\n\nALTER TABLE changes the structure of a table. For example, you can add\nor delete columns, create or destroy indexes, change the type of\nexisting columns, or rename columns or the table itself. You can also\nchange characteristics such as the storage engine used for the table or\nthe table comment.\n\no To use ALTER TABLE, you need ALTER, CREATE, and INSERT privileges for\n  the table. Renaming a table requires ALTER and DROP on the old table,\n  ALTER, CREATE, and INSERT on the new table.\n\no Following the table name, specify the alterations to be made. If none\n  are given, ALTER TABLE does nothing.\n\no The syntax for many of the permissible alterations is similar to\n  clauses of the CREATE TABLE statement. column_definition clauses use\n  the same syntax for ADD and CHANGE as for CREATE TABLE. For more\n  information, see [HELP CREATE TABLE].\n\no The word COLUMN is optional and can be omitted.\n\no Multiple ADD, ALTER, DROP, and CHANGE clauses are permitted in a\n  single ALTER TABLE statement, separated by commas. This is a MySQL\n  extension to standard SQL, which permits only one of each clause per\n  ALTER TABLE statement. For example, to drop multiple columns in a\n  single statement, do this:\n\nALTER TABLE t2 DROP COLUMN c, DROP COLUMN d;\n\no If a storage engine does not support an attempted ALTER TABLE\n  operation, a warning may result. Such warnings can be displayed with\n  SHOW WARNINGS. See [HELP SHOW WARNINGS]. For information on\n  troubleshooting ALTER TABLE, see\n  https://dev.mysql.com/doc/refman/5.6/en/alter-table-problems.html.\n\no For usage examples, see\n  https://dev.mysql.com/doc/refman/5.6/en/alter-table-examples.html.\n\no With the mysql_info()\n  (https://dev.mysql.com/doc/c-api/5.6/en/mysql-info.html) C API\n  function, you can find out how many rows were copied by ALTER TABLE,\n  and (when IGNORE is used) how many rows were deleted due to\n  duplication of unique key values. See mysql_info()\n  (https://dev.mysql.com/doc/c-api/5.6/en/mysql-info.html).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-table.html');
INSERT INTO `help_topic` VALUES (478, 'DUAL', 36, 'You are permitted to specify DUAL as a dummy table name in situations\nwhere no tables are referenced:\n\nmysql> SELECT 1 + 1 FROM DUAL;\n        -> 2\n\nDUAL is purely for the convenience of people who require that all\nSELECT statements should have FROM and possibly other clauses. MySQL\nmay ignore the clauses. MySQL does not require FROM DUAL if no tables\nare referenced.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/select.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/select.html');
INSERT INTO `help_topic` VALUES (486, 'SAVEPOINT', 37, 'Syntax:\nSAVEPOINT identifier\nROLLBACK [WORK] TO [SAVEPOINT] identifier\nRELEASE SAVEPOINT identifier\n\nInnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,\nRELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/savepoint.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/savepoint.html');
INSERT INTO `help_topic` VALUES (439, 'ALTER TABLESPACE', 35, 'Syntax:\nALTER TABLESPACE tablespace_name\n    {ADD | DROP} DATAFILE \'file_name\'\n    [INITIAL_SIZE [=] size]\n    [WAIT]\n    ENGINE [=] engine_name\n\nThis statement is used either to add a new data file, or to drop a data\nfile from a tablespace.\n\nThe ADD DATAFILE variant enables you to specify an initial size using\nan INITIAL_SIZE clause, where size is measured in bytes; the default\nvalue is 134217728 (128 MB). Prior to MySQL NDB Cluster 7.3.2, this\nvalue was required to be specified using digits (Bug #13116514, Bug\n#16104705, Bug #62858); in MySQL NDB Cluster 7.3.2 and later, you may\noptionally follow size with a one-letter abbreviation for an order of\nmagnitude, similar to those used in my.cnf. Generally, this is one of\nthe letters M (megabytes) or G (gigabytes).\n\n*Note*:\n\nAll NDB Cluster Disk Data objects share the same namespace. This means\nthat each Disk Data object must be uniquely named (and not merely each\nDisk Data object of a given type). For example, you cannot have a\ntablespace and a data file with the same name, or an undo log file and\na tablespace with the same name.\n\nOn 32-bit systems, the maximum supported value for INITIAL_SIZE is\n4294967296 (4 GB). (Bug #29186)\n\nINITIAL_SIZE is rounded, explicitly, as for CREATE TABLESPACE.\n\nOnce a data file has been created, its size cannot be changed; however,\nyou can add more data files to the tablespace using additional ALTER\nTABLESPACE ... ADD DATAFILE statements.\n\nUsing DROP DATAFILE with ALTER TABLESPACE drops the data file\n\'file_name\' from the tablespace. You cannot drop a data file from a\ntablespace which is in use by any table; in other words, the data file\nmust be empty (no extents used). See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-disk-data-objects\n.html. In addition, any data file to be dropped must previously have\nbeen added to the tablespace with CREATE TABLESPACE or ALTER\nTABLESPACE.\n\nBoth ALTER TABLESPACE ... ADD DATAFILE and ALTER TABLESPACE ... DROP\nDATAFILE require an ENGINE clause which specifies the storage engine\nused by the tablespace. Currently, the only accepted values for\nengine_name are NDB and NDBCLUSTER.\n\nWAIT is parsed but otherwise ignored, and so has no effect in MySQL\n5.6. It is intended for future expansion.\n\nWhen ALTER TABLESPACE ... ADD DATAFILE is used with ENGINE = NDB, a\ndata file is created on each Cluster data node. You can verify that the\ndata files were created and obtain information about them by querying\nthe INFORMATION_SCHEMA.FILES table. For example, the following query\nshows all data files belonging to the tablespace named newts:\n\nmysql> SELECT LOGFILE_GROUP_NAME, FILE_NAME, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE TABLESPACE_NAME = \'newts\' AND FILE_TYPE = \'DATAFILE\';\n+--------------------+--------------+----------------+\n| LOGFILE_GROUP_NAME | FILE_NAME    | EXTRA          |\n+--------------------+--------------+----------------+\n| lg_3               | newdata.dat  | CLUSTER_NODE=3 |\n| lg_3               | newdata.dat  | CLUSTER_NODE=4 |\n| lg_3               | newdata2.dat | CLUSTER_NODE=3 |\n| lg_3               | newdata2.dat | CLUSTER_NODE=4 |\n+--------------------+--------------+----------------+\n2 rows in set (0.03 sec)\n\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-files-table.\nhtml.\n\nALTER TABLESPACE is useful only with Disk Data storage for NDB Cluster.\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-disk-data.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-tablespace.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-tablespace.html');
INSERT INTO `help_topic` VALUES (443, 'CREATE EVENT', 35, 'Syntax:\nCREATE\n    [DEFINER = user]\n    EVENT\n    [IF NOT EXISTS]\n    event_name\n    ON SCHEDULE schedule\n    [ON COMPLETION [NOT] PRESERVE]\n    [ENABLE | DISABLE | DISABLE ON SLAVE]\n    [COMMENT \'string\']\n    DO event_body;\n\nschedule: {\n    AT timestamp [+ INTERVAL interval] ...\n  | EVERY interval\n    [STARTS timestamp [+ INTERVAL interval] ...]\n    [ENDS timestamp [+ INTERVAL interval] ...]\n}\n\ninterval:\n    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n\nThis statement creates and schedules a new event. The event does not\nrun unless the Event Scheduler is enabled. For information about\nchecking Event Scheduler status and enabling it if necessary, see\nhttps://dev.mysql.com/doc/refman/5.6/en/events-configuration.html.\n\nCREATE EVENT requires the EVENT privilege for the schema in which the\nevent is to be created. If the DEFINER clause is present, the\nprivileges required depend on the user value, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\n\nThe minimum requirements for a valid CREATE EVENT statement are as\nfollows:\n\no The keywords CREATE EVENT plus an event name, which uniquely\n  identifies the event in a database schema.\n\no An ON SCHEDULE clause, which determines when and how often the event\n  executes.\n\no A DO clause, which contains the SQL statement to be executed by an\n  event.\n\nThis is an example of a minimal CREATE EVENT statement:\n\nCREATE EVENT myevent\n    ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;\n\nThe previous statement creates an event named myevent. This event\nexecutes once---one hour following its creation---by running an SQL\nstatement that increments the value of the myschema.mytable table\'s\nmycol column by 1.\n\nThe event_name must be a valid MySQL identifier with a maximum length\nof 64 characters. Event names are not case-sensitive, so you cannot\nhave two events named myevent and MyEvent in the same schema. In\ngeneral, the rules governing event names are the same as those for\nnames of stored routines. See\nhttps://dev.mysql.com/doc/refman/5.6/en/identifiers.html.\n\nAn event is associated with a schema. If no schema is indicated as part\nof event_name, the default (current) schema is assumed. To create an\nevent in a specific schema, qualify the event name with a schema using\nschema_name.event_name syntax.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-event.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-event.html');
INSERT INTO `help_topic` VALUES (487, 'ROLLBACK TO SAVEPOINT', 37, 'Syntax:\nSAVEPOINT identifier\nROLLBACK [WORK] TO [SAVEPOINT] identifier\nRELEASE SAVEPOINT identifier\n\nInnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,\nRELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/savepoint.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/savepoint.html');
INSERT INTO `help_topic` VALUES (488, 'RELEASE SAVEPOINT', 37, 'Syntax:\nSAVEPOINT identifier\nROLLBACK [WORK] TO [SAVEPOINT] identifier\nRELEASE SAVEPOINT identifier\n\nInnoDB supports the SQL statements SAVEPOINT, ROLLBACK TO SAVEPOINT,\nRELEASE SAVEPOINT and the optional WORK keyword for ROLLBACK.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/savepoint.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/savepoint.html');
INSERT INTO `help_topic` VALUES (494, 'RESET MASTER', 38, 'Syntax:\nRESET MASTER\n\nDeletes all binary log files listed in the index file, resets the\nbinary log index file to be empty, and creates a new binary log file.\n\nRESET MASTER also clears the values of the gtid_purged system variable\nas well as the global value of the gtid_executed system variable (but\nnot its session value); that is, executing this statement sets each of\nthese values to an empty string (\'\').\n\nThis statement is intended to be used only when the source is started\nfor the first time.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/reset-master.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/reset-master.html');
INSERT INTO `help_topic` VALUES (444, 'CREATE INDEX', 35, 'Syntax:\nCREATE [ONLINE | OFFLINE] [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name\n    [index_type]\n    ON tbl_name (key_part,...)\n    [index_option]\n    [algorithm_option | lock_option] ...\n\nkey_part:\n    col_name [(length)] [ASC | DESC]\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT \'string\'\n}\n\nindex_type:\n    USING {BTREE | HASH}\n\nalgorithm_option:\n    ALGORITHM [=] {DEFAULT | INPLACE | COPY}\n\nlock_option:\n    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}\n\nNormally, you create all indexes on a table at the time the table\nitself is created with CREATE TABLE. See [HELP CREATE TABLE]. This\nguideline is especially important for InnoDB tables, where the primary\nkey determines the physical layout of rows in the data file. CREATE\nINDEX enables you to add indexes to existing tables.\n\nCREATE INDEX is mapped to an ALTER TABLE statement to create indexes.\nSee [HELP ALTER TABLE]. CREATE INDEX cannot be used to create a PRIMARY\nKEY; use ALTER TABLE instead. For more information about indexes, see\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-indexes.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-index.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-index.html');
INSERT INTO `help_topic` VALUES (445, 'CREATE LOGFILE GROUP', 35, 'Syntax:\nCREATE LOGFILE GROUP logfile_group\n    ADD UNDOFILE \'undo_file\'\n    [INITIAL_SIZE [=] initial_size]\n    [UNDO_BUFFER_SIZE [=] undo_buffer_size]\n    [REDO_BUFFER_SIZE [=] redo_buffer_size]\n    [NODEGROUP [=] nodegroup_id]\n    [WAIT]\n    [COMMENT [=] \'string\']\n    ENGINE [=] engine_name\n\nThis statement creates a new log file group named logfile_group having\na single UNDO file named \'undo_file\'. A CREATE LOGFILE GROUP statement\nhas one and only one ADD UNDOFILE clause. For rules covering the naming\nof log file groups, see\nhttps://dev.mysql.com/doc/refman/5.6/en/identifiers.html.\n\n*Note*:\n\nAll NDB Cluster Disk Data objects share the same namespace. This means\nthat each Disk Data object must be uniquely named (and not merely each\nDisk Data object of a given type). For example, you cannot have a\ntablespace and a log file group with the same name, or a tablespace and\na data file with the same name.\n\nIn MySQL NDB Cluster 7.3 and later, you can have only one log file\ngroup per Cluster at any given time. (See Bug #16386)\n\nThe optional INITIAL_SIZE parameter sets the UNDO file\'s initial size;\nif not specified, it defaults to 128M (128 megabytes). The optional\nUNDO_BUFFER_SIZE parameter sets the size used by the UNDO buffer for\nthe log file group; The default value for UNDO_BUFFER_SIZE is 8M (eight\nmegabytes); this value cannot exceed the amount of system memory\navailable. Both of these parameters are specified in bytes. In MySQL\nNDB Cluster 7.3.2 and later, you may optionally follow either or both\nof these with a one-letter abbreviation for an order of magnitude,\nsimilar to those used in my.cnf. Generally, this is one of the letters\nM (for megabytes) or G (for gigabytes). Prior to MySQL NDB Cluster\n7.3.2, the values for these options could only be specified using\ndigits. (Bug #13116514, Bug #16104705, Bug #62858)\n\nMemory used for UNDO_BUFFER_SIZE comes from the global pool whose size\nis determined by the value of the SharedGlobalMemory data node\nconfiguration parameter. This includes any default value implied for\nthis option by the setting of the InitialLogFileGroup data node\nconfiguration parameter.\n\nThe maximum permitted for UNDO_BUFFER_SIZE is 629145600 (600 MB).\n\nOn 32-bit systems, the maximum supported value for INITIAL_SIZE is\n4294967296 (4 GB). (Bug #29186)\n\nThe minimum allowed value for INITIAL_SIZE is 1048576 (1 MB).\n\nThe ENGINE option determines the storage engine to be used by this log\nfile group, with engine_name being the name of the storage engine. In\nMySQL 5.6, this must be NDB (or NDBCLUSTER). If ENGINE is not set,\nMySQL tries to use the engine specified by the default_storage_engine\nserver system variable (formerly storage_engine). In any case, if the\nengine is not specified as NDB or NDBCLUSTER, the CREATE LOGFILE GROUP\nstatement appears to succeed but actually fails to create the log file\ngroup, as shown here:\n\nmysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE \'undo.dat\' INITIAL_SIZE = 10M;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------------------------------------------------------------+\n| Level | Code | Message                                                                                        |\n+-------+------+------------------------------------------------------------------------------------------------+\n| Error | 1478 | Table storage engine \'InnoDB\' does not support the create option \'TABLESPACE or LOGFILE GROUP\' |\n+-------+------+------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> DROP LOGFILE GROUP lg1 ENGINE = NDB;\nERROR 1529 (HY000): Failed to drop LOGFILE GROUP\n\nmysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE \'undo.dat\' INITIAL_SIZE = 10M\n    ->     ENGINE = NDB;\nQuery OK, 0 rows affected (2.97 sec)\n\nThe fact that the CREATE LOGFILE GROUP statement does not actually\nreturn an error when a non-NDB storage engine is named, but rather\nappears to succeed, is a known issue which we hope to address in a\nfuture release of NDB Cluster.\n\nREDO_BUFFER_SIZE, NODEGROUP, WAIT, and COMMENT are parsed but ignored,\nand so have no effect in MySQL 5.6. These options are intended for\nfuture expansion.\n\nWhen used with ENGINE [=] NDB, a log file group and associated UNDO log\nfile are created on each Cluster data node. You can verify that the\nUNDO files were created and obtain information about them by querying\nthe INFORMATION_SCHEMA.FILES table. For example:\n\nmysql> SELECT LOGFILE_GROUP_NAME, LOGFILE_GROUP_NUMBER, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE FILE_NAME = \'undo_10.dat\';\n+--------------------+----------------------+----------------+\n| LOGFILE_GROUP_NAME | LOGFILE_GROUP_NUMBER | EXTRA          |\n+--------------------+----------------------+----------------+\n| lg_3               |                   11 | CLUSTER_NODE=3 |\n| lg_3               |                   11 | CLUSTER_NODE=4 |\n+--------------------+----------------------+----------------+\n2 rows in set (0.06 sec)\n\nCREATE LOGFILE GROUP is useful only with Disk Data storage for NDB\nCluster. See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-disk-data.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-logfile-group.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-logfile-group.html');
INSERT INTO `help_topic` VALUES (496, 'CHANGE MASTER TO', 38, 'Syntax:\nCHANGE MASTER TO option [, option] ...\n\noption: {\n    MASTER_BIND = \'interface_name\'\n  | MASTER_HOST = \'host_name\'\n  | MASTER_USER = \'user_name\'\n  | MASTER_PASSWORD = \'password\'\n  | MASTER_PORT = port_num\n  | MASTER_CONNECT_RETRY = interval\n  | MASTER_RETRY_COUNT = count\n  | MASTER_DELAY = interval\n  | MASTER_HEARTBEAT_PERIOD = interval\n  | MASTER_LOG_FILE = \'source_log_name\'\n  | MASTER_LOG_POS = source_log_pos\n  | MASTER_AUTO_POSITION = {0|1}\n  | RELAY_LOG_FILE = \'relay_log_name\'\n  | RELAY_LOG_POS = relay_log_pos\n  | MASTER_SSL = {0|1}\n  | MASTER_SSL_CA = \'ca_file_name\'\n  | MASTER_SSL_CAPATH = \'ca_directory_name\'\n  | MASTER_SSL_CERT = \'cert_file_name\'\n  | MASTER_SSL_CRL = \'crl_file_name\'\n  | MASTER_SSL_CRLPATH = \'crl_directory_name\'\n  | MASTER_SSL_KEY = \'key_file_name\'\n  | MASTER_SSL_CIPHER = \'cipher_list\'\n  | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}\n  | IGNORE_SERVER_IDS = (server_id_list)\n}\n\nserver_id_list:\n    [server_id [, server_id] ... ]\n\nCHANGE MASTER TO changes the parameters that the replica uses for\nconnecting to the replication source server, for reading the source\'s\nbinary log, and reading the replica\'s relay log. It also updates the\ncontents of the replication metadata repositories (see\nhttps://dev.mysql.com/doc/refman/5.6/en/replica-logs.html). CHANGE\nMASTER TO requires the SUPER privilege.\n\nTo use CHANGE MASTER TO, the replication threads must be stopped (use\nSTOP SLAVE if necessary). In MySQL 5.6.11 and later, gtid_next must\nalso be set to AUTOMATIC (Bug #16062608).\n\nOptions not specified retain their value, except as indicated in the\nfollowing discussion. Thus, in most cases, there is no need to specify\noptions that do not change. For example, if the password to connect to\nyour MySQL source has changed, issue these statements to tell the\nreplica about the new password:\n\nSTOP SLAVE; -- if replication was running\nCHANGE MASTER TO MASTER_PASSWORD=\'new3cret\';\nSTART SLAVE; -- if you want to restart replication\n\nMASTER_HOST, MASTER_USER, MASTER_PASSWORD, and MASTER_PORT provide\ninformation to the replica about how to connect to its source:\n\no MASTER_HOST and MASTER_PORT are the host name (or IP address) of the\n  source host and its TCP/IP port.\n\n  *Note*:\n\n  Replication cannot use Unix socket files. You must be able to connect\n  to the source MySQL server using TCP/IP.\n\n  If you specify the MASTER_HOST or MASTER_PORT option, the replica\n  assumes that the source server is different from before (even if the\n  option value is the same as its current value). In this case, the old\n  values for the source\'s binary log file name and position are\n  considered no longer applicable, so if you do not specify\n  MASTER_LOG_FILE and MASTER_LOG_POS in the statement,\n  MASTER_LOG_FILE=\'\' and MASTER_LOG_POS=4 are silently appended to it.\n\n  Setting MASTER_HOST=\'\' (that is, setting its value explicitly to an\n  empty string) is not the same as not setting MASTER_HOST at all.\n  Beginning with MySQL 5.5, trying to set MASTER_HOST to an empty\n  string fails with an error. Previously, setting MASTER_HOST to an\n  empty string caused START SLAVE subsequently to fail. (Bug #28796)\n\n  In MySQL 5.6.5 and later, values used for MASTER_HOST and other\n  CHANGE MASTER TO options are checked for linefeed (\\n or 0x0A)\n  characters; the presence of such characters in these values causes\n  the statement to fail with ER_MASTER_INFO\n  (https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference\n  .html#error_er_master_info). (Bug #11758581, Bug #50801)\n\no MASTER_USER and MASTER_PASSWORD are the user name and password of the\n  account to use for connecting to the source. If you specify\n  MASTER_PASSWORD, MASTER_USER is also required. The password used for\n  a replication user account in a CHANGE MASTER TO statement is limited\n  to 32 characters in length; if the password is longer, the statement\n  succeeds, but any excess characters are silently truncated. This is\n  an issue specific to MySQL Replication, which is fixed in MySQL 5.7.\n  (Bug #11752299, Bug #43439)\n\n  It is possible to set an empty user name by specifying\n  MASTER_USER=\'\', but the replication channel cannot be started with an\n  empty user name. Only set an empty MASTER_USER user name if you need\n  to clear previously used credentials from the replica\'s repositories\n  for security purposes, and do not attempt to use the channel\n  afterwards. (Bug #13427949)\n\n  The text of a running CHANGE MASTER TO statement, including values\n  for MASTER_USER and MASTER_PASSWORD, can be seen in the output of a\n  concurrent SHOW PROCESSLIST statement. (The complete text of a START\n  SLAVE statement is also visible to SHOW PROCESSLIST.)\n\nThe MASTER_SSL_xxx options provide information about using SSL for the\nconnection. They correspond to the --ssl-xxx options described in\nhttps://dev.mysql.com/doc/refman/5.6/en/connection-options.html#encrypt\ned-connection-options, and\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-solutions-encrypted\n-connections.html. These options can be changed even on replicas that\nare compiled without SSL support. They are saved to the connection\nmetadata repository, but are ignored if the replica does not have SSL\nsupport enabled. MASTER_SSL_CRL and MASTER_SSL_CRLPATH were added in\nMySQL 5.6.3.\n\nMASTER_CONNECT_RETRY specifies how many seconds to wait between connect\nretries. The default is 60.\n\nMASTER_RETRY_COUNT, added in MySQL 5.6.1, limits the number of\nreconnection attempts and updates the value of the Master_Retry_Count\ncolumn in the output of SHOW SLAVE STATUS (also added in MySQL 5.6.1).\nThe default value is 24 * 3600 = 86400. MASTER_RETRY_COUNT is intended\nto replace the older --master-retry-count server option, and is now the\npreferred method for setting this limit. You are encouraged not to rely\non --master-retry-count in new applications and, when upgrading to\nMySQL 5.6.1 or later from earlier versions of MySQL, to update any\nexisting applications that rely on it, so that they use CHANGE MASTER\nTO ... MASTER_RETRY_COUNT instead.\n\nMASTER_DELAY specifies how many seconds behind the source the replica\nmust lag. An event received from the source is not executed until at\nleast interval seconds later than its execution on the source. The\ndefault is 0. An error occurs if interval is not a nonnegative integer\nin the range from 0 to 231−1. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-delayed.html. This\noption was added in MySQL 5.6.0.\n\nMASTER_BIND is for use on replicas having multiple network interfaces,\nand determines which of the replica\'s network interfaces is chosen for\nconnecting to the source.\n\nThe address configured with this option, if any, can be seen in the\nMaster_Bind column of the output from SHOW SLAVE STATUS. If you are\nusing tables for the replication metadata repositories (the server was\nstarted with master_info_repository=TABLE), the value can also be seen\nas the Master_bind column of the mysql.slave_master_info table.\n\nThe ability to bind a replica to a specific network interface was added\nin MySQL 5.6.2. This is also supported by MySQL NDB Cluster 7.3.1 and\nlater.\n\nMASTER_HEARTBEAT_PERIOD sets the interval in seconds between\nreplication heartbeats. Whenever the source\'s binary log is updated\nwith an event, the waiting period for the next heartbeat is reset.\ninterval is a decimal value having the range 0 to 4294967 seconds and a\nresolution in milliseconds; the smallest nonzero value is 0.001.\nHeartbeats are sent by the source only if there are no unsent events in\nthe binary log file for a period longer than interval.\n\nIf you are logging source connection information to tables,\nMASTER_HEARTBEAT_PERIOD can be seen as the value of the Heartbeat\ncolumn of the mysql.slave_master_info table.\n\nSetting interval to 0 disables heartbeats altogether. The default value\nfor interval is equal to the value of slave_net_timeout divided by 2.\n\nSetting @@GLOBAL.slave_net_timeout to a value less than that of the\ncurrent heartbeat interval results in a warning being issued. The\neffect of issuing RESET SLAVE on the heartbeat interval is to reset it\nto the default value.\n\nMASTER_LOG_FILE and MASTER_LOG_POS are the coordinates at which the\nreplication I/O thread should begin reading from the source the next\ntime the thread starts. RELAY_LOG_FILE and RELAY_LOG_POS are the\ncoordinates at which the replication SQL thread should begin reading\nfrom the relay log the next time the thread starts. If you specify\neither of MASTER_LOG_FILE or MASTER_LOG_POS, you cannot specify\nRELAY_LOG_FILE or RELAY_LOG_POS. In MySQL 5.6.5 and later, if you\nspecify either of MASTER_LOG_FILE or MASTER_LOG_POS, you also cannot\nspecify MASTER_AUTO_POSITION = 1 (described later in this section). If\nneither of MASTER_LOG_FILE or MASTER_LOG_POS is specified, the replica\nuses the last coordinates of the replication SQL thread before CHANGE\nMASTER TO was issued. This ensures that there is no discontinuity in\nreplication, even if the replication SQL thread was late compared to\nthe replication I/O thread, when you merely want to change, say, the\npassword to use.\n\nMASTER_AUTO_POSITION was added in MySQL 5.6.5. If MASTER_AUTO_POSITION\n= 1 is used with CHANGE MASTER TO, the replica attempts to connect to\nthe source using the GTID-based replication protocol.\n\nWhen using GTIDs, the replica tells the source which transactions it\nhas already received, executed, or both. To compute this set, it reads\nthe global value of gtid_executed and the value of the\nRetrieved_gtid_set column from SHOW SLAVE STATUS. Since the GTID of the\nlast transmitted transaction is included in Retrieved_gtid_set even if\nthe transaction was only partially transmitted, the last received GTID\nis subtracted from this set. Thus, the replica computes the following\nset:\n\nUNION(@@GLOBAL.gtid_executed, Retrieved_gtid_set - last_received_GTID)\n\nThis set is sent to the source as part of the initial handshake, and\nthe source sends back all transactions that it has executed which are\nnot part of the set. If any of these transactions have been already\npurged from the source\'s binary log, the source sends the error\nER_MASTER_HAS_PURGED_REQUIRED_GTIDS\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_master_has_purged_required_gtids) to the replica, and\nreplication does not start.\n\nWhen GTID-based replication is employed, the coordinates represented by\nMASTER_LOG_FILE and MASTER_LOG_POS are not used, and global transaction\nidentifiers are used instead. Thus the use of either or both of these\noptions together with MASTER_AUTO_POSITION causes an error.\n\nBeginning with MySQL 5.6.10, you can see whether replication is running\nwith autopositioning enabled by checking the output of SHOW SLAVE\nSTATUS. (Bug #15992220)\n\ngtid_mode must also be enabled before issuing CHANGE MASTER TO ...\nMASTER_AUTO_POSITION = 1. Otherwise, the statement fails with an error.\n\nTo revert to the older file-based replication protocol after using\nGTIDs, you can issue a new CHANGE MASTER TO statement that specifies\nMASTER_AUTO_POSITION = 0, as well as at least one of MASTER_LOG_FILE or\nMASTER_LOG_POS.\n\nCHANGE MASTER TO deletes all relay log files and starts a new one,\nunless you specify RELAY_LOG_FILE or RELAY_LOG_POS. In that case, relay\nlog files are kept; the relay_log_purge global variable is set silently\nto 0.\n\nPrior to MySQL 5.6.2, RELAY_LOG_FILE required an absolute path.\nBeginning with MySQL 5.6.2, the path can be relative, in which case it\nis assumed to be relative to the replica\'s data directory. (Bug #12190)\n\nIGNORE_SERVER_IDS takes a comma-separated list of 0 or more server IDs.\nEvents originating from the corresponding servers are ignored, with the\nexception of log rotation and deletion events, which are still recorded\nin the relay log.\n\nIn circular replication, the originating server normally acts as the\nterminator of its own events, so that they are not applied more than\nonce. Thus, this option is useful in circular replication when one of\nthe servers in the circle is removed. Suppose that you have a circular\nreplication setup with 4 servers, having server IDs 1, 2, 3, and 4, and\nserver 3 fails. When bridging the gap by starting replication from\nserver 2 to server 4, you can include IGNORE_SERVER_IDS = (3) in the\nCHANGE MASTER TO statement that you issue on server 4 to tell it to use\nserver 2 as its source instead of server 3. Doing so causes it to\nignore and not to propagate any statements that originated with the\nserver that is no longer in use.\n\nWhen a CHANGE MASTER TO statement is issued without any\nIGNORE_SERVER_IDS option, any existing list is preserved. To clear the\nlist of ignored servers, it is necessary to use the option with an\nempty list:\n\nCHANGE MASTER TO IGNORE_SERVER_IDS = ();\n\nRESET SLAVE ALL has no effect on the server ID list. This issue is\nfixed in MySQL 5.7. (Bug #18816897)\n\nIf IGNORE_SERVER_IDS contains the server\'s own ID and the server was\nstarted with the --replicate-same-server-id option enabled, an error\nresults.\n\nIn MySQL 5.6, the connection metadata repository and the output of SHOW\nSLAVE STATUS provide the list of servers that are currently ignored.\nFor more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/replica-logs-status.html, and\n[HELP SHOW SLAVE STATUS].\n\nIn MySQL 5.6, invoking CHANGE MASTER TO causes the previous values for\nMASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS to be\nwritten to the error log, along with other information about the\nreplica\'s state prior to execution.\n\nIn MySQL 5.6.7 and later, CHANGE MASTER TO causes an implicit commit of\nan ongoing transaction. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nCHANGE MASTER TO is useful for setting up a replica when you have the\nsnapshot of the source and have recorded the source binary log\ncoordinates corresponding to the time of the snapshot. After loading\nthe snapshot into the replica to synchronize it with the source, you\ncan run CHANGE MASTER TO MASTER_LOG_FILE=\'log_name\',\nMASTER_LOG_POS=log_pos on the replica to specify the coordinates at\nwhich the replica should begin reading the source\'s binary log.\n\nThe following example changes the source server the replica uses and\nestablishes the source\'s binary log coordinates from which the replica\nbegins reading. This is used when you want to set up the replica to\nreplicate the source:\n\nCHANGE MASTER TO\n  MASTER_HOST=\'source2.example.com\',\n  MASTER_USER=\'replication\',\n  MASTER_PASSWORD=\'bigs3cret\',\n  MASTER_PORT=3306,\n  MASTER_LOG_FILE=\'source2-bin.001\',\n  MASTER_LOG_POS=4,\n  MASTER_CONNECT_RETRY=10;\n\nThe next example shows an operation that is less frequently employed.\nIt is used when the replica has relay log files that you want it to\nexecute again for some reason. To do this, the source need not be\nreachable. You need only use CHANGE MASTER TO and start the SQL thread\n(START SLAVE SQL_THREAD):\n\nCHANGE MASTER TO\n  RELAY_LOG_FILE=\'replica-relay-bin.006\',\n  RELAY_LOG_POS=4025;\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/change-master-to.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/change-master-to.html');
INSERT INTO `help_topic` VALUES (498, 'SET GLOBAL SQL_SLAVE_SKIP_COUNTER', 38, 'Syntax:\nSET GLOBAL sql_slave_skip_counter = N\n\nThis statement skips the next N events from the source. This is useful\nfor recovering from replication stops caused by a statement.\n\nThis statement is valid only when the replication threads are not\nrunning. Otherwise, it produces an error.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-global-sql-slave-skip-counter.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-global-sql-slave-skip-counter.html');
INSERT INTO `help_topic` VALUES (503, 'DEALLOCATE PREPARE', 39, 'Syntax:\n{DEALLOCATE | DROP} PREPARE stmt_name\n\nTo deallocate a prepared statement produced with PREPARE, use a\nDEALLOCATE PREPARE statement that refers to the prepared statement\nname. Attempting to execute a prepared statement after deallocating it\nresults in an error. If too many prepared statements are created and\nnot deallocated by either the DEALLOCATE PREPARE statement or the end\nof the session, you might encounter the upper limit enforced by the\nmax_prepared_stmt_count system variable.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/deallocate-prepare.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/deallocate-prepare.html');
INSERT INTO `help_topic` VALUES (448, 'CREATE SERVER', 35, 'Syntax:\nCREATE SERVER server_name\n    FOREIGN DATA WRAPPER wrapper_name\n    OPTIONS (option [, option] ...)\n\noption: {\n    HOST character-literal\n  | DATABASE character-literal\n  | USER character-literal\n  | PASSWORD character-literal\n  | SOCKET character-literal\n  | OWNER character-literal\n  | PORT numeric-literal\n}\n\nThis statement creates the definition of a server for use with the\nFEDERATED storage engine. The CREATE SERVER statement creates a new row\nin the servers table in the mysql database. This statement requires the\nSUPER privilege.\n\nThe server_name should be a unique reference to the server. Server\ndefinitions are global within the scope of the server, it is not\npossible to qualify the server definition to a specific database.\nserver_name has a maximum length of 64 characters (names longer than 64\ncharacters are silently truncated), and is case-insensitive. You may\nspecify the name as a quoted string.\n\nThe wrapper_name is an identifier and may be quoted with single\nquotation marks.\n\nFor each option you must specify either a character literal or numeric\nliteral. Character literals are UTF-8, support a maximum length of 64\ncharacters and default to a blank (empty) string. String literals are\nsilently truncated to 64 characters. Numeric literals must be a number\nbetween 0 and 9999, default value is 0.\n\n*Note*:\n\nThe OWNER option is currently not applied, and has no effect on the\nownership or operation of the server connection that is created.\n\nThe CREATE SERVER statement creates an entry in the mysql.servers table\nthat can later be used with the CREATE TABLE statement when creating a\nFEDERATED table. The options that you specify are used to populate the\ncolumns in the mysql.servers table. The table columns are Server_name,\nHost, Db, Username, Password, Port and Socket.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-server.html\n\n', 'CREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER \'Remote\', HOST \'198.51.100.106\', DATABASE \'test\');\n', 'https://dev.mysql.com/doc/refman/5.6/en/create-server.html');
INSERT INTO `help_topic` VALUES (449, 'CREATE TABLE', 35, 'Syntax:\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    (create_definition,...)\n    [table_options]\n    [partition_options]\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    [(create_definition,...)]\n    [table_options]\n    [partition_options]\n    [IGNORE | REPLACE]\n    [AS] query_expression\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    { LIKE old_tbl_name | (LIKE old_tbl_name) }\n\ncreate_definition: {\n    col_name column_definition\n  | {INDEX | KEY} [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] PRIMARY KEY\n      [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]\n      [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] FOREIGN KEY\n      [index_name] (col_name,...)\n      reference_definition\n  | CHECK (expr)\n}\n\ncolumn_definition:\n    data_type [NOT NULL | NULL] [DEFAULT default_value]\n      [AUTO_INCREMENT] [UNIQUE [KEY]] [[PRIMARY] KEY]\n      [COMMENT \'string\']\n      [COLLATE collation_name]\n      [COLUMN_FORMAT {FIXED | DYNAMIC | DEFAULT}]\n      [STORAGE {DISK | MEMORY}]\n      [reference_definition]\n\ndata_type:\n    (see https://dev.mysql.com/doc/refman/5.6/en/data-types.html)\n\nkey_part:\n    col_name [(length)] [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH}\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT \'string\'\n}\n\nreference_definition:\n    REFERENCES tbl_name (key_part,...)\n      [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n      [ON DELETE reference_option]\n      [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\ntable_options:\n    table_option [[,] table_option] ...\n\ntable_option: {\n    AUTO_INCREMENT [=] value\n  | AVG_ROW_LENGTH [=] value\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | CHECKSUM [=] {0 | 1}\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] \'string\'\n  | CONNECTION [=] \'connect_string\'\n  | {DATA | INDEX} DIRECTORY [=] \'absolute path to directory\'\n  | DELAY_KEY_WRITE [=] {0 | 1}\n  | ENGINE [=] engine_name\n  | INSERT_METHOD [=] { NO | FIRST | LAST }\n  | KEY_BLOCK_SIZE [=] value\n  | MAX_ROWS [=] value\n  | MIN_ROWS [=] value\n  | PACK_KEYS [=] {0 | 1 | DEFAULT}\n  | PASSWORD [=] \'string\'\n  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}\n  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}\n  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}\n  | STATS_SAMPLE_PAGES [=] value\n  | TABLESPACE tablespace_name [STORAGE {DISK | MEMORY}]\n  | UNION [=] (tbl_name[,tbl_name]...)\n}\n\npartition_options:\n    PARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)\n        | RANGE{(expr) | COLUMNS(column_list)}\n        | LIST{(expr) | COLUMNS(column_list)} }\n    [PARTITIONS num]\n    [SUBPARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) }\n      [SUBPARTITIONS num]\n    ]\n    [(partition_definition [, partition_definition] ...)]\n\npartition_definition:\n    PARTITION partition_name\n        [VALUES\n            {LESS THAN {(expr | value_list) | MAXVALUE}\n            |\n            IN (value_list)}]\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] \'string\' ]\n        [DATA DIRECTORY [=] \'data_dir\']\n        [INDEX DIRECTORY [=] \'index_dir\']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n        [NODEGROUP [=] node_group_id]\n        [(subpartition_definition [, subpartition_definition] ...)]\n\nsubpartition_definition:\n    SUBPARTITION logical_name\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] \'string\' ]\n        [DATA DIRECTORY [=] \'data_dir\']\n        [INDEX DIRECTORY [=] \'index_dir\']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n        [NODEGROUP [=] node_group_id]\n\nquery_expression:\n    SELECT ...   (Some valid select or union statement)\n\nCREATE TABLE creates a table with the given name. You must have the\nCREATE privilege for the table.\n\nBy default, tables are created in the default database, using the\nInnoDB storage engine. An error occurs if the table exists, if there is\nno default database, or if the database does not exist.\n\nMySQL has no limit on the number of tables. The underlying file system\nmay have a limit on the number of files that represent tables.\nIndividual storage engines may impose engine-specific constraints.\nInnoDB permits up to 4 billion tables.\n\nFor information about the physical representation of a table, see\nhttps://dev.mysql.com/doc/refman/5.6/en/create-table-files.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-table.html');
INSERT INTO `help_topic` VALUES (504, 'DROP PREPARE', 39, 'Syntax:\n{DEALLOCATE | DROP} PREPARE stmt_name\n\nTo deallocate a prepared statement produced with PREPARE, use a\nDEALLOCATE PREPARE statement that refers to the prepared statement\nname. Attempting to execute a prepared statement after deallocating it\nresults in an error. If too many prepared statements are created and\nnot deallocated by either the DEALLOCATE PREPARE statement or the end\nof the session, you might encounter the upper limit enforced by the\nmax_prepared_stmt_count system variable.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/deallocate-prepare.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/deallocate-prepare.html');
INSERT INTO `help_topic` VALUES (450, 'FOREIGN KEY', 35, 'MySQL supports foreign keys, which permit cross-referencing related\ndata across tables, and foreign key constraints, which help keep the\nrelated data consistent.\n\nA foreign key relationship involves a parent table that holds the\ninitial column values, and a child table with column values that\nreference the parent column values. A foreign key constraint is defined\non the child table.\n\nThe essential syntax for a defining a foreign key constraint in a\nCREATE TABLE or ALTER TABLE statement includes the following:\n\n[CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html\n\n', 'CREATE TABLE product (\n    category INT NOT NULL, id INT NOT NULL,\n    price DECIMAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)   ENGINE=INNODB;\n\nCREATE TABLE product_order (\n    no INT NOT NULL AUTO_INCREMENT,\n    product_category INT NOT NULL,\n    product_id INT NOT NULL,\n    customer_id INT NOT NULL,\n\n    PRIMARY KEY(no),\n    INDEX (product_category, product_id),\n    INDEX (customer_id),\n\n    FOREIGN KEY (product_category, product_id)\n      REFERENCES product(category, id)\n      ON UPDATE CASCADE ON DELETE RESTRICT,\n\n    FOREIGN KEY (customer_id)\n      REFERENCES customer(id)\n)   ENGINE=INNODB;\n', 'https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html');
INSERT INTO `help_topic` VALUES (452, 'CREATE TRIGGER', 35, 'Syntax:\nCREATE\n    [DEFINER = user]\n    TRIGGER trigger_name\n    trigger_time trigger_event\n    ON tbl_name FOR EACH ROW\n    trigger_body\n\ntrigger_time: { BEFORE | AFTER }\n\ntrigger_event: { INSERT | UPDATE | DELETE }\n\nThis statement creates a new trigger. A trigger is a named database\nobject that is associated with a table, and that activates when a\nparticular event occurs for the table. The trigger becomes associated\nwith the table named tbl_name, which must refer to a permanent table.\nYou cannot associate a trigger with a TEMPORARY table or a view.\n\nTrigger names exist in the schema namespace, meaning that all triggers\nmust have unique names within a schema. Triggers in different schemas\ncan have the same name.\n\nThis section describes CREATE TRIGGER syntax. For additional\ndiscussion, see\nhttps://dev.mysql.com/doc/refman/5.6/en/trigger-syntax.html.\n\nCREATE TRIGGER requires the TRIGGER privilege for the table associated\nwith the trigger. If the DEFINER clause is present, the privileges\nrequired depend on the user value, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.\nIf binary logging is enabled, CREATE TRIGGER might require the SUPER\nprivilege, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-logging.html.\n\nThe DEFINER clause determines the security context to be used when\nchecking access privileges at trigger activation time, as described\nlater in this section.\n\ntrigger_time is the trigger action time. It can be BEFORE or AFTER to\nindicate that the trigger activates before or after each row to be\nmodified.\n\nBasic column value checks occur prior to trigger activation, so you\ncannot use BEFORE triggers to convert values inappropriate for the\ncolumn type to valid values.\n\ntrigger_event indicates the kind of operation that activates the\ntrigger. These trigger_event values are permitted:\n\no INSERT: The trigger activates whenever a new row is inserted into the\n  table (for example, through INSERT, LOAD DATA, and REPLACE\n  statements).\n\no UPDATE: The trigger activates whenever a row is modified (for\n  example, through UPDATE statements).\n\no DELETE: The trigger activates whenever a row is deleted from the\n  table (for example, through DELETE and REPLACE statements). DROP\n  TABLE and TRUNCATE TABLE statements on the table do not activate this\n  trigger, because they do not use DELETE. Dropping a partition does\n  not activate DELETE triggers, either.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-trigger.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-trigger.html');
INSERT INTO `help_topic` VALUES (458, 'DROP PROCEDURE', 35, 'Syntax:\nDROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name\n\nThese statements are used to drop a stored routine (a stored procedure\nor function). That is, the specified routine is removed from the\nserver. (DROP FUNCTION is also used to drop user-defined functions; see\n[HELP DROP FUNCTION UDF].)\n\nTo drop a stored routine, you must have the ALTER ROUTINE privilege for\nit. (If the automatic_sp_privileges system variable is enabled, that\nprivilege and EXECUTE are granted automatically to the routine creator\nwhen the routine is created and dropped from the creator when the\nroutine is dropped. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-routines-privileges.html\n.)\n\nThe IF EXISTS clause is a MySQL extension. It prevents an error from\noccurring if the procedure or function does not exist. A warning is\nproduced that can be viewed with SHOW WARNINGS.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-procedure.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-procedure.html');
INSERT INTO `help_topic` VALUES (510, 'ITERATE', 40, 'Syntax:\nITERATE label\n\nITERATE can appear only within LOOP, REPEAT, and WHILE statements.\nITERATE means \"start the loop again.\"\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/iterate.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/iterate.html');
INSERT INTO `help_topic` VALUES (511, 'LEAVE', 40, 'Syntax:\nLEAVE label\n\nThis statement is used to exit the flow control construct that has the\ngiven label. If the label is for the outermost stored program block,\nLEAVE exits the program.\n\nLEAVE can be used within BEGIN ... END or loop constructs (LOOP,\nREPEAT, WHILE).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/leave.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/leave.html');
INSERT INTO `help_topic` VALUES (514, 'RETURN', 40, 'Syntax:\nRETURN expr\n\nThe RETURN statement terminates execution of a stored function and\nreturns the value expr to the function caller. There must be at least\none RETURN statement in a stored function. There may be more than one\nif the function has multiple exit points.\n\nThis statement is not used in stored procedures, triggers, or events.\nThe LEAVE statement can be used to exit a stored program of those\ntypes.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/return.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/return.html');
INSERT INTO `help_topic` VALUES (515, 'WHILE', 40, 'Syntax:\n[begin_label:] WHILE search_condition DO\n    statement_list\nEND WHILE [end_label]\n\nThe statement list within a WHILE statement is repeated as long as the\nsearch_condition expression is true. statement_list consists of one or\nmore SQL statements, each terminated by a semicolon (;) statement\ndelimiter.\n\nA WHILE statement can be labeled. For the rules regarding label use,\nsee [HELP labels].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/while.html\n\n', 'CREATE PROCEDURE dowhile()\nBEGIN\n  DECLARE v1 INT DEFAULT 5;\n\n  WHILE v1 > 0 DO\n    ...\n    SET v1 = v1 - 1;\n  END WHILE;\nEND;\n', 'https://dev.mysql.com/doc/refman/5.6/en/while.html');
INSERT INTO `help_topic` VALUES (516, 'CLOSE', 40, 'Syntax:\nCLOSE cursor_name\n\nThis statement closes a previously opened cursor. For an example, see\nhttps://dev.mysql.com/doc/refman/5.6/en/cursors.html.\n\nAn error occurs if the cursor is not open.\n\nIf not closed explicitly, a cursor is closed at the end of the BEGIN\n... END block in which it was declared.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/close.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/close.html');
INSERT INTO `help_topic` VALUES (451, 'CREATE TABLESPACE', 35, 'Syntax:\nCREATE TABLESPACE tablespace_name\n    ADD DATAFILE \'file_name\'\n    USE LOGFILE GROUP logfile_group\n    [EXTENT_SIZE [=] extent_size]\n    [INITIAL_SIZE [=] initial_size]\n    [AUTOEXTEND_SIZE [=] autoextend_size]\n    [MAX_SIZE [=] max_size]\n    [NODEGROUP [=] nodegroup_id]\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n\nThis statement is used to create a tablespace, which can contain one or\nmore data files, providing storage space for tables. One data file is\ncreated and added to the tablespace using this statement. Additional\ndata files may be added to the tablespace by using the ALTER TABLESPACE\nstatement (see [HELP ALTER TABLESPACE]). For rules covering the naming\nof tablespaces, see\nhttps://dev.mysql.com/doc/refman/5.6/en/identifiers.html.\n\n*Note*:\n\nAll NDB Cluster Disk Data objects share the same namespace. This means\nthat each Disk Data object must be uniquely named (and not merely each\nDisk Data object of a given type). For example, you cannot have a\ntablespace and a log file group with the same name, or a tablespace and\na data file with the same name.\n\nA log file group of one or more UNDO log files must be assigned to the\ntablespace to be created with the USE LOGFILE GROUP clause.\nlogfile_group must be an existing log file group created with CREATE\nLOGFILE GROUP (see [HELP CREATE LOGFILE GROUP]). Multiple tablespaces\nmay use the same log file group for UNDO logging.\n\nThe EXTENT_SIZE sets the size, in bytes, of the extents used by any\nfiles belonging to the tablespace. The default value is 1M. The minimum\nsize is 32K, and theoretical maximum is 2G, although the practical\nmaximum size depends on a number of factors. In most cases, changing\nthe extent size does not have any measurable effect on performance, and\nthe default value is recommended for all but the most unusual\nsituations.\n\nAn extent is a unit of disk space allocation. One extent is filled with\nas much data as that extent can contain before another extent is used.\nIn theory, up to 65,535 (64K) extents may used per data file; however,\nthe recommended maximum is 32,768 (32K). The recommended maximum size\nfor a single data file is 32G---that is, 32K extents x 1 MB per extent.\nIn addition, once an extent is allocated to a given partition, it\ncannot be used to store data from a different partition; an extent\ncannot store data from more than one partition. This means, for example\nthat a tablespace having a single datafile whose INITIAL_SIZE is 256 MB\nand whose EXTENT_SIZE is 128M has just two extents, and so can be used\nto store data from at most two different disk data table partitions.\n\nYou can see how many extents remain free in a given data file by\nquerying the INFORMATION_SCHEMA.FILES table, and so derive an estimate\nfor how much space remains free in the file. For further discussion and\nexamples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-files-table.\nhtml.\n\nThe INITIAL_SIZE parameter sets the data file\'s total size in bytes.\nOnce the file has been created, its size cannot be changed; however,\nyou can add more data files to the tablespace using ALTER TABLESPACE\n... ADD DATAFILE. See [HELP ALTER TABLESPACE].\n\nINITIAL_SIZE is optional; its default value is 134217728 (128 MB).\n\nOn 32-bit systems, the maximum supported value for INITIAL_SIZE is\n4294967296 (4 GB). (Bug #29186)\n\nWhen setting EXTENT_SIZE, you may optionally follow the number with a\none-letter abbreviation for an order of magnitude, similar to those\nused in my.cnf. Generally, this is one of the letters M (for megabytes)\nor G (for gigabytes). In MySQL NDB Cluster 7.3.2 and later, these\nabbreviations are also supported when specifying INITIAL_SIZE as well.\n(Bug #13116514, Bug #16104705, Bug #62858)\n\nINITIAL_SIZE, EXTENT_SIZE, and UNDO_BUFFER_SIZE are subject to rounding\nas follows:\n\no EXTENT_SIZE and UNDO_BUFFER_SIZE are each rounded up to the nearest\n  whole multiple of 32K.\n\no INITIAL_SIZE is rounded down to the nearest whole multiple of 32K.\n\n  For data files, INITIAL_SIZE is subject to further rounding; the\n  result just obtained is rounded up to the nearest whole multiple of\n  EXTENT_SIZE (after any rounding).\n\nThe rounding just described is done explicitly, and a warning is issued\nby the MySQL Server when any such rounding is performed. The rounded\nvalues are also used by the NDB kernel for calculating\nINFORMATION_SCHEMA.FILES column values and other purposes. However, to\navoid an unexpected result, we suggest that you always use whole\nmultiples of 32K in specifying these options.\n\nAUTOEXTEND_SIZE, MAX_SIZE, NODEGROUP, WAIT, and COMMENT are parsed but\nignored, and so currently have no effect. These options are intended\nfor future expansion.\n\nThe ENGINE parameter determines the storage engine which uses this\ntablespace, with engine_name being the name of the storage engine.\nCurrently, engine_name must be one of the values NDB or NDBCLUSTER.\n\nWhen CREATE TABLESPACE is used with ENGINE = NDB, a tablespace and\nassociated data file are created on each Cluster data node. You can\nverify that the data files were created and obtain information about\nthem by querying the INFORMATION_SCHEMA.FILES table. For example:\n\nmysql> SELECT LOGFILE_GROUP_NAME, FILE_NAME, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE TABLESPACE_NAME = \'newts\' AND FILE_TYPE = \'DATAFILE\';\n+--------------------+-------------+----------------+\n| LOGFILE_GROUP_NAME | FILE_NAME   | EXTRA          |\n+--------------------+-------------+----------------+\n| lg_3               | newdata.dat | CLUSTER_NODE=3 |\n| lg_3               | newdata.dat | CLUSTER_NODE=4 |\n+--------------------+-------------+----------------+\n2 rows in set (0.01 sec)\n\n(See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-files-table.\nhtml.)\n\nCREATE TABLESPACE is useful only with Disk Data storage for NDB\nCluster. See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-disk-data.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-tablespace.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-tablespace.html');
INSERT INTO `help_topic` VALUES (519, 'OPEN', 40, 'Syntax:\nOPEN cursor_name\n\nThis statement opens a previously declared cursor. For an example, see\nhttps://dev.mysql.com/doc/refman/5.6/en/cursors.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/open.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/open.html');
INSERT INTO `help_topic` VALUES (526, 'CREATE USER', 41, 'Syntax:\nCREATE USER\n    user [auth_option] [, user [auth_option]] ...\n\nuser:\n    (see )\n\nauth_option: {\n    IDENTIFIED BY [PASSWORD] \'auth_string\'\n  | IDENTIFIED WITH auth_plugin [AS \'auth_string\']\n}\n\nThe CREATE USER statement creates new MySQL accounts. An error occurs\nif you try to create an account that already exists.\n\nTo use CREATE USER, you must have the global CREATE USER privilege, or\nthe INSERT privilege for the mysql system database. When the read_only\nsystem variable is enabled, CREATE USER additionally requires the SUPER\nprivilege.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-user.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-user.html');
INSERT INTO `help_topic` VALUES (538, 'DROP FUNCTION UDF', 43, 'Syntax:\nDROP FUNCTION [IF EXISTS] function_name\n\nThis statement drops the user-defined function (UDF) named\nfunction_name. (DROP FUNCTION is also used to drop stored functions;\nsee [HELP DROP PROCEDURE].)\n\nDROP FUNCTION is the complement of CREATE FUNCTION. It requires the\nDELETE privilege for the mysql system database because it removes the\nrow from the mysql.func system table that registers the function.\n\nDuring the normal startup sequence, the server loads UDFs registered in\nthe mysql.func table. Because DROP FUNCTION removes the mysql.func row\nfor the dropped function, the server does not load the function during\nsubsequent restarts.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-function-udf.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-function-udf.html');
INSERT INTO `help_topic` VALUES (459, 'DROP FUNCTION', 35, 'Syntax:\nDROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name\n\nThese statements are used to drop a stored routine (a stored procedure\nor function). That is, the specified routine is removed from the\nserver. (DROP FUNCTION is also used to drop user-defined functions; see\n[HELP DROP FUNCTION UDF].)\n\nTo drop a stored routine, you must have the ALTER ROUTINE privilege for\nit. (If the automatic_sp_privileges system variable is enabled, that\nprivilege and EXECUTE are granted automatically to the routine creator\nwhen the routine is created and dropped from the creator when the\nroutine is dropped. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-routines-privileges.html\n.)\n\nThe IF EXISTS clause is a MySQL extension. It prevents an error from\noccurring if the procedure or function does not exist. A warning is\nproduced that can be viewed with SHOW WARNINGS.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-procedure.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-procedure.html');
INSERT INTO `help_topic` VALUES (461, 'DROP TABLE', 35, 'Syntax:\nDROP [TEMPORARY] TABLE [IF EXISTS]\n    tbl_name [, tbl_name] ...\n    [RESTRICT | CASCADE]\n\nDROP TABLE removes one or more tables. You must have the DROP privilege\nfor each table.\n\nBe careful with this statement! For each table, it removes the table\ndefinition and all table data. If the table is partitioned, the\nstatement removes the table definition, all its partitions, all data\nstored in those partitions, and all partition definitions associated\nwith the dropped table.\n\nDropping a table also drops any triggers for the table.\n\nDROP TABLE causes an implicit commit, except when used with the\nTEMPORARY keyword. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\n*Important*:\n\nWhen a table is dropped, privileges granted specifically for the table\nare not automatically dropped. They must be dropped manually. See [HELP\nGRANT].\n\nIf any tables named in the argument list do not exist, DROP TABLE\nbehavior depends on whether the IF EXISTS clause is given:\n\no Without IF EXISTS, the statement drops all named tables that do\n  exist, and returns an error indicating which nonexisting tables it\n  was unable to drop.\n\no With IF EXISTS, no error occurs for nonexisting tables. The statement\n  drops all named tables that do exist, and generates a NOTE diagnostic\n  for each nonexistent table. These notes can be displayed with SHOW\n  WARNINGS. See [HELP SHOW WARNINGS].\n\nIF EXISTS can also be useful for dropping tables in unusual\ncircumstances under which there is an .frm file but no table managed by\nthe storage engine. (For example, if an abnormal server exit occurs\nafter removal of the table from the storage engine but before .frm file\nremoval.)\n\nThe TEMPORARY keyword has the following effects:\n\no The statement drops only TEMPORARY tables.\n\no The statement does not cause an implicit commit.\n\no No access rights are checked. A TEMPORARY table is visible only with\n  the session that created it, so no check is necessary.\n\nIncluding the TEMPORARY keyword is a good way to prevent accidentally\ndropping non-TEMPORARY tables.\n\nThe RESTRICT and CASCADE keywords do nothing. They are permitted to\nmake porting easier from other database systems.\n\nDROP TABLE is not supported with all innodb_force_recovery settings.\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/forcing-innodb-recovery.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-table.html');
INSERT INTO `help_topic` VALUES (462, 'DROP TABLESPACE', 35, 'Syntax:\nDROP TABLESPACE tablespace_name\n    ENGINE [=] engine_name\n\nThis statement drops a tablespace that was previously created using\nCREATE TABLESPACE (see [HELP CREATE TABLESPACE]).\n\n*Important*:\n\nThe tablespace to be dropped must not contain any data files; in other\nwords, before you can drop a tablespace, you must first drop each of\nits data files using ALTER TABLESPACE ... DROP DATAFILE (see [HELP\nALTER TABLESPACE]).\n\nThe ENGINE clause (required) specifies the storage engine used by the\ntablespace. Currently, the only accepted values for engine_name are NDB\nand NDBCLUSTER.\n\nDROP TABLESPACE is useful only with Disk Data storage for NDB Cluster.\nSee\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-disk-data.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-tablespace.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-tablespace.html');
INSERT INTO `help_topic` VALUES (466, 'TRUNCATE TABLE', 35, 'Syntax:\nTRUNCATE [TABLE] tbl_name\n\nTRUNCATE TABLE empties a table completely. It requires the DROP\nprivilege.\n\nLogically, TRUNCATE TABLE is similar to a DELETE statement that deletes\nall rows, or a sequence of DROP TABLE and CREATE TABLE statements. To\nachieve high performance, it bypasses the DML method of deleting data.\nThus, it cannot be rolled back, it does not cause ON DELETE triggers to\nfire, and it cannot be performed for InnoDB tables with parent-child\nforeign key relationships.\n\nAlthough TRUNCATE TABLE is similar to DELETE, it is classified as a DDL\nstatement rather than a DML statement. It differs from DELETE in the\nfollowing ways:\n\no Truncate operations drop and re-create the table, which is much\n  faster than deleting rows one by one, particularly for large tables.\n\no Truncate operations cause an implicit commit, and so cannot be rolled\n  back. See\n  https://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\no Truncation operations cannot be performed if the session holds an\n  active table lock.\n\no TRUNCATE TABLE fails for an InnoDB table or NDB table if there are\n  any FOREIGN KEY constraints from other tables that reference the\n  table. Foreign key constraints between columns of the same table are\n  permitted.\n\no Truncation operations do not return a meaningful value for the number\n  of deleted rows. The usual result is \"0 rows affected,\" which should\n  be interpreted as \"no information.\"\n\no As long as the table format file tbl_name.frm is valid, the table can\n  be re-created as an empty table with TRUNCATE TABLE, even if the data\n  or index files have become corrupted.\n\no Any AUTO_INCREMENT value is reset to its start value. This is true\n  even for MyISAM and InnoDB, which normally do not reuse sequence\n  values.\n\no When used with partitioned tables, TRUNCATE TABLE preserves the\n  partitioning; that is, the data and index files are dropped and\n  re-created, while the partition definitions (.par) file is\n  unaffected.\n\no The TRUNCATE TABLE statement does not invoke ON DELETE triggers.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/truncate-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/truncate-table.html');
INSERT INTO `help_topic` VALUES (540, 'UNINSTALL PLUGIN', 44, 'Syntax:\nUNINSTALL PLUGIN plugin_name\n\nThis statement removes an installed server plugin. UNINSTALL PLUGIN is\nthe complement of INSTALL PLUGIN. It requires the DELETE privilege for\nthe mysql.plugin system table because it removes the row from that\ntable that registers the plugin.\n\nplugin_name must be the name of some plugin that is listed in the\nmysql.plugin table. The server executes the plugin\'s deinitialization\nfunction and removes the row for the plugin from the mysql.plugin\nsystem table, so that subsequent server restarts do not load and\ninitialize the plugin. UNINSTALL PLUGIN does not remove the plugin\'s\nshared library file.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/uninstall-plugin.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/uninstall-plugin.html');
INSERT INTO `help_topic` VALUES (465, 'RENAME TABLE', 35, 'Syntax:\nRENAME TABLE\n    tbl_name TO new_tbl_name\n    [, tbl_name2 TO new_tbl_name2] ...\n\nRENAME TABLE renames one or more tables. You must have ALTER and DROP\nprivileges for the original table, and CREATE and INSERT privileges for\nthe new table.\n\nFor example, to rename a table named old_table to new_table, use this\nstatement:\n\nRENAME TABLE old_table TO new_table;\n\nThat statement is equivalent to the following ALTER TABLE statement:\n\nALTER TABLE old_table RENAME new_table;\n\nRENAME TABLE, unlike ALTER TABLE, can rename multiple tables within a\nsingle statement:\n\nRENAME TABLE old_table1 TO new_table1,\n             old_table2 TO new_table2,\n             old_table3 TO new_table3;\n\nRenaming operations are performed left to right. Thus, to swap two\ntable names, do this (assuming that a table with the intermediary name\ntmp_table does not already exist):\n\nRENAME TABLE old_table TO tmp_table,\n             new_table TO old_table,\n             tmp_table TO new_table;\n\nMetadata locks on tables are acquired in name order, which in some\ncases can make a difference in operation outcome when multiple\ntransactions execute concurrently. See\nhttps://dev.mysql.com/doc/refman/5.6/en/metadata-locking.html.\n\nTo execute RENAME TABLE, there must be no active transactions or tables\nlocked with LOCK TABLES. With the transaction table locking conditions\nsatisfied, the rename operation is done atomically; no other session\ncan access any of the tables while the rename is in progress.\n\nIf any errors occur during a RENAME TABLE, the statement fails and no\nchanges are made.\n\nYou can use RENAME TABLE to move a table from one database to another:\n\nRENAME TABLE current_db.tbl_name TO other_db.tbl_name;\n\nUsing this method to move all tables from one database to a different\none in effect renames the database (an operation for which MySQL has no\nsingle statement), except that the original database continues to\nexist, albeit with no tables.\n\nLike RENAME TABLE, ALTER TABLE ... RENAME can also be used to move a\ntable to a different database. Regardless of the statement used, if the\nrename operation would move the table to a database located on a\ndifferent file system, the success of the outcome is platform specific\nand depends on the underlying operating system calls used to move table\nfiles.\n\nIf a table has triggers, attempts to rename the table into a different\ndatabase fail with a Trigger in wrong schema (ER_TRG_IN_WRONG_SCHEMA\n(https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference.h\ntml#error_er_trg_in_wrong_schema)) error.\n\nTo rename TEMPORARY tables, RENAME TABLE does not work. Use ALTER TABLE\ninstead.\n\nRENAME TABLE works for views, except that views cannot be renamed into\na different database.\n\nAny privileges granted specifically for a renamed table or view are not\nmigrated to the new name. They must be changed manually.\n\nRENAME TABLE tbl_name TO new_tbl_name changes internally generated\nforeign key constraint names and user-defined foreign key constraint\nnames that begin with the string \"tbl_name_ibfk_\" to reflect the new\ntable name. InnoDB interprets foreign key constraint names that begin\nwith the string \"tbl_name_ibfk_\" as internally generated names.\n\nForeign key constraint names that point to the renamed table are\nautomatically updated unless there is a conflict, in which case the\nstatement fails with an error. A conflict occurs if the renamed\nconstraint name already exists. In such cases, you must drop and\nre-create the foreign keys for them to function properly.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/rename-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/rename-table.html');
INSERT INTO `help_topic` VALUES (467, 'CALL', 36, 'Syntax:\nCALL sp_name([parameter[,...]])\nCALL sp_name[()]\n\nThe CALL statement invokes a stored procedure that was defined\npreviously with CREATE PROCEDURE.\n\nStored procedures that take no arguments can be invoked without\nparentheses. That is, CALL p() and CALL p are equivalent.\n\nCALL can pass back values to its caller using parameters that are\ndeclared as OUT or INOUT parameters. When the procedure returns, a\nclient program can also obtain the number of rows affected for the\nfinal statement executed within the routine: At the SQL level, call the\nROW_COUNT() function; from the C API, call the mysql_affected_rows()\n(https://dev.mysql.com/doc/c-api/5.6/en/mysql-affected-rows.html)\nfunction.\n\nFor information about the effect of unhandled conditions on procedure\nparameters, see\nhttps://dev.mysql.com/doc/refman/5.6/en/conditions-and-parameters.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/call.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/call.html');
INSERT INTO `help_topic` VALUES (469, 'DO', 36, 'Syntax:\nDO expr [, expr] ...\n\nDO executes the expressions but does not return any results. In most\nrespects, DO is shorthand for SELECT expr, ..., but has the advantage\nthat it is slightly faster when you do not care about the result.\n\nDO is useful primarily with functions that have side effects, such as\nRELEASE_LOCK().\n\nExample: This SELECT statement pauses, but also produces a result set:\n\nmysql> SELECT SLEEP(5);\n+----------+\n| SLEEP(5) |\n+----------+\n|        0 |\n+----------+\n1 row in set (5.02 sec)\n\nDO, on the other hand, pauses without producing a result set.:\n\nmysql> DO SLEEP(5);\nQuery OK, 0 rows affected (4.99 sec)\n\nThis could be useful, for example in a stored function or trigger,\nwhich prohibit statements that produce result sets.\n\nDO only executes expressions. It cannot be used in all cases where\nSELECT can be used. For example, DO id FROM t1 is invalid because it\nreferences a table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/do.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/do.html');
INSERT INTO `help_topic` VALUES (546, 'SHOW AUTHORS', 3, 'Syntax:\nSHOW AUTHORS\n\nThe SHOW AUTHORS statement displays information about the people who\nwork on MySQL. For each author, it displays Name, Location, and Comment\nvalues.\n\nThis statement is removed as of MySQL 5.6.8.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-authors.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-authors.html');
INSERT INTO `help_topic` VALUES (547, 'SHOW BINARY LOGS', 3, 'Syntax:\nSHOW BINARY LOGS\nSHOW MASTER LOGS\n\nLists the binary log files on the server. This statement is used as\npart of the procedure described in [HELP PURGE BINARY LOGS], that shows\nhow to determine which logs can be purged.\n\nmysql> SHOW BINARY LOGS;\n+---------------+-----------+\n| Log_name      | File_size |\n+---------------+-----------+\n| binlog.000015 |    724935 |\n| binlog.000016 |    733481 |\n+---------------+-----------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-binary-logs.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-binary-logs.html');
INSERT INTO `help_topic` VALUES (548, 'SHOW MASTER LOGS', 3, 'Syntax:\nSHOW BINARY LOGS\nSHOW MASTER LOGS\n\nLists the binary log files on the server. This statement is used as\npart of the procedure described in [HELP PURGE BINARY LOGS], that shows\nhow to determine which logs can be purged.\n\nmysql> SHOW BINARY LOGS;\n+---------------+-----------+\n| Log_name      | File_size |\n+---------------+-----------+\n| binlog.000015 |    724935 |\n| binlog.000016 |    733481 |\n+---------------+-----------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-binary-logs.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-binary-logs.html');
INSERT INTO `help_topic` VALUES (549, 'SHOW BINLOG EVENTS', 3, 'Syntax:\nSHOW BINLOG EVENTS\n   [IN \'log_name\']\n   [FROM pos]\n   [LIMIT [offset,] row_count]\n\nShows the events in the binary log. If you do not specify \'log_name\',\nthe first binary log is displayed.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-binlog-events.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-binlog-events.html');
INSERT INTO `help_topic` VALUES (468, 'DELETE', 36, 'Syntax:\nDELETE is a DML statement that removes rows from a table.\n\nSingle-Table Syntax\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [WHERE where_condition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n\nThe DELETE statement deletes rows from tbl_name and returns the number\nof deleted rows. To check the number of deleted rows, call the\nROW_COUNT() function described in\nhttps://dev.mysql.com/doc/refman/5.6/en/information-functions.html.\n\nMain Clauses\n\nThe conditions in the optional WHERE clause identify which rows to\ndelete. With no WHERE clause, all rows are deleted.\n\nwhere_condition is an expression that evaluates to true for each row to\nbe deleted. It is specified as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/select.html.\n\nIf the ORDER BY clause is specified, the rows are deleted in the order\nthat is specified. The LIMIT clause places a limit on the number of\nrows that can be deleted. These clauses apply to single-table deletes,\nbut not multi-table deletes.\n\nMultiple-Table Syntax\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    tbl_name[.*] [, tbl_name[.*]] ...\n    FROM table_references\n    [WHERE where_condition]\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    FROM tbl_name[.*] [, tbl_name[.*]] ...\n    USING table_references\n    [WHERE where_condition]\n\nPrivileges\n\nYou need the DELETE privilege on a table to delete rows from it. You\nneed only the SELECT privilege for any columns that are only read, such\nas those named in the WHERE clause.\n\nPerformance\n\nWhen you do not need to know the number of deleted rows, the TRUNCATE\nTABLE statement is a faster way to empty a table than a DELETE\nstatement with no WHERE clause. Unlike DELETE, TRUNCATE TABLE cannot be\nused within a transaction or if you have a lock on the table. See [HELP\nTRUNCATE TABLE] and [HELP LOCK TABLES].\n\nThe speed of delete operations may also be affected by factors\ndiscussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/delete-optimization.html.\n\nTo ensure that a given DELETE statement does not take too much time,\nthe MySQL-specific LIMIT row_count clause for DELETE specifies the\nmaximum number of rows to be deleted. If the number of rows to delete\nis larger than the limit, repeat the DELETE statement until the number\nof affected rows is less than the LIMIT value.\n\nSubqueries\n\nYou cannot delete from a table and select from the same table in a\nsubquery.\n\nPartitioned Table Support\n\nDELETE supports explicit partition selection using the PARTITION\noption, which takes a list of the comma-separated names of one or more\npartitions or subpartitions (or both) from which to select rows to be\ndropped. Partitions not included in the list are ignored. Given a\npartitioned table t with a partition named p0, executing the statement\nDELETE FROM t PARTITION (p0) has the same effect on the table as\nexecuting ALTER TABLE t TRUNCATE PARTITION (p0); in both cases, all\nrows in partition p0 are dropped.\n\nPARTITION can be used along with a WHERE condition, in which case the\ncondition is tested only on rows in the listed partitions. For example,\nDELETE FROM t PARTITION (p0) WHERE c < 5 deletes rows only from\npartition p0 for which the condition c < 5 is true; rows in any other\npartitions are not checked and thus not affected by the DELETE.\n\nThe PARTITION option can also be used in multiple-table DELETE\nstatements. You can use up to one such option per table named in the\nFROM option.\n\nFor more information and examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/delete.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/delete.html');
INSERT INTO `help_topic` VALUES (471, 'INSERT', 36, 'Syntax:\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    {VALUES | VALUE} (value_list) [, (value_list)] ...\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    SET assignment_list\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    SELECT ...\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n\nINSERT inserts new rows into an existing table. The INSERT ... VALUES\nand INSERT ... SET forms of the statement insert rows based on\nexplicitly specified values. The INSERT ... SELECT form inserts rows\nselected from another table or tables. INSERT with an ON DUPLICATE KEY\nUPDATE clause enables existing rows to be updated if a row to be\ninserted would cause a duplicate value in a UNIQUE index or PRIMARY\nKEY.\n\nFor additional information about INSERT ... SELECT and INSERT ... ON\nDUPLICATE KEY UPDATE, see [HELP INSERT SELECT], and\nhttps://dev.mysql.com/doc/refman/5.6/en/insert-on-duplicate.html.\n\nInserting into a table requires the INSERT privilege for the table. If\nthe ON DUPLICATE KEY UPDATE clause is used and a duplicate key causes\nan UPDATE to be performed instead, the statement requires the UPDATE\nprivilege for the columns to be updated. For columns that are read but\nnot modified you need only the SELECT privilege (such as for a column\nreferenced only on the right hand side of an col_name=expr assignment\nin an ON DUPLICATE KEY UPDATE clause).\n\nWhen inserting into a partitioned table, you can control which\npartitions and subpartitions accept new rows. The PARTITION option\ntakes a list of the comma-separated names of one or more partitions or\nsubpartitions (or both) of the table. If any of the rows to be inserted\nby a given INSERT statement do not match one of the partitions listed,\nthe INSERT statement fails with the error Found a row not matching the\ngiven partition set. For more information and examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/insert.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/insert.html');
INSERT INTO `help_topic` VALUES (554, 'SHOW CONTRIBUTORS', 3, 'Syntax:\nSHOW CONTRIBUTORS\n\nThe SHOW CONTRIBUTORS statement displays information about the people\nwho contribute to MySQL source or to causes that we support. For each\ncontributor, it displays Name, Location, and Comment values.\n\nThis statement is removed as of MySQL 5.6.8.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-contributors.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-contributors.html');
INSERT INTO `help_topic` VALUES (558, 'SHOW CREATE FUNCTION', 3, 'Syntax:\nSHOW CREATE FUNCTION func_name\n\nThis statement is similar to SHOW CREATE PROCEDURE but for stored\nfunctions. See [HELP SHOW CREATE PROCEDURE].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-function.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-function.html');
INSERT INTO `help_topic` VALUES (561, 'SHOW CREATE TRIGGER', 3, 'Syntax:\nSHOW CREATE TRIGGER trigger_name\n\nThis statement shows the CREATE TRIGGER statement that creates the\nnamed trigger. This statement requires the TRIGGER privilege for the\ntable associated with the trigger.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-trigger.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-trigger.html');
INSERT INTO `help_topic` VALUES (473, 'INSERT DELAYED', 36, 'Syntax:\nINSERT DELAYED ...\n\nThe DELAYED option for the INSERT statement is a MySQL extension to\nstandard SQL that can be used for certain kinds of tables (such as\nMyISAM). When a client uses INSERT DELAYED, it gets an okay from the\nserver at once, and the row is queued to be inserted when the table is\nnot in use by any other thread.\n\n*Note*:\n\nINSERT DELAYED is slower than a normal INSERT if the table is not\notherwise in use. There is also the additional overhead for the server\nto handle a separate thread for each table for which there are delayed\nrows. This means that you should use INSERT DELAYED only when you are\nreally sure that you need it.\n\nAs of MySQL 5.6.6, INSERT DELAYED is deprecated; expect it to be\nremoved in a future release. Use INSERT (without DELAYED) instead.\n\nThe queued rows are held only in memory until they are inserted into\nthe table. This means that if you terminate mysqld forcibly (for\nexample, with kill -9) or if mysqld dies unexpectedly, any queued rows\nthat have not been written to disk are lost.\n\nThere are some constraints on the use of DELAYED:\n\no INSERT DELAYED works only with MyISAM, MEMORY, ARCHIVE, and BLACKHOLE\n  tables. For engines that do not support DELAYED, an error occurs.\n\no An error occurs for INSERT DELAYED if used with a table that has been\n  locked with LOCK TABLES because the insert must be handled by a\n  separate thread, not by the session that holds the lock.\n\no For MyISAM tables, if there are no free blocks in the middle of the\n  data file, concurrent SELECT and INSERT statements are supported.\n  Under these circumstances, you very seldom need to use INSERT DELAYED\n  with MyISAM.\n\no INSERT DELAYED should be used only for INSERT statements that specify\n  value lists. The server ignores DELAYED for INSERT ... SELECT or\n  INSERT ... ON DUPLICATE KEY UPDATE statements.\n\no Because the INSERT DELAYED statement returns immediately, before the\n  rows are inserted, you cannot use LAST_INSERT_ID() to get the\n  AUTO_INCREMENT value that the statement might generate.\n\no DELAYED rows are not visible to SELECT statements until they actually\n  have been inserted.\n\no INSERT DELAYED is handled as a simple INSERT (that is, without the\n  DELAYED option) whenever the value of binlog_format is STATEMENT or\n  MIXED. (In the latter case, the statement does not trigger a switch\n  to row-based logging, and so is logged using the statement-based\n  format.)\n\n  This does not apply when using row-based binary logging mode\n  (binlog_format set to ROW), in which INSERT DELAYED statements are\n  always executed using the DELAYED option as specified, and logged as\n  row-update events.\n\no DELAYED is ignored on replica servers, so that INSERT DELAYED is\n  treated as a normal INSERT on replicas. This is because DELAYED could\n  cause the slave to have different data than the source.\n\no Pending INSERT DELAYED statements are lost if a table is write locked\n  and ALTER TABLE is used to modify the table structure.\n\no INSERT DELAYED is not supported for views.\n\no INSERT DELAYED is not supported for partitioned tables.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/insert-delayed.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/insert-delayed.html');
INSERT INTO `help_topic` VALUES (474, 'LOAD DATA', 36, 'Syntax:\nLOAD DATA\n    [LOW_PRIORITY | CONCURRENT] [LOCAL]\n    INFILE \'file_name\'\n    [REPLACE | IGNORE]\n    INTO TABLE tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [CHARACTER SET charset_name]\n    [{FIELDS | COLUMNS}\n        [TERMINATED BY \'string\']\n        [[OPTIONALLY] ENCLOSED BY \'char\']\n        [ESCAPED BY \'char\']\n    ]\n    [LINES\n        [STARTING BY \'string\']\n        [TERMINATED BY \'string\']\n    ]\n    [IGNORE number {LINES | ROWS}]\n    [(col_name_or_user_var\n        [, col_name_or_user_var] ...)]\n    [SET col_name={expr | DEFAULT}\n        [, col_name={expr | DEFAULT}] ...]\n\nThe LOAD DATA statement reads rows from a text file into a table at a\nvery high speed. LOAD DATA is the complement of SELECT ... INTO\nOUTFILE. (See\nhttps://dev.mysql.com/doc/refman/5.6/en/select-into.html.) To write\ndata from a table to a file, use SELECT ... INTO OUTFILE. To read the\nfile back into a table, use LOAD DATA. The syntax of the FIELDS and\nLINES clauses is the same for both statements.\n\nYou can also load data files by using the mysqlimport utility; see\nhttps://dev.mysql.com/doc/refman/5.6/en/mysqlimport.html. mysqlimport\noperates by sending a LOAD DATA statement to the server.\n\nFor more information about the efficiency of INSERT versus LOAD DATA\nand speeding up LOAD DATA, see\nhttps://dev.mysql.com/doc/refman/5.6/en/insert-optimization.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/load-data.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/load-data.html');
INSERT INTO `help_topic` VALUES (475, 'LOAD XML', 36, 'Syntax:\nLOAD XML\n    [LOW_PRIORITY | CONCURRENT] [LOCAL]\n    INFILE \'file_name\'\n    [REPLACE | IGNORE]\n    INTO TABLE [db_name.]tbl_name\n    [CHARACTER SET charset_name]\n    [ROWS IDENTIFIED BY \'<tagname>\']\n    [IGNORE number {LINES | ROWS}]\n    [(field_name_or_user_var\n        [, field_name_or_user_var] ...)]\n    [SET col_name={expr | DEFAULT},\n        [, col_name={expr | DEFAULT}] ...]\n\nThe LOAD XML statement reads data from an XML file into a table. The\nfile_name must be given as a literal string. The tagname in the\noptional ROWS IDENTIFIED BY clause must also be given as a literal\nstring, and must be surrounded by angle brackets (< and >).\n\nLOAD XML acts as the complement of running the mysql client in XML\noutput mode (that is, starting the client with the --xml option). To\nwrite data from a table to an XML file, you can invoke the mysql client\nwith the --xml and -e options from the system shell, as shown here:\n\nshell> mysql --xml -e \'SELECT * FROM mydb.mytable\' > file.xml\n\nTo read the file back into a table, use LOAD XML. By default, the <row>\nelement is considered to be the equivalent of a database table row;\nthis can be changed using the ROWS IDENTIFIED BY clause.\n\nThis statement supports three different XML formats:\n\no Column names as attributes and column values as attribute values:\n\n<row column1=\"value1\" column2=\"value2\" .../>\n\no Column names as tags and column values as the content of these tags:\n\n<row>\n  <column1>value1</column1>\n  <column2>value2</column2>\n</row>\n\no Column names are the name attributes of <field> tags, and values are\n  the contents of these tags:\n\n<row>\n  <field name=\'column1\'>value1</field>\n  <field name=\'column2\'>value2</field>\n</row>\n\n  This is the format used by other MySQL tools, such as mysqldump.\n\nAll three formats can be used in the same XML file; the import routine\nautomatically detects the format for each row and interprets it\ncorrectly. Tags are matched based on the tag or attribute name and the\ncolumn name.\n\nPrior to MySQL 5.6.27, LOAD XML did not handle empty XML elements in\nthe form <element/> correctly. (Bug #67542, Bug #16171518)\n\nIn MySQL 5.6, LOAD XML does not support CDATA sections in the source\nXML. This limitation is removed in MySQL 8.0. (Bug #30753708, Bug\n#98199)\n\nThe following clauses work essentially the same way for LOAD XML as\nthey do for LOAD DATA:\n\no LOW_PRIORITY or CONCURRENT\n\no LOCAL\n\no REPLACE or IGNORE\n\no CHARACTER SET\n\no SET\n\nSee [HELP LOAD DATA], for more information about these clauses.\n\n(field_name_or_user_var, ...) is a list of one or more comma-separated\nXML fields or user variables. The name of a user variable used for this\npurpose must match the name of a field from the XML file, prefixed with\n@. You can use field names to select only desired fields. User\nvariables can be employed to store the corresponding field values for\nsubsequent re-use.\n\nThe IGNORE number LINES or IGNORE number ROWS clause causes the first\nnumber rows in the XML file to be skipped. It is analogous to the LOAD\nDATA statement\'s IGNORE ... LINES clause.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/load-xml.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/load-xml.html');
INSERT INTO `help_topic` VALUES (476, 'REPLACE', 36, 'Syntax:\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    {VALUES | VALUE} (value_list) [, (value_list)] ...\n\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    SET assignment_list\n\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    SELECT ...\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n\nREPLACE works exactly like INSERT, except that if an old row in the\ntable has the same value as a new row for a PRIMARY KEY or a UNIQUE\nindex, the old row is deleted before the new row is inserted. See [HELP\nINSERT].\n\nREPLACE is a MySQL extension to the SQL standard. It either inserts, or\ndeletes and inserts. For another MySQL extension to standard SQL---that\neither inserts or updates---see\nhttps://dev.mysql.com/doc/refman/5.6/en/insert-on-duplicate.html.\n\n*Note*:\n\nREPLACE makes sense only if a table has a PRIMARY KEY or UNIQUE index.\nOtherwise, it becomes equivalent to INSERT, because there is no index\nto be used to determine whether a new row duplicates another.\n\nValues for all columns are taken from the values specified in the\nREPLACE statement. Any missing columns are set to their default values,\njust as happens for INSERT. You cannot refer to values from the current\nrow and use them in the new row. If you use an assignment such as SET\ncol_name = col_name + 1, the reference to the column name on the right\nhand side is treated as DEFAULT(col_name), so the assignment is\nequivalent to SET col_name = DEFAULT(col_name) + 1.\n\nTo use REPLACE, you must have both the INSERT and DELETE privileges for\nthe table.\n\nREPLACE supports explicit partition selection using the PARTITION\nkeyword with a list of comma-separated names of partitions,\nsubpartitions, or both. As with INSERT, if it is not possible to insert\nthe new row into any of these partitions or subpartitions, the REPLACE\nstatement fails with the error Found a row not matching the given\npartition set. For more information and examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/replace.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/replace.html');
INSERT INTO `help_topic` VALUES (477, 'SELECT', 36, 'Syntax:\nSELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    [HIGH_PRIORITY]\n    [STRAIGHT_JOIN]\n    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n    [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n    select_expr [, select_expr] ...\n    [into_option]\n    [FROM table_references\n      [PARTITION partition_list]]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [PROCEDURE procedure_name(argument_list)]\n    [into_option]\n    [FOR UPDATE | LOCK IN SHARE MODE]\n\ninto_option: {\n    INTO OUTFILE \'file_name\'\n        [CHARACTER SET charset_name]\n        export_options\n  | INTO DUMPFILE \'file_name\'\n  | INTO var_name [, var_name] ...\n}\n\nSELECT is used to retrieve rows selected from one or more tables, and\ncan include UNION statements and subqueries. See [HELP UNION], and\nhttps://dev.mysql.com/doc/refman/5.6/en/subqueries.html.\n\nThe most commonly used clauses of SELECT statements are these:\n\no Each select_expr indicates a column that you want to retrieve. There\n  must be at least one select_expr.\n\no table_references indicates the table or tables from which to retrieve\n  rows. Its syntax is described in [HELP JOIN].\n\no SELECT supports explicit partition selection using the PARTITION\n  keyword with a list of partitions or subpartitions (or both)\n  following the name of the table in a table_reference (see [HELP\n  JOIN]). In this case, rows are selected only from the partitions\n  listed, and any other partitions of the table are ignored. For more\n  information and examples, see\n  https://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\n  SELECT ... PARTITION from tables using storage engines such as MyISAM\n  that perform table-level locks (and thus partition locks) lock only\n  the partitions or subpartitions named by the PARTITION option.\n\n  For more information, see\n  https://dev.mysql.com/doc/refman/5.6/en/partitioning-limitations-lock\n  ing.html.\n\no The WHERE clause, if given, indicates the condition or conditions\n  that rows must satisfy to be selected. where_condition is an\n  expression that evaluates to true for each row to be selected. The\n  statement selects all rows if there is no WHERE clause.\n\n  In the WHERE expression, you can use any of the functions and\n  operators that MySQL supports, except for aggregate (group)\n  functions. See\n  https://dev.mysql.com/doc/refman/5.6/en/expressions.html, and\n  https://dev.mysql.com/doc/refman/5.6/en/functions.html.\n\nSELECT can also be used to retrieve rows computed without reference to\nany table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/select.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/select.html');
INSERT INTO `help_topic` VALUES (562, 'SHOW CREATE VIEW', 3, 'Syntax:\nSHOW CREATE VIEW view_name\n\nThis statement shows the CREATE VIEW statement that creates the named\nview.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-view.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-view.html');
INSERT INTO `help_topic` VALUES (565, 'SHOW ENGINE', 3, 'Syntax:\nSHOW ENGINE engine_name {STATUS | MUTEX}\n\nSHOW ENGINE displays operational information about a storage engine. It\nrequires the PROCESS privilege. The statement has these variants:\n\nSHOW ENGINE INNODB STATUS\nSHOW ENGINE INNODB MUTEX\nSHOW ENGINE {NDB | NDBCLUSTER} STATUS\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\n\nSHOW ENGINE INNODB STATUS displays extensive information from the\nstandard InnoDB Monitor about the state of the InnoDB storage engine.\nFor information about the standard monitor and other InnoDB Monitors\nthat provide information about InnoDB processing, see\nhttps://dev.mysql.com/doc/refman/5.6/en/innodb-monitors.html.\n\nSHOW ENGINE INNODB MUTEX displays InnoDB mutex and rw-lock statistics.\n\n*Note*:\n\nMost SHOW ENGINE INNODB MUTEX output is removed in 5.6.14. SHOW ENGINE\nINNODB MUTEX output is removed entirely in MySQL 5.7.2. InnoDB mutexes\ncan be monitored using Performance Schema tables. For an example, see\nhttps://dev.mysql.com/doc/refman/5.6/en/monitor-innodb-mutex-waits-perf\normance-schema.html.\n\no Type\n\n  Always InnoDB.\n\no Name\n\n  The source file where the mutex is implemented, and the line number\n  in the file where the mutex is created. The line number is specific\n  to your version of MySQL.\n\no Status\n\n  The mutex status. This field displays several values if WITH_DEBUG\n  was defined at MySQL compilation time. If WITH_DEBUG was not defined,\n  the statement displays only the os_waits value. In the latter case\n  (without WITH_DEBUG), the information on which the output is based is\n  insufficient to distinguish regular mutexes and mutexes that protect\n  rw-locks (which permit multiple readers or a single writer).\n  Consequently, the output may appear to contain multiple rows for the\n  same mutex.\n\n  o count indicates how many times the mutex was requested.\n\n  o spin_waits indicates how many times the spinlock had to run.\n\n  o spin_rounds indicates the number of spinlock rounds. (spin_rounds\n    divided by spin_waits provides the average round count.)\n\n  o os_waits indicates the number of operating system waits. This\n    occurs when the spinlock did not work (the mutex was not locked\n    during the spinlock and it was necessary to yield to the operating\n    system and wait).\n\n  o os_yields indicates the number of times a thread trying to lock a\n    mutex gave up its timeslice and yielded to the operating system (on\n    the presumption that permitting other threads to run frees the\n    mutex so that it can be locked).\n\n  o os_wait_times indicates the amount of time (in ms) spent in\n    operating system waits. In MySQL 5.6 timing is disabled and this\n    value is always 0.\n\nSHOW ENGINE INNODB MUTEX does not list mutexes and rw-locks for each\nbuffer pool block, as the amount of output would be overwhelming on\nsystems with a large buffer pool. SHOW ENGINE INNODB MUTEX does,\nhowever, print aggregate BUF_BLOCK_MUTEX spin, wait, and call values\nfor buffer pool block mutexes and rw-locks. SHOW ENGINE INNODB MUTEX\nalso does not list any mutexes or rw-locks that have never been waited\non (os_waits=0). Thus, SHOW ENGINE INNODB MUTEX only displays\ninformation about mutexes and rw-locks outside of the buffer pool that\nhave caused at least one OS-level wait.\n\nSHOW ENGINE INNODB MUTEX information can be used to diagnose system\nproblems. For example, large values of spin_waits and spin_rounds may\nindicate scalability problems.\n\nUse SHOW ENGINE PERFORMANCE_SCHEMA STATUS to inspect the internal\noperation of the Performance Schema code:\n\nmysql> SHOW ENGINE PERFORMANCE_SCHEMA STATUS\\G\n...\n*************************** 3. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.row_size\nStatus: 76\n*************************** 4. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.row_count\nStatus: 10000\n*************************** 5. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.memory\nStatus: 760000\n...\n*************************** 57. row ***************************\n  Type: performance_schema\n  Name: performance_schema.memory\nStatus: 26459600\n...\n\nThis statement is intended to help the DBA understand the effects that\ndifferent Performance Schema options have on memory requirements.\n\nName values consist of two parts, which name an internal buffer and a\nbuffer attribute, respectively. Interpret buffer names as follows:\n\no An internal buffer that is not exposed as a table is named within\n  parentheses. Examples: (pfs_cond_class).row_size,\n  (pfs_mutex_class).memory.\n\no An internal buffer that is exposed as a table in the\n  performance_schema database is named after the table, without\n  parentheses. Examples: events_waits_history.row_size,\n  mutex_instances.row_count.\n\no A value that applies to the Performance Schema as a whole begins with\n  performance_schema. Example: performance_schema.memory.\n\nBuffer attributes have these meanings:\n\no row_size is the size of the internal record used by the\n  implementation, such as the size of a row in a table. row_size values\n  cannot be changed.\n\no row_count is the number of internal records, such as the number of\n  rows in a table. row_count values can be changed using Performance\n  Schema configuration options.\n\no For a table, tbl_name.memory is the product of row_size and\n  row_count. For the Performance Schema as a whole,\n  performance_schema.memory is the sum of all the memory used (the sum\n  of all other memory values).\n\nIn some cases, there is a direct relationship between a Performance\nSchema configuration parameter and a SHOW ENGINE value. For example,\nevents_waits_history_long.row_count corresponds to\nperformance_schema_events_waits_history_long_size. In other cases, the\nrelationship is more complex. For example,\nevents_waits_history.row_count corresponds to\nperformance_schema_events_waits_history_size (the number of rows per\nthread) multiplied by performance_schema_max_thread_instances ( the\nnumber of threads).\n\nSHOW ENGINE NDB STATUS If the server has the NDB storage engine\nenabled, SHOW ENGINE NDB STATUS displays cluster status information\nsuch as the number of connected data nodes, the cluster connectstring,\nand cluster binary log epochs, as well as counts of various Cluster API\nobjects created by the MySQL Server when connected to the cluster.\nSample output from this statement is shown here:\n\nmysql> SHOW ENGINE NDB STATUS;\n+------------+-----------------------+--------------------------------------------------+\n| Type       | Name                  | Status                                           |\n+------------+-----------------------+--------------------------------------------------+\n| ndbcluster | connection            | cluster_node_id=7,\n  connected_host=198.51.100.103, connected_port=1186, number_of_data_nodes=4,\n  number_of_ready_data_nodes=3, connect_count=0                                         |\n| ndbcluster | NdbTransaction        | created=6, free=0, sizeof=212                    |\n| ndbcluster | NdbOperation          | created=8, free=8, sizeof=660                    |\n| ndbcluster | NdbIndexScanOperation | created=1, free=1, sizeof=744                    |\n| ndbcluster | NdbIndexOperation     | created=0, free=0, sizeof=664                    |\n| ndbcluster | NdbRecAttr            | created=1285, free=1285, sizeof=60               |\n| ndbcluster | NdbApiSignal          | created=16, free=16, sizeof=136                  |\n| ndbcluster | NdbLabel              | created=0, free=0, sizeof=196                    |\n| ndbcluster | NdbBranch             | created=0, free=0, sizeof=24                     |\n| ndbcluster | NdbSubroutine         | created=0, free=0, sizeof=68                     |\n| ndbcluster | NdbCall               | created=0, free=0, sizeof=16                     |\n| ndbcluster | NdbBlob               | created=1, free=1, sizeof=264                    |\n| ndbcluster | NdbReceiver           | created=4, free=0, sizeof=68                     |\n| ndbcluster | binlog                | latest_epoch=155467, latest_trans_epoch=148126,\n  latest_received_binlog_epoch=0, latest_handled_binlog_epoch=0,\n  latest_applied_binlog_epoch=0                                                         |\n+------------+-----------------------+--------------------------------------------------+\n\nThe Status column in each of these rows provides information about the\nMySQL server\'s connection to the cluster and about the cluster binary\nlog\'s status, respectively. The Status information is in the form of\ncomma-delimited set of name/value pairs.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-engine.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-engine.html');
INSERT INTO `help_topic` VALUES (566, 'SHOW ENGINES', 3, 'Syntax:\nSHOW [STORAGE] ENGINES\n\nSHOW ENGINES displays status information about the server\'s storage\nengines. This is particularly useful for checking whether a storage\nengine is supported, or to see what the default engine is.\n\nFor information about MySQL storage engines, see\nhttps://dev.mysql.com/doc/refman/5.6/en/innodb-storage-engine.html, and\nhttps://dev.mysql.com/doc/refman/5.6/en/storage-engines.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-engines.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-engines.html');
INSERT INTO `help_topic` VALUES (569, 'SHOW FUNCTION CODE', 3, 'Syntax:\nSHOW FUNCTION CODE func_name\n\nThis statement is similar to SHOW PROCEDURE CODE but for stored\nfunctions. See [HELP SHOW PROCEDURE CODE].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-function-code.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-function-code.html');
INSERT INTO `help_topic` VALUES (570, 'SHOW FUNCTION STATUS', 3, 'Syntax:\nSHOW FUNCTION STATUS\n    [LIKE \'pattern\' | WHERE expr]\n\nThis statement is similar to SHOW PROCEDURE STATUS but for stored\nfunctions. See [HELP SHOW PROCEDURE STATUS].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-function-status.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-function-status.html');
INSERT INTO `help_topic` VALUES (573, 'SHOW MASTER STATUS', 3, 'Syntax:\nSHOW MASTER STATUS\n\nThis statement provides status information about the binary log files\nof the source. It requires either the SUPER or REPLICATION CLIENT\nprivilege.\n\nExample:\n\nmysql> SHOW MASTER STATUS\\G\n*************************** 1. row ***************************\n             File: source-bin.000002\n         Position: 1307\n     Binlog_Do_DB: test\n Binlog_Ignore_DB: manual, mysql\nExecuted_Gtid_Set: 3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5\n1 row in set (0.00 sec)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-master-status.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-master-status.html');
INSERT INTO `help_topic` VALUES (479, 'JOIN', 36, 'MySQL supports the following JOIN syntax for the table_references part\nof SELECT statements and multiple-table DELETE and UPDATE statements:\n\ntable_references:\n    escaped_table_reference [, escaped_table_reference] ...\n\nescaped_table_reference: {\n    table_reference\n  | { OJ table_reference }\n}\n\ntable_reference: {\n    table_factor\n  | joined_table\n}\n\ntable_factor: {\n    tbl_name [PARTITION (partition_names)]\n        [[AS] alias] [index_hint_list]\n  | table_subquery [AS] alias\n  | ( table_references )\n}\n\njoined_table: {\n    table_reference [INNER | CROSS] JOIN table_factor [join_specification]\n  | table_reference STRAIGHT_JOIN table_factor\n  | table_reference STRAIGHT_JOIN table_factor ON search_condition\n  | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference join_specification\n  | table_reference NATURAL [{LEFT|RIGHT} [OUTER]] JOIN table_factor\n}\n\njoin_specification: {\n    ON search_condition\n  | USING (join_column_list)\n}\n\njoin_column_list:\n    column_name [, column_name] ...\n\nindex_hint_list:\n    index_hint [, index_hint] ...\n\nindex_hint: {\n    USE {INDEX|KEY}\n      [FOR {JOIN|ORDER BY|GROUP BY}] ([index_list])\n  | {IGNORE|FORCE} {INDEX|KEY}\n      [FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n}\n\nindex_list:\n    index_name [, index_name] ...\n\nA table reference is also known as a join expression.\n\nA table reference (when it refers to a partitioned table) may contain a\nPARTITION option, including a list of comma-separated partitions,\nsubpartitions, or both. This option follows the name of the table and\nprecedes any alias declaration. The effect of this option is that rows\nare selected only from the listed partitions or subpartitions. Any\npartitions or subpartitions not named in the list are ignored. For more\ninformation and examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\nThe syntax of table_factor is extended in MySQL in comparison with\nstandard SQL. The standard accepts only table_reference, not a list of\nthem inside a pair of parentheses.\n\nThis is a conservative extension if each comma in a list of\ntable_reference items is considered as equivalent to an inner join. For\nexample:\n\nSELECT * FROM t1 LEFT JOIN (t2, t3, t4)\n                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)\n\nis equivalent to:\n\nSELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4)\n                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)\n\nIn MySQL, JOIN, CROSS JOIN, and INNER JOIN are syntactic equivalents\n(they can replace each other). In standard SQL, they are not\nequivalent. INNER JOIN is used with an ON clause, CROSS JOIN is used\notherwise.\n\nIn general, parentheses can be ignored in join expressions containing\nonly inner join operations. MySQL also supports nested joins. See\nhttps://dev.mysql.com/doc/refman/5.6/en/nested-join-optimization.html.\n\nIndex hints can be specified to affect how the MySQL optimizer makes\nuse of indexes. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/index-hints.html. The\noptimizer_switch system variable is another way to influence optimizer\nuse of indexes. See\nhttps://dev.mysql.com/doc/refman/5.6/en/switchable-optimizations.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/join.html\n\n', 'SELECT left_tbl.*\n  FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id = right_tbl.id\n  WHERE right_tbl.id IS NULL;\n', 'https://dev.mysql.com/doc/refman/5.6/en/join.html');
INSERT INTO `help_topic` VALUES (489, 'LOCK TABLES', 37, 'Syntax:\nLOCK TABLES\n    tbl_name [[AS] alias] lock_type\n    [, tbl_name [[AS] alias] lock_type] ...\n\nlock_type: {\n    READ [LOCAL]\n  | [LOW_PRIORITY] WRITE\n}\n\nUNLOCK TABLES\n\nMySQL enables client sessions to acquire table locks explicitly for the\npurpose of cooperating with other sessions for access to tables, or to\nprevent other sessions from modifying tables during periods when a\nsession requires exclusive access to them. A session can acquire or\nrelease locks only for itself. One session cannot acquire locks for\nanother session or release locks held by another session.\n\nLocks may be used to emulate transactions or to get more speed when\nupdating tables. This is explained in more detail in\nhttps://dev.mysql.com/doc/refman/5.6/en/lock-tables.html#lock-tables-re\nstrictions.\n\nLOCK TABLES explicitly acquires table locks for the current client\nsession. Table locks can be acquired for base tables or views. You must\nhave the LOCK TABLES privilege, and the SELECT privilege for each\nobject to be locked.\n\nFor view locking, LOCK TABLES adds all base tables used in the view to\nthe set of tables to be locked and locks them automatically. As of\nMySQL 5.6.50, LOCK TABLES checks that the view definer has the proper\nprivileges on the tables underlying the view.\n\nIf you lock a table explicitly with LOCK TABLES, any tables used in\ntriggers are also locked implicitly, as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/lock-tables.html#lock-tables-an\nd-triggers.\n\nUNLOCK TABLES explicitly releases any table locks held by the current\nsession. LOCK TABLES implicitly releases any table locks held by the\ncurrent session before acquiring new locks.\n\nAnother use for UNLOCK TABLES is to release the global read lock\nacquired with the FLUSH TABLES WITH READ LOCK statement, which enables\nyou to lock all tables in all databases. See [HELP FLUSH]. (This is a\nvery convenient way to get backups if you have a file system such as\nVeritas that can take snapshots in time.)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/lock-tables.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/lock-tables.html');
INSERT INTO `help_topic` VALUES (574, 'SHOW OPEN TABLES', 3, 'Syntax:\nSHOW OPEN TABLES\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW OPEN TABLES lists the non-TEMPORARY tables that are currently open\nin the table cache. See\nhttps://dev.mysql.com/doc/refman/5.6/en/table-cache.html. The FROM\nclause, if present, restricts the tables shown to those present in the\ndb_name database. The LIKE clause, if present, indicates which table\nnames to match. The WHERE clause can be given to select rows using more\ngeneral conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-open-tables.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-open-tables.html');
INSERT INTO `help_topic` VALUES (576, 'SHOW PRIVILEGES', 3, 'Syntax:\nSHOW PRIVILEGES\n\nSHOW PRIVILEGES shows the list of system privileges that the MySQL\nserver supports. The exact list of privileges depends on the version of\nyour server.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-privileges.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-privileges.html');
INSERT INTO `help_topic` VALUES (581, 'SHOW PROFILES', 3, 'Syntax:\nSHOW PROFILES\n\nThe SHOW PROFILES statement, together with SHOW PROFILE, displays\nprofiling information that indicates resource usage for statements\nexecuted during the course of the current session. For more\ninformation, see [HELP SHOW PROFILE].\n\n*Note*:\n\nThese statements are deprecated as of MySQL 5.6.7; expect them to be\nremoved in a future MySQL release. Use the Performance Schema instead;\nsee https://dev.mysql.com/doc/refman/5.6/en/performance-schema.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-profiles.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-profiles.html');
INSERT INTO `help_topic` VALUES (582, 'SHOW RELAYLOG EVENTS', 3, 'Syntax:\nSHOW RELAYLOG EVENTS\n    [IN \'log_name\']\n    [FROM pos]\n    [LIMIT [offset,] row_count]\n\nShows the events in the relay log of a replica. If you do not specify\n\'log_name\', the first relay log is displayed. This statement has no\neffect on the source.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-relaylog-events.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-relaylog-events.html');
INSERT INTO `help_topic` VALUES (480, 'UNION', 36, 'Syntax:\nSELECT ...\nUNION [ALL | DISTINCT] SELECT ...\n[UNION [ALL | DISTINCT] SELECT ...]\n\nUNION combines the result from multiple SELECT statements into a single\nresult set.\n\no https://dev.mysql.com/doc/refman/5.6/en/union.html#union-result-set\n\no https://dev.mysql.com/doc/refman/5.6/en/union.html#union-distinct-all\n\no https://dev.mysql.com/doc/refman/5.6/en/union.html#union-order-by-lim\n  it\n\no https://dev.mysql.com/doc/refman/5.6/en/union.html#union-restrictions\n\nResult Set Column Names and Data Types\n\nThe result set column names are taken from the column names of the\nfirst SELECT statement.\n\nSelected columns listed in corresponding positions of each SELECT\nstatement should have the same data type. For example, the first column\nselected by the first statement should have the same type as the first\ncolumn selected by the other statements. If the data types of\ncorresponding SELECT columns do not match, the types and lengths of the\ncolumns in the UNION result take into account the values retrieved by\nall the SELECT statements. For example, consider the following, where\nthe column length is not constrained to the length of the value from\nthe first SELECT:\n\nmysql> SELECT REPEAT(\'a\',1) UNION SELECT REPEAT(\'b\',20);\n+----------------------+\n| REPEAT(\'a\',1)        |\n+----------------------+\n| a                    |\n| bbbbbbbbbbbbbbbbbbbb |\n+----------------------+\n\nUNION DISTINCT and UNION ALL\n\nBy default, duplicate rows are removed from UNION results. The optional\nDISTINCT keyword has the same effect but makes it explicit. With the\noptional ALL keyword, duplicate-row removal does not occur and the\nresult includes all matching rows from all the SELECT statements.\n\nYou can mix UNION ALL and UNION DISTINCT in the same query. Mixed UNION\ntypes are treated such that a DISTINCT union overrides any ALL union to\nits left. A DISTINCT union can be produced explicitly by using UNION\nDISTINCT or implicitly by using UNION with no following DISTINCT or ALL\nkeyword.\n\nORDER BY and LIMIT in Unions\n\nTo apply an ORDER BY or LIMIT clause to an individual SELECT,\nparenthesize the SELECT and place the clause inside the parentheses:\n\n(SELECT a FROM t1 WHERE a=10 AND B=1 ORDER BY a LIMIT 10)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND B=2 ORDER BY a LIMIT 10);\n\nUse of ORDER BY for individual SELECT statements implies nothing about\nthe order in which the rows appear in the final result because UNION by\ndefault produces an unordered set of rows. Therefore, ORDER BY in this\ncontext typically is used in conjunction with LIMIT, to determine the\nsubset of the selected rows to retrieve for the SELECT, even though it\ndoes not necessarily affect the order of those rows in the final UNION\nresult. If ORDER BY appears without LIMIT in a SELECT, it is optimized\naway because it has no effect.\n\nTo use an ORDER BY or LIMIT clause to sort or limit the entire UNION\nresult, parenthesize the individual SELECT statements and place the\nORDER BY or LIMIT after the last one:\n\n(SELECT a FROM t1 WHERE a=10 AND B=1)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND B=2)\nORDER BY a LIMIT 10;\n\nA statement without parentheses is equivalent to one parenthesized as\njust shown.\n\nThis kind of ORDER BY cannot use column references that include a table\nname (that is, names in tbl_name.col_name format). Instead, provide a\ncolumn alias in the first SELECT statement and refer to the alias in\nthe ORDER BY. (Alternatively, refer to the column in the ORDER BY using\nits column position. However, use of column positions is deprecated.)\n\nAlso, if a column to be sorted is aliased, the ORDER BY clause must\nrefer to the alias, not the column name. The first of the following\nstatements is permitted, but the second fails with an Unknown column\n\'a\' in \'order clause\' error:\n\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;\n\nTo cause rows in a UNION result to consist of the sets of rows\nretrieved by each SELECT one after the other, select an additional\ncolumn in each SELECT to use as a sort column and add an ORDER BY that\nsorts on that column following the last SELECT:\n\n(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;\n\nTo additionally maintain sort order within individual SELECT results,\nadd a secondary column to the ORDER BY clause:\n\n(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;\n\nUse of an additional column also enables you to determine which SELECT\neach row comes from. Extra columns can provide other identifying\ninformation as well, such as a string that indicates a table name.\n\nUNION Restrictions\n\nIn a UNION, the SELECT statements are normal select statements, but\nwith the following restrictions:\n\no HIGH_PRIORITY in the first SELECT has no effect. HIGH_PRIORITY in any\n  subsequent SELECT produces a syntax error.\n\no Only the last SELECT statement can use an INTO clause. However, the\n  entire UNION result is written to the INTO output destination.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/union.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/union.html');
INSERT INTO `help_topic` VALUES (586, 'SHOW TABLE STATUS', 3, 'Syntax:\nSHOW TABLE STATUS\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW TABLE STATUS works likes SHOW TABLES, but provides a lot of\ninformation about each non-TEMPORARY table. You can also get this list\nusing the mysqlshow --status db_name command. The LIKE clause, if\npresent, indicates which table names to match. The WHERE clause can be\ngiven to select rows using more general conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-table-status.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-table-status.html');
INSERT INTO `help_topic` VALUES (591, 'BINLOG', 3, 'Syntax:\nBINLOG \'str\'\n\nBINLOG is an internal-use statement. It is generated by the mysqlbinlog\nprogram as the printable representation of certain events in binary log\nfiles. (See https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html.)\nThe \'str\' value is a base 64-encoded string the that server decodes to\ndetermine the data change indicated by the corresponding event. This\nstatement requires the SUPER privilege.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/binlog.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/binlog.html');
INSERT INTO `help_topic` VALUES (597, 'EXPLAIN', 45, 'Syntax:\n{EXPLAIN | DESCRIBE | DESC}\n    tbl_name [col_name | wild]\n\n{EXPLAIN | DESCRIBE | DESC}\n    [explain_type]\n    explainable_stmt\n\nexplain_type: {\n    EXTENDED\n  | PARTITIONS\n  | FORMAT = format_name\n}\n\nformat_name: {\n    TRADITIONAL\n  | JSON\n}\n\nexplainable_stmt: {\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | REPLACE statement\n  | UPDATE statement\n}\n\nThe DESCRIBE and EXPLAIN statements are synonyms. In practice, the\nDESCRIBE keyword is more often used to obtain information about table\nstructure, whereas EXPLAIN is used to obtain a query execution plan\n(that is, an explanation of how MySQL would execute a query).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/explain.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/explain.html');
INSERT INTO `help_topic` VALUES (598, 'DESCRIBE', 45, 'Syntax:\n{EXPLAIN | DESCRIBE | DESC}\n    tbl_name [col_name | wild]\n\n{EXPLAIN | DESCRIBE | DESC}\n    [explain_type]\n    explainable_stmt\n\nexplain_type: {\n    EXTENDED\n  | PARTITIONS\n  | FORMAT = format_name\n}\n\nformat_name: {\n    TRADITIONAL\n  | JSON\n}\n\nexplainable_stmt: {\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | REPLACE statement\n  | UPDATE statement\n}\n\nThe DESCRIBE and EXPLAIN statements are synonyms. In practice, the\nDESCRIBE keyword is more often used to obtain information about table\nstructure, whereas EXPLAIN is used to obtain a query execution plan\n(that is, an explanation of how MySQL would execute a query).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/explain.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/explain.html');
INSERT INTO `help_topic` VALUES (481, 'UPDATE', 36, 'Syntax:\nUPDATE is a DML statement that modifies rows in a table.\n\nSingle-table syntax:\n\nUPDATE [LOW_PRIORITY] [IGNORE] table_reference\n    SET assignment_list\n    [WHERE where_condition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n\nvalue:\n    {expr | DEFAULT}\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...\n\nMultiple-table syntax:\n\nUPDATE [LOW_PRIORITY] [IGNORE] table_references\n    SET assignment_list\n    [WHERE where_condition]\n\nFor the single-table syntax, the UPDATE statement updates columns of\nexisting rows in the named table with new values. The SET clause\nindicates which columns to modify and the values they should be given.\nEach value can be given as an expression, or the keyword DEFAULT to set\na column explicitly to its default value. The WHERE clause, if given,\nspecifies the conditions that identify which rows to update. With no\nWHERE clause, all rows are updated. If the ORDER BY clause is\nspecified, the rows are updated in the order that is specified. The\nLIMIT clause places a limit on the number of rows that can be updated.\n\nFor the multiple-table syntax, UPDATE updates rows in each table named\nin table_references that satisfy the conditions. Each matching row is\nupdated once, even if it matches the conditions multiple times. For\nmultiple-table syntax, ORDER BY and LIMIT cannot be used.\n\nFor partitioned tables, both the single-single and multiple-table forms\nof this statement support the use of a PARTITION option as part of a\ntable reference. This option takes a list of one or more partitions or\nsubpartitions (or both). Only the partitions (or subpartitions) listed\nare checked for matches, and a row that is not in any of these\npartitions or subpartitions is not updated, whether it satisfies the\nwhere_condition or not.\n\n*Note*:\n\nUnlike the case when using PARTITION with an INSERT or REPLACE\nstatement, an otherwise valid UPDATE ... PARTITION statement is\nconsidered successful even if no rows in the listed partitions (or\nsubpartitions) match the where_condition.\n\nFor more information and examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-selection.html.\n\nwhere_condition is an expression that evaluates to true for each row to\nbe updated. For expression syntax, see\nhttps://dev.mysql.com/doc/refman/5.6/en/expressions.html.\n\ntable_references and where_condition are specified as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/select.html.\n\nYou need the UPDATE privilege only for columns referenced in an UPDATE\nthat are actually updated. You need only the SELECT privilege for any\ncolumns that are read but not modified.\n\nThe UPDATE statement supports the following modifiers:\n\no With the LOW_PRIORITY modifier, execution of the UPDATE is delayed\n  until no other clients are reading from the table. This affects only\n  storage engines that use only table-level locking (such as MyISAM,\n  MEMORY, and MERGE).\n\no With the IGNORE modifier, the update statement does not abort even if\n  errors occur during the update. Rows for which duplicate-key\n  conflicts occur on a unique key value are not updated. Rows updated\n  to values that would cause data conversion errors are updated to the\n  closest valid values instead.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/update.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/update.html');
INSERT INTO `help_topic` VALUES (490, 'SET TRANSACTION', 37, 'Syntax:\nSET [GLOBAL | SESSION] TRANSACTION\n    transaction_characteristic [, transaction_characteristic] ...\n\ntransaction_characteristic: {\n    ISOLATION LEVEL level\n  | access_mode\n}\n\nlevel: {\n     REPEATABLE READ\n   | READ COMMITTED\n   | READ UNCOMMITTED\n   | SERIALIZABLE\n}\n\naccess_mode: {\n     READ WRITE\n   | READ ONLY\n}\n\nThis statement specifies transaction characteristics. It takes a list\nof one or more characteristic values separated by commas. Each\ncharacteristic value sets the transaction isolation level or access\nmode. The isolation level is used for operations on InnoDB tables. The\naccess mode specifies whether transactions operate in read/write or\nread-only mode.\n\nIn addition, SET TRANSACTION can include an optional GLOBAL or SESSION\nkeyword to indicate the scope of the statement.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-transaction.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-transaction.html');
INSERT INTO `help_topic` VALUES (492, 'PURGE BINARY LOGS', 38, 'Syntax:\nPURGE { BINARY | MASTER } LOGS {\n    TO \'log_name\'\n  | BEFORE datetime_expr\n}\n\nThe binary log is a set of files that contain information about data\nmodifications made by the MySQL server. The log consists of a set of\nbinary log files, plus an index file (see\nhttps://dev.mysql.com/doc/refman/5.6/en/binary-log.html).\n\nThe PURGE BINARY LOGS statement deletes all the binary log files listed\nin the log index file prior to the specified log file name or date.\nBINARY and MASTER are synonyms. Deleted log files also are removed from\nthe list recorded in the index file, so that the given log file becomes\nthe first in the list.\n\nThis statement has no effect if the server was not started with the\n--log-bin option to enable binary logging.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/purge-binary-logs.html\n\n', 'PURGE BINARY LOGS TO \'mysql-bin.010\';\nPURGE BINARY LOGS BEFORE \'2019-04-02 22:46:26\';\n', 'https://dev.mysql.com/doc/refman/5.6/en/purge-binary-logs.html');
INSERT INTO `help_topic` VALUES (599, 'DESC', 45, 'Syntax:\n{EXPLAIN | DESCRIBE | DESC}\n    tbl_name [col_name | wild]\n\n{EXPLAIN | DESCRIBE | DESC}\n    [explain_type]\n    explainable_stmt\n\nexplain_type: {\n    EXTENDED\n  | PARTITIONS\n  | FORMAT = format_name\n}\n\nformat_name: {\n    TRADITIONAL\n  | JSON\n}\n\nexplainable_stmt: {\n    SELECT statement\n  | DELETE statement\n  | INSERT statement\n  | REPLACE statement\n  | UPDATE statement\n}\n\nThe DESCRIBE and EXPLAIN statements are synonyms. In practice, the\nDESCRIBE keyword is more often used to obtain information about table\nstructure, whereas EXPLAIN is used to obtain a query execution plan\n(that is, an explanation of how MySQL would execute a query).\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/explain.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/explain.html');
INSERT INTO `help_topic` VALUES (601, 'USE', 45, 'Syntax:\nUSE db_name\n\nThe USE statement tells MySQL to use the named database as the default\n(current) database for subsequent statements. This statement requires\nsome privilege for the database or some object within it.\n\nThe named database remains the default until the end of the session or\nanother USE statement is issued:\n\nUSE db1;\nSELECT COUNT(*) FROM mytable;   # selects from db1.mytable\nUSE db2;\nSELECT COUNT(*) FROM mytable;   # selects from db2.mytable\n\nThe database name must be specified on a single line. Newlines in\ndatabase names are not supported.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/use.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/use.html');
INSERT INTO `help_topic` VALUES (482, 'START TRANSACTION', 37, 'Syntax:\nSTART TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n\nThese statements provide control over use of transactions:\n\no START TRANSACTION or BEGIN start a new transaction.\n\no COMMIT commits the current transaction, making its changes permanent.\n\no ROLLBACK rolls back the current transaction, canceling its changes.\n\no SET autocommit disables or enables the default autocommit mode for\n  the current session.\n\nBy default, MySQL runs with autocommit mode enabled. This means that,\nwhen not otherwise inside a transaction, each statement is atomic, as\nif it were surrounded by START TRANSACTION and COMMIT. You cannot use\nROLLBACK to undo the effect; however, if an error occurs during\nstatement execution, the statement is rolled back.\n\nTo disable autocommit mode implicitly for a single series of\nstatements, use the START TRANSACTION statement:\n\nSTART TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n\nWith START TRANSACTION, autocommit remains disabled until you end the\ntransaction with COMMIT or ROLLBACK. The autocommit mode then reverts\nto its previous state.\n\nSTART TRANSACTION permits several modifiers that control transaction\ncharacteristics. To specify multiple modifiers, separate them by\ncommas.\n\no The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for\n  storage engines that are capable of it. This applies only to InnoDB.\n  The effect is the same as issuing a START TRANSACTION followed by a\n  SELECT from any InnoDB table. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html.\n  The WITH CONSISTENT SNAPSHOT modifier does not change the current\n  transaction isolation level, so it provides a consistent snapshot\n  only if the current isolation level is one that permits a consistent\n  read. The only isolation level that permits a consistent read is\n  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT\n  SNAPSHOT clause is ignored.\n\no The READ WRITE and READ ONLY modifiers set the transaction access\n  mode. They permit or prohibit changes to tables used in the\n  transaction. The READ ONLY restriction prevents the transaction from\n  modifying or locking both transactional and nontransactional tables\n  that are visible to other transactions; the transaction can still\n  modify or lock temporary tables. These modifiers are available as of\n  MySQL 5.6.5.\n\n  MySQL enables extra optimizations for queries on InnoDB tables when\n  the transaction is known to be read-only. Specifying READ ONLY\n  ensures these optimizations are applied in cases where the read-only\n  status cannot be determined automatically. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-performance-ro-txn.htm\n  l for more information.\n\n  If no access mode is specified, the default mode applies. Unless the\n  default has been changed, it is read/write. It is not permitted to\n  specify both READ WRITE and READ ONLY in the same statement.\n\n  In read-only mode, it remains possible to change tables created with\n  the TEMPORARY keyword using DML statements. Changes made with DDL\n  statements are not permitted, just as with permanent tables.\n\n  For additional information about transaction access mode, including\n  ways to change the default mode, see [HELP SET TRANSACTION].\n\n  If the read_only system variable is enabled, explicitly starting a\n  transaction with START TRANSACTION READ WRITE requires the SUPER\n  privilege.\n\n*Important*:\n\nMany APIs used for writing MySQL client applications (such as JDBC)\nprovide their own methods for starting transactions that can (and\nsometimes should) be used instead of sending a START TRANSACTION\nstatement from the client. See\nhttps://dev.mysql.com/doc/refman/5.6/en/connectors-apis.html, or the\ndocumentation for your API, for more information.\n\nTo disable autocommit mode explicitly, use the following statement:\n\nSET autocommit=0;\n\nAfter disabling autocommit mode by setting the autocommit variable to\nzero, changes to transaction-safe tables (such as those for InnoDB or\nNDB) are not made permanent immediately. You must use COMMIT to store\nyour changes to disk or ROLLBACK to ignore the changes.\n\nautocommit is a session variable and must be set for each session. To\ndisable autocommit mode for each new connection, see the description of\nthe autocommit system variable at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nBEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for\ninitiating a transaction. START TRANSACTION is standard SQL syntax, is\nthe recommended way to start an ad-hoc transaction, and permits\nmodifiers that BEGIN does not.\n\nThe BEGIN statement differs from the use of the BEGIN keyword that\nstarts a BEGIN ... END compound statement. The latter does not begin a\ntransaction. See [HELP BEGIN END].\n\n*Note*:\n\nWithin all stored programs (stored procedures and functions, triggers,\nand events), the parser treats BEGIN [WORK] as the beginning of a BEGIN\n... END block. Begin a transaction in this context with START\nTRANSACTION instead.\n\nThe optional WORK keyword is supported for COMMIT and ROLLBACK, as are\nthe CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of the\ncompletion_type system variable determines the default completion\nbehavior. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nThe AND CHAIN clause causes a new transaction to begin as soon as the\ncurrent one ends, and the new transaction has the same isolation level\nas the just-terminated transaction. The new transaction also uses the\nsame access mode (READ WRITE or READ ONLY) as the just-terminated\ntransaction. The RELEASE clause causes the server to disconnect the\ncurrent client session after terminating the current transaction.\nIncluding the NO keyword suppresses CHAIN or RELEASE completion, which\ncan be useful if the completion_type system variable is set to cause\nchaining or release completion by default.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/commit.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/commit.html');
INSERT INTO `help_topic` VALUES (483, 'BEGIN', 37, 'Syntax:\nSTART TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n\nThese statements provide control over use of transactions:\n\no START TRANSACTION or BEGIN start a new transaction.\n\no COMMIT commits the current transaction, making its changes permanent.\n\no ROLLBACK rolls back the current transaction, canceling its changes.\n\no SET autocommit disables or enables the default autocommit mode for\n  the current session.\n\nBy default, MySQL runs with autocommit mode enabled. This means that,\nwhen not otherwise inside a transaction, each statement is atomic, as\nif it were surrounded by START TRANSACTION and COMMIT. You cannot use\nROLLBACK to undo the effect; however, if an error occurs during\nstatement execution, the statement is rolled back.\n\nTo disable autocommit mode implicitly for a single series of\nstatements, use the START TRANSACTION statement:\n\nSTART TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n\nWith START TRANSACTION, autocommit remains disabled until you end the\ntransaction with COMMIT or ROLLBACK. The autocommit mode then reverts\nto its previous state.\n\nSTART TRANSACTION permits several modifiers that control transaction\ncharacteristics. To specify multiple modifiers, separate them by\ncommas.\n\no The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for\n  storage engines that are capable of it. This applies only to InnoDB.\n  The effect is the same as issuing a START TRANSACTION followed by a\n  SELECT from any InnoDB table. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html.\n  The WITH CONSISTENT SNAPSHOT modifier does not change the current\n  transaction isolation level, so it provides a consistent snapshot\n  only if the current isolation level is one that permits a consistent\n  read. The only isolation level that permits a consistent read is\n  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT\n  SNAPSHOT clause is ignored.\n\no The READ WRITE and READ ONLY modifiers set the transaction access\n  mode. They permit or prohibit changes to tables used in the\n  transaction. The READ ONLY restriction prevents the transaction from\n  modifying or locking both transactional and nontransactional tables\n  that are visible to other transactions; the transaction can still\n  modify or lock temporary tables. These modifiers are available as of\n  MySQL 5.6.5.\n\n  MySQL enables extra optimizations for queries on InnoDB tables when\n  the transaction is known to be read-only. Specifying READ ONLY\n  ensures these optimizations are applied in cases where the read-only\n  status cannot be determined automatically. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-performance-ro-txn.htm\n  l for more information.\n\n  If no access mode is specified, the default mode applies. Unless the\n  default has been changed, it is read/write. It is not permitted to\n  specify both READ WRITE and READ ONLY in the same statement.\n\n  In read-only mode, it remains possible to change tables created with\n  the TEMPORARY keyword using DML statements. Changes made with DDL\n  statements are not permitted, just as with permanent tables.\n\n  For additional information about transaction access mode, including\n  ways to change the default mode, see [HELP SET TRANSACTION].\n\n  If the read_only system variable is enabled, explicitly starting a\n  transaction with START TRANSACTION READ WRITE requires the SUPER\n  privilege.\n\n*Important*:\n\nMany APIs used for writing MySQL client applications (such as JDBC)\nprovide their own methods for starting transactions that can (and\nsometimes should) be used instead of sending a START TRANSACTION\nstatement from the client. See\nhttps://dev.mysql.com/doc/refman/5.6/en/connectors-apis.html, or the\ndocumentation for your API, for more information.\n\nTo disable autocommit mode explicitly, use the following statement:\n\nSET autocommit=0;\n\nAfter disabling autocommit mode by setting the autocommit variable to\nzero, changes to transaction-safe tables (such as those for InnoDB or\nNDB) are not made permanent immediately. You must use COMMIT to store\nyour changes to disk or ROLLBACK to ignore the changes.\n\nautocommit is a session variable and must be set for each session. To\ndisable autocommit mode for each new connection, see the description of\nthe autocommit system variable at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nBEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for\ninitiating a transaction. START TRANSACTION is standard SQL syntax, is\nthe recommended way to start an ad-hoc transaction, and permits\nmodifiers that BEGIN does not.\n\nThe BEGIN statement differs from the use of the BEGIN keyword that\nstarts a BEGIN ... END compound statement. The latter does not begin a\ntransaction. See [HELP BEGIN END].\n\n*Note*:\n\nWithin all stored programs (stored procedures and functions, triggers,\nand events), the parser treats BEGIN [WORK] as the beginning of a BEGIN\n... END block. Begin a transaction in this context with START\nTRANSACTION instead.\n\nThe optional WORK keyword is supported for COMMIT and ROLLBACK, as are\nthe CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of the\ncompletion_type system variable determines the default completion\nbehavior. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nThe AND CHAIN clause causes a new transaction to begin as soon as the\ncurrent one ends, and the new transaction has the same isolation level\nas the just-terminated transaction. The new transaction also uses the\nsame access mode (READ WRITE or READ ONLY) as the just-terminated\ntransaction. The RELEASE clause causes the server to disconnect the\ncurrent client session after terminating the current transaction.\nIncluding the NO keyword suppresses CHAIN or RELEASE completion, which\ncan be useful if the completion_type system variable is set to cause\nchaining or release completion by default.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/commit.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/commit.html');
INSERT INTO `help_topic` VALUES (484, 'COMMIT', 37, 'Syntax:\nSTART TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n\nThese statements provide control over use of transactions:\n\no START TRANSACTION or BEGIN start a new transaction.\n\no COMMIT commits the current transaction, making its changes permanent.\n\no ROLLBACK rolls back the current transaction, canceling its changes.\n\no SET autocommit disables or enables the default autocommit mode for\n  the current session.\n\nBy default, MySQL runs with autocommit mode enabled. This means that,\nwhen not otherwise inside a transaction, each statement is atomic, as\nif it were surrounded by START TRANSACTION and COMMIT. You cannot use\nROLLBACK to undo the effect; however, if an error occurs during\nstatement execution, the statement is rolled back.\n\nTo disable autocommit mode implicitly for a single series of\nstatements, use the START TRANSACTION statement:\n\nSTART TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n\nWith START TRANSACTION, autocommit remains disabled until you end the\ntransaction with COMMIT or ROLLBACK. The autocommit mode then reverts\nto its previous state.\n\nSTART TRANSACTION permits several modifiers that control transaction\ncharacteristics. To specify multiple modifiers, separate them by\ncommas.\n\no The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for\n  storage engines that are capable of it. This applies only to InnoDB.\n  The effect is the same as issuing a START TRANSACTION followed by a\n  SELECT from any InnoDB table. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html.\n  The WITH CONSISTENT SNAPSHOT modifier does not change the current\n  transaction isolation level, so it provides a consistent snapshot\n  only if the current isolation level is one that permits a consistent\n  read. The only isolation level that permits a consistent read is\n  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT\n  SNAPSHOT clause is ignored.\n\no The READ WRITE and READ ONLY modifiers set the transaction access\n  mode. They permit or prohibit changes to tables used in the\n  transaction. The READ ONLY restriction prevents the transaction from\n  modifying or locking both transactional and nontransactional tables\n  that are visible to other transactions; the transaction can still\n  modify or lock temporary tables. These modifiers are available as of\n  MySQL 5.6.5.\n\n  MySQL enables extra optimizations for queries on InnoDB tables when\n  the transaction is known to be read-only. Specifying READ ONLY\n  ensures these optimizations are applied in cases where the read-only\n  status cannot be determined automatically. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-performance-ro-txn.htm\n  l for more information.\n\n  If no access mode is specified, the default mode applies. Unless the\n  default has been changed, it is read/write. It is not permitted to\n  specify both READ WRITE and READ ONLY in the same statement.\n\n  In read-only mode, it remains possible to change tables created with\n  the TEMPORARY keyword using DML statements. Changes made with DDL\n  statements are not permitted, just as with permanent tables.\n\n  For additional information about transaction access mode, including\n  ways to change the default mode, see [HELP SET TRANSACTION].\n\n  If the read_only system variable is enabled, explicitly starting a\n  transaction with START TRANSACTION READ WRITE requires the SUPER\n  privilege.\n\n*Important*:\n\nMany APIs used for writing MySQL client applications (such as JDBC)\nprovide their own methods for starting transactions that can (and\nsometimes should) be used instead of sending a START TRANSACTION\nstatement from the client. See\nhttps://dev.mysql.com/doc/refman/5.6/en/connectors-apis.html, or the\ndocumentation for your API, for more information.\n\nTo disable autocommit mode explicitly, use the following statement:\n\nSET autocommit=0;\n\nAfter disabling autocommit mode by setting the autocommit variable to\nzero, changes to transaction-safe tables (such as those for InnoDB or\nNDB) are not made permanent immediately. You must use COMMIT to store\nyour changes to disk or ROLLBACK to ignore the changes.\n\nautocommit is a session variable and must be set for each session. To\ndisable autocommit mode for each new connection, see the description of\nthe autocommit system variable at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nBEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for\ninitiating a transaction. START TRANSACTION is standard SQL syntax, is\nthe recommended way to start an ad-hoc transaction, and permits\nmodifiers that BEGIN does not.\n\nThe BEGIN statement differs from the use of the BEGIN keyword that\nstarts a BEGIN ... END compound statement. The latter does not begin a\ntransaction. See [HELP BEGIN END].\n\n*Note*:\n\nWithin all stored programs (stored procedures and functions, triggers,\nand events), the parser treats BEGIN [WORK] as the beginning of a BEGIN\n... END block. Begin a transaction in this context with START\nTRANSACTION instead.\n\nThe optional WORK keyword is supported for COMMIT and ROLLBACK, as are\nthe CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of the\ncompletion_type system variable determines the default completion\nbehavior. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nThe AND CHAIN clause causes a new transaction to begin as soon as the\ncurrent one ends, and the new transaction has the same isolation level\nas the just-terminated transaction. The new transaction also uses the\nsame access mode (READ WRITE or READ ONLY) as the just-terminated\ntransaction. The RELEASE clause causes the server to disconnect the\ncurrent client session after terminating the current transaction.\nIncluding the NO keyword suppresses CHAIN or RELEASE completion, which\ncan be useful if the completion_type system variable is set to cause\nchaining or release completion by default.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/commit.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/commit.html');
INSERT INTO `help_topic` VALUES (485, 'ROLLBACK', 37, 'Syntax:\nSTART TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n\nThese statements provide control over use of transactions:\n\no START TRANSACTION or BEGIN start a new transaction.\n\no COMMIT commits the current transaction, making its changes permanent.\n\no ROLLBACK rolls back the current transaction, canceling its changes.\n\no SET autocommit disables or enables the default autocommit mode for\n  the current session.\n\nBy default, MySQL runs with autocommit mode enabled. This means that,\nwhen not otherwise inside a transaction, each statement is atomic, as\nif it were surrounded by START TRANSACTION and COMMIT. You cannot use\nROLLBACK to undo the effect; however, if an error occurs during\nstatement execution, the statement is rolled back.\n\nTo disable autocommit mode implicitly for a single series of\nstatements, use the START TRANSACTION statement:\n\nSTART TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n\nWith START TRANSACTION, autocommit remains disabled until you end the\ntransaction with COMMIT or ROLLBACK. The autocommit mode then reverts\nto its previous state.\n\nSTART TRANSACTION permits several modifiers that control transaction\ncharacteristics. To specify multiple modifiers, separate them by\ncommas.\n\no The WITH CONSISTENT SNAPSHOT modifier starts a consistent read for\n  storage engines that are capable of it. This applies only to InnoDB.\n  The effect is the same as issuing a START TRANSACTION followed by a\n  SELECT from any InnoDB table. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html.\n  The WITH CONSISTENT SNAPSHOT modifier does not change the current\n  transaction isolation level, so it provides a consistent snapshot\n  only if the current isolation level is one that permits a consistent\n  read. The only isolation level that permits a consistent read is\n  REPEATABLE READ. For all other isolation levels, the WITH CONSISTENT\n  SNAPSHOT clause is ignored.\n\no The READ WRITE and READ ONLY modifiers set the transaction access\n  mode. They permit or prohibit changes to tables used in the\n  transaction. The READ ONLY restriction prevents the transaction from\n  modifying or locking both transactional and nontransactional tables\n  that are visible to other transactions; the transaction can still\n  modify or lock temporary tables. These modifiers are available as of\n  MySQL 5.6.5.\n\n  MySQL enables extra optimizations for queries on InnoDB tables when\n  the transaction is known to be read-only. Specifying READ ONLY\n  ensures these optimizations are applied in cases where the read-only\n  status cannot be determined automatically. See\n  https://dev.mysql.com/doc/refman/5.6/en/innodb-performance-ro-txn.htm\n  l for more information.\n\n  If no access mode is specified, the default mode applies. Unless the\n  default has been changed, it is read/write. It is not permitted to\n  specify both READ WRITE and READ ONLY in the same statement.\n\n  In read-only mode, it remains possible to change tables created with\n  the TEMPORARY keyword using DML statements. Changes made with DDL\n  statements are not permitted, just as with permanent tables.\n\n  For additional information about transaction access mode, including\n  ways to change the default mode, see [HELP SET TRANSACTION].\n\n  If the read_only system variable is enabled, explicitly starting a\n  transaction with START TRANSACTION READ WRITE requires the SUPER\n  privilege.\n\n*Important*:\n\nMany APIs used for writing MySQL client applications (such as JDBC)\nprovide their own methods for starting transactions that can (and\nsometimes should) be used instead of sending a START TRANSACTION\nstatement from the client. See\nhttps://dev.mysql.com/doc/refman/5.6/en/connectors-apis.html, or the\ndocumentation for your API, for more information.\n\nTo disable autocommit mode explicitly, use the following statement:\n\nSET autocommit=0;\n\nAfter disabling autocommit mode by setting the autocommit variable to\nzero, changes to transaction-safe tables (such as those for InnoDB or\nNDB) are not made permanent immediately. You must use COMMIT to store\nyour changes to disk or ROLLBACK to ignore the changes.\n\nautocommit is a session variable and must be set for each session. To\ndisable autocommit mode for each new connection, see the description of\nthe autocommit system variable at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nBEGIN and BEGIN WORK are supported as aliases of START TRANSACTION for\ninitiating a transaction. START TRANSACTION is standard SQL syntax, is\nthe recommended way to start an ad-hoc transaction, and permits\nmodifiers that BEGIN does not.\n\nThe BEGIN statement differs from the use of the BEGIN keyword that\nstarts a BEGIN ... END compound statement. The latter does not begin a\ntransaction. See [HELP BEGIN END].\n\n*Note*:\n\nWithin all stored programs (stored procedures and functions, triggers,\nand events), the parser treats BEGIN [WORK] as the beginning of a BEGIN\n... END block. Begin a transaction in this context with START\nTRANSACTION instead.\n\nThe optional WORK keyword is supported for COMMIT and ROLLBACK, as are\nthe CHAIN and RELEASE clauses. CHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of the\ncompletion_type system variable determines the default completion\nbehavior. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nThe AND CHAIN clause causes a new transaction to begin as soon as the\ncurrent one ends, and the new transaction has the same isolation level\nas the just-terminated transaction. The new transaction also uses the\nsame access mode (READ WRITE or READ ONLY) as the just-terminated\ntransaction. The RELEASE clause causes the server to disconnect the\ncurrent client session after terminating the current transaction.\nIncluding the NO keyword suppresses CHAIN or RELEASE completion, which\ncan be useful if the completion_type system variable is set to cause\nchaining or release completion by default.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/commit.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/commit.html');
INSERT INTO `help_topic` VALUES (491, 'XA', 37, 'Syntax:\nXA {START|BEGIN} xid [JOIN|RESUME]\n\nXA END xid [SUSPEND [FOR MIGRATE]]\n\nXA PREPARE xid\n\nXA COMMIT xid [ONE PHASE]\n\nXA ROLLBACK xid\n\nXA RECOVER\n\nFor XA START, the JOIN and RESUME clauses are recognized but have no\neffect.\n\nFor XA END the SUSPEND [FOR MIGRATE] clause is recognized but has no\neffect.\n\nEach XA statement begins with the XA keyword, and most of them require\nan xid value. An xid is an XA transaction identifier. It indicates\nwhich transaction the statement applies to. xid values are supplied by\nthe client, or generated by the MySQL server. An xid value has from one\nto three parts:\n\nxid: gtrid [, bqual [, formatID ]]\n\ngtrid is a global transaction identifier, bqual is a branch qualifier,\nand formatID is a number that identifies the format used by the gtrid\nand bqual values. As indicated by the syntax, bqual and formatID are\noptional. The default bqual value is \'\' if not given. The default\nformatID value is 1 if not given.\n\ngtrid and bqual must be string literals, each up to 64 bytes (not\ncharacters) long. gtrid and bqual can be specified in several ways. You\ncan use a quoted string (\'ab\'), hex string (X\'6162\', 0x6162), or bit\nvalue (b\'nnnn\').\n\nformatID is an unsigned integer.\n\nThe gtrid and bqual values are interpreted in bytes by the MySQL\nserver\'s underlying XA support routines. However, while an SQL\nstatement containing an XA statement is being parsed, the server works\nwith some specific character set. To be safe, write gtrid and bqual as\nhex strings.\n\nxid values typically are generated by the Transaction Manager. Values\ngenerated by one TM must be different from values generated by other\nTMs. A given TM must be able to recognize its own xid values in a list\nof values returned by the XA RECOVER statement.\n\nXA START xid starts an XA transaction with the given xid value. Each XA\ntransaction must have a unique xid value, so the value must not\ncurrently be used by another XA transaction. Uniqueness is assessed\nusing the gtrid and bqual values. All following XA statements for the\nXA transaction must be specified using the same xid value as that given\nin the XA START statement. If you use any of those statements but\nspecify an xid value that does not correspond to some existing XA\ntransaction, an error occurs.\n\nOne or more XA transactions can be part of the same global transaction.\nAll XA transactions within a given global transaction must use the same\ngtrid value in the xid value. For this reason, gtrid values must be\nglobally unique so that there is no ambiguity about which global\ntransaction a given XA transaction is part of. The bqual part of the\nxid value must be different for each XA transaction within a global\ntransaction. (The requirement that bqual values be different is a\nlimitation of the current MySQL XA implementation. It is not part of\nthe XA specification.)\n\nThe XA RECOVER statement returns information for those XA transactions\non the MySQL server that are in the PREPARED state. (See\nhttps://dev.mysql.com/doc/refman/5.6/en/xa-states.html.) The output\nincludes a row for each such XA transaction on the server, regardless\nof which client started it.\n\nXA RECOVER output rows look like this (for an example xid value\nconsisting of the parts \'abc\', \'def\', and 7):\n\nmysql> XA RECOVER;\n+----------+--------------+--------------+--------+\n| formatID | gtrid_length | bqual_length | data   |\n+----------+--------------+--------------+--------+\n|        7 |            3 |            3 | abcdef |\n+----------+--------------+--------------+--------+\n\nThe output columns have the following meanings:\n\no formatID is the formatID part of the transaction xid\n\no gtrid_length is the length in bytes of the gtrid part of the xid\n\no bqual_length is the length in bytes of the bqual part of the xid\n\no data is the concatenation of the gtrid and bqual parts of the xid\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/xa-statements.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/xa-statements.html');
INSERT INTO `help_topic` VALUES (493, 'PURGE MASTER LOGS', 38, 'Syntax:\nPURGE { BINARY | MASTER } LOGS {\n    TO \'log_name\'\n  | BEFORE datetime_expr\n}\n\nThe binary log is a set of files that contain information about data\nmodifications made by the MySQL server. The log consists of a set of\nbinary log files, plus an index file (see\nhttps://dev.mysql.com/doc/refman/5.6/en/binary-log.html).\n\nThe PURGE BINARY LOGS statement deletes all the binary log files listed\nin the log index file prior to the specified log file name or date.\nBINARY and MASTER are synonyms. Deleted log files also are removed from\nthe list recorded in the index file, so that the given log file becomes\nthe first in the list.\n\nThis statement has no effect if the server was not started with the\n--log-bin option to enable binary logging.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/purge-binary-logs.html\n\n', 'PURGE BINARY LOGS TO \'mysql-bin.010\';\nPURGE BINARY LOGS BEFORE \'2019-04-02 22:46:26\';\n', 'https://dev.mysql.com/doc/refman/5.6/en/purge-binary-logs.html');
INSERT INTO `help_topic` VALUES (495, 'SET SQL_LOG_BIN', 38, 'Syntax:\nSET sql_log_bin = {OFF|ON}\n\nThe sql_log_bin variable controls whether logging to the binary log is\nenabled for the current session (assuming that the binary log itself is\nenabled). The default value is ON. To disable or enable binary logging\nfor the current session, set the session sql_log_bin variable to OFF or\nON.\n\nSet this variable to OFF for a session to temporarily disable binary\nlogging while making changes to the source you do not want replicated\nto the replica.\n\nSetting the session value of this system variable is a restricted\noperation. The session user must have privileges sufficient to set\nrestricted session variables. See\nhttps://dev.mysql.com/doc/refman/5.6/en/system-variable-privileges.html\n.\n\nIt is not possible to set the session value of sql_log_bin within a\ntransaction or subquery.\n\nSetting this variable to OFF prevents GTIDs from being assigned to\ntransactions in the binary log. If you are using GTIDs for replication,\nthis means that, even when binary logging is later enabled once again,\nthe GTIDs written into the log from this point do not account for any\ntransactions that occurred in the meantime---in effect, those\ntransactions are lost.\n\nAs of MySQL 5.6.22, the global sql_log_bin variable is read only and\ncannot be modified. The global scope is deprecated; expect it to be\nremoved in a future MySQL release. Prior to 5.6.22, sql_log_bin can be\nset as a global or session variable. Setting sql_log_bin globally is\nonly detected when a new session is started. Any sessions previously\nrunning are not impacted when setting sql_log_bin globally.\n\n*Warning*:\n\nIncorrect use of sql_log_bin with a global scope means any changes made\nin an already running session are still being recorded to the binary\nlog and therefore replicated. Exercise extreme caution using\nsql_log_bin with a global scope as the above situation could cause\nunexpected results including replication failure.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-sql-log-bin.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-sql-log-bin.html');
INSERT INTO `help_topic` VALUES (497, 'RESET SLAVE', 38, 'Syntax:\nRESET SLAVE [ALL]\n\nRESET SLAVE makes the replica forget its replication position in the\nsource\'s binary log. This statement is meant to be used for a clean\nstart: It clears the replication metadata repositories, deletes all the\nrelay log files, and starts a new relay log file. It also resets to 0\nthe replication delay specified with the MASTER_DELAY option to CHANGE\nMASTER TO. RESET SLAVE does not change the values of gtid_executed or\ngtid_purged. To use RESET SLAVE, the replication threads must be\nstopped, so on a running replica use STOP SLAVE before issuing RESET\nSLAVE.\n\n*Note*:\n\nAll relay log files are deleted, even if they have not been completely\nexecuted by the replication SQL thread. (This is a condition likely to\nexist on a replica if you have issued a STOP SLAVE statement or if the\nreplica is highly loaded.)\n\nIn MySQL 5.6 (unlike the case in MySQL 5.1 and earlier), RESET SLAVE\ndoes not change any replication connection parameters such as the\nsource\'s host name and port or the replication user account name and\npassword, which are retained in memory. This means that START SLAVE can\nbe issued without requiring a CHANGE MASTER TO statement following\nRESET SLAVE.\n\nConnection parameters are reset if the replica mysqld is shut down\nfollowing RESET SLAVE. In MySQL 5.6.3 and later, you can instead use\nRESET SLAVE ALL to reset these connection parameters (Bug #11809016).\n\nRESET SLAVE ALL does not clear the IGNORE_SERVER_IDS list set by CHANGE\nMASTER TO. This issue is fixed in MySQL 5.7. (Bug #18816897)\n\nIn MySQL 5.6.7 and later, RESET SLAVE causes an implicit commit of an\nongoing transaction. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nIf the replication SQL thread was in the middle of replicating\ntemporary tables when it was stopped, and RESET SLAVE is issued, these\nreplicated temporary tables are deleted on the replica.\n\n*Note*:\n\nWhen used on an NDB Cluster replica SQL node, RESET SLAVE clears the\nmysql.ndb_apply_status table. You should keep in mind when using this\nstatement that ndb_apply_status uses the NDB storage engine and so is\nshared by all SQL nodes attached to the replica cluster.\n\nBeginning with MySQL NDB Cluster 7.4.9, you can override this behavior\nby issuing SET GLOBAL @@ndb_clear_apply_status=OFF prior to executing\nRESET SLAVE, which keeps the replica from purging the ndb_apply_status\ntable in such cases.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/reset-slave.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/reset-slave.html');
INSERT INTO `help_topic` VALUES (500, 'STOP SLAVE', 38, 'Syntax:\nSTOP SLAVE [thread_types]\n\nthread_types:\n    [thread_type [, thread_type] ... ]\n\nthread_type: IO_THREAD | SQL_THREAD\n\nStops the replication threads. STOP SLAVE requires the SUPER privilege.\nRecommended best practice is to execute STOP SLAVE on the replica\nbefore stopping the replica server (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-shutdown.html, for more\ninformation).\n\nWhen using the row-based logging format: You should execute STOP SLAVE\nor STOP SLAVE SQL_THREAD on the replica prior to shutting down the\nreplica server if you are replicating any tables that use a\nnontransactional storage engine (see the Note later in this section).\n\nLike START SLAVE, this statement may be used with the IO_THREAD and\nSQL_THREAD options to name the thread or threads to be stopped.\n\nSTOP SLAVE causes an implicit commit of an ongoing transaction. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nBeginning with MySQL 5.6.11, gtid_next must be set to AUTOMATIC before\nissuing this statement (Bug #16062608).\n\nIn MySQL 5.6.13 and later, you can control how long STOP SLAVE waits\nbefore timing out by setting the rpl_stop_slave_timeout system\nvariable. This can be used to avoid deadlocks between STOP SLAVE and\nother SQL statements using different client connections to the replica.\nWhen the timeout value is reached, the issuing client returns an error\nmessage and stops waiting, but the STOP SLAVE instruction remains in\neffect. Once the replication threads are no longer busy, the STOP SLAVE\nstatement is executed and the replica stops. (Bug #16856735)\n\nIf the current replication event group has modified one or more\nnontransactional tables, STOP SLAVE waits for up to 60 seconds for the\nevent group to complete, unless you issue a KILL QUERY or KILL\nCONNECTION statement for the replication SQL thread. If the event group\nremains incomplete after the timeout, an error message is logged. (Bug\n#319, Bug #38205)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/stop-slave.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/stop-slave.html');
INSERT INTO `help_topic` VALUES (499, 'START SLAVE', 38, 'Syntax:\nSTART SLAVE [thread_types] [until_option] [connection_options]\n\nthread_types:\n    [thread_type [, thread_type] ... ]\n\nthread_type:\n    IO_THREAD | SQL_THREAD\n\nuntil_option:\n    UNTIL {   {SQL_BEFORE_GTIDS | SQL_AFTER_GTIDS} = gtid_set\n          |   MASTER_LOG_FILE = \'log_name\', MASTER_LOG_POS = log_pos\n          |   RELAY_LOG_FILE = \'log_name\', RELAY_LOG_POS = log_pos\n          |   SQL_AFTER_MTS_GAPS  }\n\nconnection_options:\n    [USER=\'user_name\'] [PASSWORD=\'user_pass\'] [DEFAULT_AUTH=\'plugin_name\'] [PLUGIN_DIR=\'plugin_dir\']\n\n\ngtid_set:\n    uuid_set [, uuid_set] ...\n    | \'\'\n\nuuid_set:\n    uuid:interval[:interval]...\n\nuuid:\n    hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\n\nh:\n    [0-9,A-F]\n\ninterval:\n    n[-n]\n\n    (n >= 1)\n\nSTART SLAVE with no thread_type options starts both of the replication\nthreads. The I/O thread reads events from the replication source server\nand stores them in the relay log. The SQL thread reads events from the\nrelay log and executes them. START SLAVE requires the SUPER privilege.\n\nIf START SLAVE succeeds in starting the replication threads, it returns\nwithout any error. However, even in that case, it might be that the\nreplication threads start and then later stop (for example, because\nthey do not manage to connect to the source or read its binary log, or\nsome other problem). START SLAVE does not warn you about this. You must\ncheck the replica\'s error log for error messages generated by the\nreplication threads, or check that they are running satisfactorily with\nSHOW SLAVE STATUS.\n\nSTART SLAVE causes an implicit commit of an ongoing transaction. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nBeginning with MySQL 5.6.11, gtid_next must be set to AUTOMATIC before\nissuing this statement (Bug #16062608).\n\nSTART SLAVE supports pluggable user-password authentication with the\nUSER, PASSWORD, DEFAULT_AUTH and PLUGIN_DIR options, as described in\nthe following list:\n\no USER: User name. Cannot be set to an empty or null string, or left\n  unset if PASSWORD is used.\n\no PASSWORD: Password.\n\no DEFAULT_AUTH: Name of plugin; default is MySQL native authentication.\n\no PLUGIN_DIR: Location of plugin.\n\nYou cannot use the SQL_THREAD option when specifying any of USER,\nPASSWORD, DEFAULT_AUTH, or PLUGIN_DIR, unless the IO_THREAD option is\nalso provided.\n\nFor more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/pluggable-authentication.html.\n\nIf an insecure connection is used with any these options, the server\nissues the warning Sending passwords in plain text without SSL/TLS is\nextremely insecure.\n\nSTART SLAVE ... UNTIL supports two additional options for use with\nglobal transaction identifiers (GTIDs) (see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-gtids.html). Each\nof these takes a set of one or more global transaction identifiers\ngtid_set as an argument (see\nhttps://dev.mysql.com/doc/refman/5.6/en/replication-gtids-concepts.html\n#replication-gtids-concepts-gtid-sets, for more information).\n\nWhen no thread_type is specified, START SLAVE UNTIL SQL_BEFORE_GTIDS\ncauses the replication SQL thread to process transactions until it has\nreached the first transaction whose GTID is listed in the gtid_set.\nSTART SLAVE UNTIL SQL_AFTER_GTIDS causes the replication threads to\nprocess all transactions until the last transaction in the gtid_set has\nbeen processed by both threads. In other words, START SLAVE UNTIL\nSQL_BEFORE_GTIDS causes the replication SQL thread to process all\ntransactions occurring before the first GTID in the gtid_set is\nreached, and START SLAVE UNTIL SQL_AFTER_GTIDS causes the replication\nthreads to handle all transactions, including those whose GTIDs are\nfound in gtid_set, until each has encountered a transaction whose GTID\nis not part of the set. SQL_BEFORE_GTIDS and SQL_AFTER_GTIDS each\nsupport the SQL_THREAD and IO_THREAD options, although using IO_THREAD\nwith them currently has no effect.\n\nFor example, START SLAVE SQL_THREAD UNTIL SQL_BEFORE_GTIDS =\n3E11FA47-71CA-11E1-9E33-C80AA9429562:11-56 causes the replication SQL\nthread to process all transactions originating from the source whose\nserver_uuid is 3E11FA47-71CA-11E1-9E33-C80AA9429562 until it encounters\nthe transaction having sequence number 11; it then stops without\nprocessing this transaction. In other words, all transactions up to and\nincluding the transaction with sequence number 10 are processed.\nExecuting START SLAVE SQL_THREAD UNTIL SQL_AFTER_GTIDS =\n3E11FA47-71CA-11E1-9E33-C80AA9429562:11-56, on the other hand, would\ncause the replication SQL thread to obtain all transactions just\nmentioned from the source, including all of the transactions having the\nsequence numbers 11 through 56, and then to stop without processing any\nadditional transactions; that is, the transaction having sequence\nnumber 56 would be the last transaction fetched by the replication SQL\nthread.\n\nPrior to MySQL 5.6.14, SQL_AFTER_GTIDS did not stop the replica once\nthe indicated transaction was completed, but waited until another GTID\nevent was received (Bug #14767986).\n\nUse the START SLAVE UNTIL SQL_AFTER_MTS_GAPS statement to cause a\nmultithreaded replica\'s SQL threads to run until no more gaps are found\nin the relay log, and then to stop. This statement can take an\nSQL_THREAD option, but the effects of the statement remain unchanged.\nIt has no effect on the replication I/O thread (and cannot be used with\nthe IO_THREAD option). START SLAVE UNTIL SQL_AFTER_MTS_GAPS should be\nused before switching the replica from multithreaded mode to\nsingle-threaded mode (that is, when resetting slave_parallel_workers\nback to 0 from a positive, nonzero value) after the replica has failed\nwith errors in multithreaded mode.\n\nTo change a failed multithreaded replica to single-threaded mode, you\ncan issue the following series of statements, in the order shown:\n\nSTART SLAVE UNTIL SQL_AFTER_MTS_GAPS;\n\nSET @@GLOBAL.slave_parallel_workers = 0;\n\nSTART SLAVE SQL_THREAD;\n\nIf you were running the failed multithreaded replica with\nrelay_log_recovery enabled, then you must issue START SLAVE UNTIL\nSQL_AFTER_MTS_GAPS prior to executing CHANGE MASTER TO. Otherwise the\nlatter statement fails.\n\n*Note*:\n\nIt is possible to view the entire text of a running START SLAVE ...\nstatement, including any USER or PASSWORD values used, in the output of\nSHOW PROCESSLIST. This is also true for the text of a running CHANGE\nMASTER TO statement, including any values it employs for MASTER_USER or\nMASTER_PASSWORD.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/start-slave.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/start-slave.html');
INSERT INTO `help_topic` VALUES (501, 'PREPARE', 39, 'Syntax:\nPREPARE stmt_name FROM preparable_stmt\n\nThe PREPARE statement prepares a SQL statement and assigns it a name,\nstmt_name, by which to refer to the statement later. The prepared\nstatement is executed with EXECUTE and released with DEALLOCATE\nPREPARE. For examples, see\nhttps://dev.mysql.com/doc/refman/5.6/en/sql-prepared-statements.html.\n\nStatement names are not case-sensitive. preparable_stmt is either a\nstring literal or a user variable that contains the text of the SQL\nstatement. The text must represent a single statement, not multiple\nstatements. Within the statement, ? characters can be used as parameter\nmarkers to indicate where data values are to be bound to the query\nlater when you execute it. The ? characters should not be enclosed\nwithin quotation marks, even if you intend to bind them to string\nvalues. Parameter markers can be used only where data values should\nappear, not for SQL keywords, identifiers, and so forth.\n\nIf a prepared statement with the given name already exists, it is\ndeallocated implicitly before the new statement is prepared. This means\nthat if the new statement contains an error and cannot be prepared, an\nerror is returned and no statement with the given name exists.\n\nThe scope of a prepared statement is the session within which it is\ncreated, which as several implications:\n\no A prepared statement created in one session is not available to other\n  sessions.\n\no When a session ends, whether normally or abnormally, its prepared\n  statements no longer exist. If auto-reconnect is enabled, the client\n  is not notified that the connection was lost. For this reason,\n  clients may wish to disable auto-reconnect. See C API Automatic\n  Reconnection Control\n  (https://dev.mysql.com/doc/c-api/5.6/en/c-api-auto-reconnect.html).\n\no A prepared statement created within a stored program continues to\n  exist after the program finishes executing and can be executed\n  outside the program later.\n\no A statement prepared in stored program context cannot refer to stored\n  procedure or function parameters or local variables because they go\n  out of scope when the program ends and would be unavailable were the\n  statement to be executed later outside the program. As a workaround,\n  refer instead to user-defined variables, which also have session\n  scope; see\n  https://dev.mysql.com/doc/refman/5.6/en/user-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/prepare.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/prepare.html');
INSERT INTO `help_topic` VALUES (502, 'EXECUTE STATEMENT', 39, 'Syntax:\nEXECUTE stmt_name\n    [USING @var_name [, @var_name] ...]\n\nAfter preparing a statement with PREPARE, you execute it with an\nEXECUTE statement that refers to the prepared statement name. If the\nprepared statement contains any parameter markers, you must supply a\nUSING clause that lists user variables containing the values to be\nbound to the parameters. Parameter values can be supplied only by user\nvariables, and the USING clause must name exactly as many variables as\nthe number of parameter markers in the statement.\n\nYou can execute a given prepared statement multiple times, passing\ndifferent variables to it or setting the variables to different values\nbefore each execution.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/execute.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/execute.html');
INSERT INTO `help_topic` VALUES (505, 'BEGIN END', 40, 'Syntax:\n[begin_label:] BEGIN\n    [statement_list]\nEND [end_label]\n\nBEGIN ... END syntax is used for writing compound statements, which can\nappear within stored programs (stored procedures and functions,\ntriggers, and events). A compound statement can contain multiple\nstatements, enclosed by the BEGIN and END keywords. statement_list\nrepresents a list of one or more statements, each terminated by a\nsemicolon (;) statement delimiter. The statement_list itself is\noptional, so the empty compound statement (BEGIN END) is legal.\n\nBEGIN ... END blocks can be nested.\n\nUse of multiple statements requires that a client is able to send\nstatement strings containing the ; statement delimiter. In the mysql\ncommand-line client, this is handled with the delimiter command.\nChanging the ; end-of-statement delimiter (for example, to //) permit ;\nto be used in a program body. For an example, see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-programs-defining.html.\n\nA BEGIN ... END block can be labeled. See [HELP labels].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/begin-end.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/begin-end.html');
INSERT INTO `help_topic` VALUES (506, 'LABELS', 40, 'Syntax:\n[begin_label:] BEGIN\n    [statement_list]\nEND [end_label]\n\n[begin_label:] LOOP\n    statement_list\nEND LOOP [end_label]\n\n[begin_label:] REPEAT\n    statement_list\nUNTIL search_condition\nEND REPEAT [end_label]\n\n[begin_label:] WHILE search_condition DO\n    statement_list\nEND WHILE [end_label]\n\nLabels are permitted for BEGIN ... END blocks and for the LOOP, REPEAT,\nand WHILE statements. Label use for those statements follows these\nrules:\n\no begin_label must be followed by a colon.\n\no begin_label can be given without end_label. If end_label is present,\n  it must be the same as begin_label.\n\no end_label cannot be given without begin_label.\n\no Labels at the same nesting level must be distinct.\n\no Labels can be up to 16 characters long.\n\nTo refer to a label within the labeled construct, use an ITERATE or\nLEAVE statement. The following example uses those statements to\ncontinue iterating or terminate the loop:\n\nCREATE PROCEDURE doiterate(p1 INT)\nBEGIN\n  label1: LOOP\n    SET p1 = p1 + 1;\n    IF p1 < 10 THEN ITERATE label1; END IF;\n    LEAVE label1;\n  END LOOP label1;\nEND;\n\nThe scope of a block label does not include the code for handlers\ndeclared within the block. For details, see [HELP DECLARE HANDLER].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/statement-labels.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/statement-labels.html');
INSERT INTO `help_topic` VALUES (507, 'DECLARE VARIABLE', 40, 'Syntax:\nDECLARE var_name [, var_name] ... type [DEFAULT value]\n\nThis statement declares local variables within stored programs. To\nprovide a default value for a variable, include a DEFAULT clause. The\nvalue can be specified as an expression; it need not be a constant. If\nthe DEFAULT clause is missing, the initial value is NULL.\n\nLocal variables are treated like stored routine parameters with respect\nto data type and overflow checking. See [HELP CREATE PROCEDURE].\n\nVariable declarations must appear before cursor or handler\ndeclarations.\n\nLocal variable names are not case-sensitive. Permissible characters and\nquoting rules are the same as for other identifiers, as described in\nhttps://dev.mysql.com/doc/refman/5.6/en/identifiers.html.\n\nThe scope of a local variable is the BEGIN ... END block within which\nit is declared. The variable can be referred to in blocks nested within\nthe declaring block, except those blocks that declare a variable with\nthe same name.\n\nFor examples of variable declarations, see\nhttps://dev.mysql.com/doc/refman/5.6/en/local-variable-scope.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/declare-local-variable.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/declare-local-variable.html');
INSERT INTO `help_topic` VALUES (508, 'CASE STATEMENT', 40, 'Syntax:\nCASE case_value\n    WHEN when_value THEN statement_list\n    [WHEN when_value THEN statement_list] ...\n    [ELSE statement_list]\nEND CASE\n\nOr:\n\nCASE\n    WHEN search_condition THEN statement_list\n    [WHEN search_condition THEN statement_list] ...\n    [ELSE statement_list]\nEND CASE\n\nThe CASE statement for stored programs implements a complex conditional\nconstruct.\n\n*Note*:\n\nThere is also a CASE operator, which differs from the CASE statement\ndescribed here. See\nhttps://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html.\nThe CASE statement cannot have an ELSE NULL clause, and it is\nterminated with END CASE instead of END.\n\nFor the first syntax, case_value is an expression. This value is\ncompared to the when_value expression in each WHEN clause until one of\nthem is equal. When an equal when_value is found, the corresponding\nTHEN clause statement_list executes. If no when_value is equal, the\nELSE clause statement_list executes, if there is one.\n\nThis syntax cannot be used to test for equality with NULL because NULL\n= NULL is false. See\nhttps://dev.mysql.com/doc/refman/5.6/en/working-with-null.html.\n\nFor the second syntax, each WHEN clause search_condition expression is\nevaluated until one is true, at which point its corresponding THEN\nclause statement_list executes. If no search_condition is equal, the\nELSE clause statement_list executes, if there is one.\n\nIf no when_value or search_condition matches the value tested and the\nCASE statement contains no ELSE clause, a Case not found for CASE\nstatement error results.\n\nEach statement_list consists of one or more SQL statements; an empty\nstatement_list is not permitted.\n\nTo handle situations where no value is matched by any WHEN clause, use\nan ELSE containing an empty BEGIN ... END block, as shown in this\nexample. (The indentation used here in the ELSE clause is for purposes\nof clarity only, and is not otherwise significant.)\n\nDELIMITER |\n\nCREATE PROCEDURE p()\n  BEGIN\n    DECLARE v INT DEFAULT 1;\n\n    CASE v\n      WHEN 2 THEN SELECT v;\n      WHEN 3 THEN SELECT 0;\n      ELSE\n        BEGIN\n        END;\n    END CASE;\n  END;\n  |\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/case.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/case.html');
INSERT INTO `help_topic` VALUES (509, 'IF STATEMENT', 40, 'Syntax:\nIF search_condition THEN statement_list\n    [ELSEIF search_condition THEN statement_list] ...\n    [ELSE statement_list]\nEND IF\n\nThe IF statement for stored programs implements a basic conditional\nconstruct.\n\n*Note*:\n\nThere is also an IF() function, which differs from the IF statement\ndescribed here. See\nhttps://dev.mysql.com/doc/refman/5.6/en/flow-control-functions.html.\nThe IF statement can have THEN, ELSE, and ELSEIF clauses, and it is\nterminated with END IF.\n\nIf a given search_condition evaluates to true, the corresponding THEN\nor ELSEIF clause statement_list executes. If no search_condition\nmatches, the ELSE clause statement_list executes.\n\nEach statement_list consists of one or more SQL statements; an empty\nstatement_list is not permitted.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/if.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/if.html');
INSERT INTO `help_topic` VALUES (512, 'LOOP', 40, 'Syntax:\n[begin_label:] LOOP\n    statement_list\nEND LOOP [end_label]\n\nLOOP implements a simple loop construct, enabling repeated execution of\nthe statement list, which consists of one or more statements, each\nterminated by a semicolon (;) statement delimiter. The statements\nwithin the loop are repeated until the loop is terminated. Usually,\nthis is accomplished with a LEAVE statement. Within a stored function,\nRETURN can also be used, which exits the function entirely.\n\nNeglecting to include a loop-termination statement results in an\ninfinite loop.\n\nA LOOP statement can be labeled. For the rules regarding label use, see\n[HELP labels].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/loop.html\n\n', 'CREATE PROCEDURE doiterate(p1 INT)\nBEGIN\n  label1: LOOP\n    SET p1 = p1 + 1;\n    IF p1 < 10 THEN\n      ITERATE label1;\n    END IF;\n    LEAVE label1;\n  END LOOP label1;\n  SET @x = p1;\nEND;\n', 'https://dev.mysql.com/doc/refman/5.6/en/loop.html');
INSERT INTO `help_topic` VALUES (513, 'REPEAT LOOP', 40, 'Syntax:\n[begin_label:] REPEAT\n    statement_list\nUNTIL search_condition\nEND REPEAT [end_label]\n\nThe statement list within a REPEAT statement is repeated until the\nsearch_condition expression is true. Thus, a REPEAT always enters the\nloop at least once. statement_list consists of one or more statements,\neach terminated by a semicolon (;) statement delimiter.\n\nA REPEAT statement can be labeled. For the rules regarding label use,\nsee [HELP labels].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/repeat.html\n\n', 'mysql> delimiter //\n\nmysql> CREATE PROCEDURE dorepeat(p1 INT)\n       BEGIN\n         SET @x = 0;\n         REPEAT\n           SET @x = @x + 1;\n         UNTIL @x > p1 END REPEAT;\n       END\n       //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL dorepeat(1000)//\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @x//\n+------+\n| @x   |\n+------+\n| 1001 |\n+------+\n1 row in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/repeat.html');
INSERT INTO `help_topic` VALUES (517, 'DECLARE CURSOR', 40, 'Syntax:\nDECLARE cursor_name CURSOR FOR select_statement\n\nThis statement declares a cursor and associates it with a SELECT\nstatement that retrieves the rows to be traversed by the cursor. To\nfetch the rows later, use a FETCH statement. The number of columns\nretrieved by the SELECT statement must match the number of output\nvariables specified in the FETCH statement.\n\nThe SELECT statement cannot have an INTO clause.\n\nCursor declarations must appear before handler declarations and after\nvariable and condition declarations.\n\nA stored program may contain multiple cursor declarations, but each\ncursor declared in a given block must have a unique name. For an\nexample, see https://dev.mysql.com/doc/refman/5.6/en/cursors.html.\n\nFor information available through SHOW statements, it is possible in\nmany cases to obtain equivalent information by using a cursor with an\nINFORMATION_SCHEMA table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/declare-cursor.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/declare-cursor.html');
INSERT INTO `help_topic` VALUES (518, 'FETCH', 40, 'Syntax:\nFETCH [[NEXT] FROM] cursor_name INTO var_name [, var_name] ...\n\nThis statement fetches the next row for the SELECT statement associated\nwith the specified cursor (which must be open), and advances the cursor\npointer. If a row exists, the fetched columns are stored in the named\nvariables. The number of columns retrieved by the SELECT statement must\nmatch the number of output variables specified in the FETCH statement.\n\nIf no more rows are available, a No Data condition occurs with SQLSTATE\nvalue \'02000\'. To detect this condition, you can set up a handler for\nit (or for a NOT FOUND condition). For an example, see\nhttps://dev.mysql.com/doc/refman/5.6/en/cursors.html.\n\nBe aware that another operation, such as a SELECT or another FETCH, may\nalso cause the handler to execute by raising the same condition. If it\nis necessary to distinguish which operation raised the condition, place\nthe operation within its own BEGIN ... END block so that it can be\nassociated with its own handler.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/fetch.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/fetch.html');
INSERT INTO `help_topic` VALUES (520, 'DECLARE CONDITION', 40, 'Syntax:\nDECLARE condition_name CONDITION FOR condition_value\n\ncondition_value: {\n    mysql_error_code\n  | SQLSTATE [VALUE] sqlstate_value\n}\n\nThe DECLARE ... CONDITION statement declares a named error condition,\nassociating a name with a condition that needs specific handling. The\nname can be referred to in a subsequent DECLARE ... HANDLER statement\n(see [HELP DECLARE HANDLER]).\n\nCondition declarations must appear before cursor or handler\ndeclarations.\n\nThe condition_value for DECLARE ... CONDITION indicates the specific\ncondition or class of conditions to associate with the condition name.\nIt can take the following forms:\n\no mysql_error_code: An integer literal indicating a MySQL error code.\n\n  Do not use MySQL error code 0 because that indicates success rather\n  than an error condition. For a list of MySQL error codes, see Server\n  Error Message Reference\n  (https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference\n  .html).\n\no SQLSTATE [VALUE] sqlstate_value: A 5-character string literal\n  indicating an SQLSTATE value.\n\n  Do not use SQLSTATE values that begin with \'00\' because those\n  indicate success rather than an error condition. For a list of\n  SQLSTATE values, see Server Error Message Reference\n  (https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference\n  .html).\n\nCondition names referred to in SIGNAL or use RESIGNAL statements must\nbe associated with SQLSTATE values, not MySQL error codes.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/declare-condition.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/declare-condition.html');
INSERT INTO `help_topic` VALUES (523, 'RESIGNAL', 40, 'Syntax:\nRESIGNAL [condition_value]\n    [SET signal_information_item\n    [, signal_information_item] ...]\n\ncondition_value: {\n    SQLSTATE [VALUE] sqlstate_value\n  | condition_name\n}\n\nsignal_information_item:\n    condition_information_item_name = simple_value_specification\n\ncondition_information_item_name: {\n    CLASS_ORIGIN\n  | SUBCLASS_ORIGIN\n  | MESSAGE_TEXT\n  | MYSQL_ERRNO\n  | CONSTRAINT_CATALOG\n  | CONSTRAINT_SCHEMA\n  | CONSTRAINT_NAME\n  | CATALOG_NAME\n  | SCHEMA_NAME\n  | TABLE_NAME\n  | COLUMN_NAME\n  | CURSOR_NAME\n}\n\ncondition_name, simple_value_specification:\n    (see following discussion)\n\nRESIGNAL passes on the error condition information that is available\nduring execution of a condition handler within a compound statement\ninside a stored procedure or function, trigger, or event. RESIGNAL may\nchange some or all information before passing it on. RESIGNAL is\nrelated to SIGNAL, but instead of originating a condition as SIGNAL\ndoes, RESIGNAL relays existing condition information, possibly after\nmodifying it.\n\nRESIGNAL makes it possible to both handle an error and return the error\ninformation. Otherwise, by executing an SQL statement within the\nhandler, information that caused the handler\'s activation is destroyed.\nRESIGNAL also can make some procedures shorter if a given handler can\nhandle part of a situation, then pass the condition \"up the line\" to\nanother handler.\n\nNo privileges are required to execute the RESIGNAL statement.\n\nAll forms of RESIGNAL require that the current context be a condition\nhandler. Otherwise, RESIGNAL is illegal and a RESIGNAL when handler not\nactive error occurs.\n\nTo retrieve information from the diagnostics area, use the GET\nDIAGNOSTICS statement (see [HELP GET DIAGNOSTICS]). For information\nabout the diagnostics area, see\nhttps://dev.mysql.com/doc/refman/5.6/en/diagnostics-area.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/resignal.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/resignal.html');
INSERT INTO `help_topic` VALUES (521, 'DECLARE HANDLER', 40, 'Syntax:\nDECLARE handler_action HANDLER\n    FOR condition_value [, condition_value] ...\n    statement\n\nhandler_action: {\n    CONTINUE\n  | EXIT\n  | UNDO\n}\n\ncondition_value: {\n    mysql_error_code\n  | SQLSTATE [VALUE] sqlstate_value\n  | condition_name\n  | SQLWARNING\n  | NOT FOUND\n  | SQLEXCEPTION\n}\n\nThe DECLARE ... HANDLER statement specifies a handler that deals with\none or more conditions. If one of these conditions occurs, the\nspecified statement executes. statement can be a simple statement such\nas SET var_name = value, or a compound statement written using BEGIN\nand END (see [HELP BEGIN END]).\n\nHandler declarations must appear after variable or condition\ndeclarations.\n\nThe handler_action value indicates what action the handler takes after\nexecution of the handler statement:\n\no CONTINUE: Execution of the current program continues.\n\no EXIT: Execution terminates for the BEGIN ... END compound statement\n  in which the handler is declared. This is true even if the condition\n  occurs in an inner block.\n\no UNDO: Not supported.\n\nThe condition_value for DECLARE ... HANDLER indicates the specific\ncondition or class of conditions that activates the handler. It can\ntake the following forms:\n\no mysql_error_code: An integer literal indicating a MySQL error code,\n  such as 1051 to specify \"unknown table\":\n\nDECLARE CONTINUE HANDLER FOR 1051\n  BEGIN\n    -- body of handler\n  END;\n\n  Do not use MySQL error code 0 because that indicates success rather\n  than an error condition. For a list of MySQL error codes, see Server\n  Error Message Reference\n  (https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference\n  .html).\n\no SQLSTATE [VALUE] sqlstate_value: A 5-character string literal\n  indicating an SQLSTATE value, such as \'42S01\' to specify \"unknown\n  table\":\n\nDECLARE CONTINUE HANDLER FOR SQLSTATE \'42S02\'\n  BEGIN\n    -- body of handler\n  END;\n\n  Do not use SQLSTATE values that begin with \'00\' because those\n  indicate success rather than an error condition. For a list of\n  SQLSTATE values, see Server Error Message Reference\n  (https://dev.mysql.com/doc/mysql-errors/5.6/en/server-error-reference\n  .html).\n\no condition_name: A condition name previously specified with DECLARE\n  ... CONDITION. A condition name can be associated with a MySQL error\n  code or SQLSTATE value. See [HELP DECLARE CONDITION].\n\no SQLWARNING: Shorthand for the class of SQLSTATE values that begin\n  with \'01\'.\n\nDECLARE CONTINUE HANDLER FOR SQLWARNING\n  BEGIN\n    -- body of handler\n  END;\n\no NOT FOUND: Shorthand for the class of SQLSTATE values that begin with\n  \'02\'. This is relevant within the context of cursors and is used to\n  control what happens when a cursor reaches the end of a data set. If\n  no more rows are available, a No Data condition occurs with SQLSTATE\n  value \'02000\'. To detect this condition, you can set up a handler for\n  it or for a NOT FOUND condition.\n\nDECLARE CONTINUE HANDLER FOR NOT FOUND\n  BEGIN\n    -- body of handler\n  END;\n\n  For another example, see\n  https://dev.mysql.com/doc/refman/5.6/en/cursors.html. The NOT FOUND\n  condition also occurs for SELECT ... INTO var_list statements that\n  retrieve no rows.\n\no SQLEXCEPTION: Shorthand for the class of SQLSTATE values that do not\n  begin with \'00\', \'01\', or \'02\'.\n\nDECLARE CONTINUE HANDLER FOR SQLEXCEPTION\n  BEGIN\n    -- body of handler\n  END;\n\nFor information about how the server chooses handlers when a condition\noccurs, see https://dev.mysql.com/doc/refman/5.6/en/handler-scope.html.\n\nIf a condition occurs for which no handler has been declared, the\naction taken depends on the condition class:\n\no For SQLEXCEPTION conditions, the stored program terminates at the\n  statement that raised the condition, as if there were an EXIT\n  handler. If the program was called by another stored program, the\n  calling program handles the condition using the handler selection\n  rules applied to its own handlers.\n\no For SQLWARNING conditions, the program continues executing, as if\n  there were a CONTINUE handler.\n\no For NOT FOUND conditions, if the condition was raised normally, the\n  action is CONTINUE. If it was raised by SIGNAL or RESIGNAL, the\n  action is EXIT.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/declare-handler.html\n\n', 'mysql> CREATE TABLE test.t (s1 INT, PRIMARY KEY (s1));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter //\n\nmysql> CREATE PROCEDURE handlerdemo ()\n       BEGIN\n         DECLARE CONTINUE HANDLER FOR SQLSTATE \'23000\' SET @x2 = 1;\n         SET @x = 1;\n         INSERT INTO test.t VALUES (1);\n         SET @x = 2;\n         INSERT INTO test.t VALUES (1);\n         SET @x = 3;\n       END;\n       //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL handlerdemo()//\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @x//\n    +------+\n    | @x   |\n    +------+\n    | 3    |\n    +------+\n    1 row in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/declare-handler.html');
INSERT INTO `help_topic` VALUES (522, 'GET DIAGNOSTICS', 40, 'Syntax:\nGET [CURRENT] DIAGNOSTICS {\n    statement_information_item\n    [, statement_information_item] ...\n  | CONDITION condition_number\n    condition_information_item\n    [, condition_information_item] ...\n}\n\nstatement_information_item:\n    target = statement_information_item_name\n\ncondition_information_item:\n    target = condition_information_item_name\n\nstatement_information_item_name: {\n    NUMBER\n  | ROW_COUNT\n}\n\ncondition_information_item_name: {\n    CLASS_ORIGIN\n  | SUBCLASS_ORIGIN\n  | RETURNED_SQLSTATE\n  | MESSAGE_TEXT\n  | MYSQL_ERRNO\n  | CONSTRAINT_CATALOG\n  | CONSTRAINT_SCHEMA\n  | CONSTRAINT_NAME\n  | CATALOG_NAME\n  | SCHEMA_NAME\n  | TABLE_NAME\n  | COLUMN_NAME\n  | CURSOR_NAME\n}\n\ncondition_number, target:\n    (see following discussion)\n\nSQL statements produce diagnostic information that populates the\ndiagnostics area. The GET DIAGNOSTICS statement enables applications to\ninspect this information. It is available as of MySQL 5.6.4. (You can\nalso use SHOW WARNINGS or SHOW ERRORS to see conditions or errors.)\n\nNo special privileges are required to execute GET DIAGNOSTICS.\n\nThe keyword CURRENT means to retrieve information from the current\ndiagnostics area. In MySQL, it has no effect because that is the\ndefault behavior.\n\nGET DIAGNOSTICS is typically used in a handler within a stored program,\nbut it is a MySQL extension that it is permitted outside handler\ncontext to check the execution of any SQL statement. For example, if\nyou invoke the mysql client program, you can enter these statements at\nthe prompt:\n\nmysql> DROP TABLE test.no_such_table;\nERROR 1051 (42S02): Unknown table \'test.no_such_table\'\nmysql> GET DIAGNOSTICS CONDITION 1\n         @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;\nmysql> SELECT @p1, @p2;\n+-------+------------------------------------+\n| @p1   | @p2                                |\n+-------+------------------------------------+\n| 42S02 | Unknown table \'test.no_such_table\' |\n+-------+------------------------------------+\n\nFor a description of the diagnostics area, see\nhttps://dev.mysql.com/doc/refman/5.6/en/diagnostics-area.html. Briefly,\nit contains two kinds of information:\n\no Statement information, such as the number of conditions that occurred\n  or the affected-rows count.\n\no Condition information, such as the error code and message. If a\n  statement raises multiple conditions, this part of the diagnostics\n  area has a condition area for each one. If a statement raises no\n  conditions, this part of the diagnostics area is empty.\n\nFor a statement that produces three conditions, the diagnostics area\ncontains statement and condition information like this:\n\nStatement information:\n  row count\n  ... other statement information items ...\nCondition area list:\n  Condition area 1:\n    error code for condition 1\n    error message for condition 1\n    ... other condition information items ...\n  Condition area 2:\n    error code for condition 2:\n    error message for condition 2\n    ... other condition information items ...\n  Condition area 3:\n    error code for condition 3\n    error message for condition 3\n    ... other condition information items ...\n\nGET DIAGNOSTICS can obtain either statement or condition information,\nbut not both in the same statement:\n\no To obtain statement information, retrieve the desired statement items\n  into target variables. This instance of GET DIAGNOSTICS assigns the\n  number of available conditions and the rows-affected count to the\n  user variables @p1 and @p2:\n\nGET DIAGNOSTICS @p1 = NUMBER, @p2 = ROW_COUNT;\n\no To obtain condition information, specify the condition number and\n  retrieve the desired condition items into target variables. This\n  instance of GET DIAGNOSTICS assigns the SQLSTATE value and error\n  message to the user variables @p3 and @p4:\n\nGET DIAGNOSTICS CONDITION 1\n  @p3 = RETURNED_SQLSTATE, @p4 = MESSAGE_TEXT;\n\nThe retrieval list specifies one or more target = item_name\nassignments, separated by commas. Each assignment names a target\nvariable and either a statement_information_item_name or\ncondition_information_item_name designator, depending on whether the\nstatement retrieves statement or condition information.\n\nValid target designators for storing item information can be stored\nprocedure or function parameters, stored program local variables\ndeclared with DECLARE, or user-defined variables.\n\nValid condition_number designators can be stored procedure or function\nparameters, stored program local variables declared with DECLARE,\nuser-defined variables, system variables, or literals. A character\nliteral may include a _charset introducer. A warning occurs if the\ncondition number is not in the range from 1 to the number of condition\nareas that have information. In this case, the warning is added to the\ndiagnostics area without clearing it.\n\nWhen a condition occurs, MySQL does not populate all condition items\nrecognized by GET DIAGNOSTICS. For example:\n\nmysql> GET DIAGNOSTICS CONDITION 1\n         @p5 = SCHEMA_NAME, @p6 = TABLE_NAME;\nmysql> SELECT @p5, @p6;\n+------+------+\n| @p5  | @p6  |\n+------+------+\n|      |      |\n+------+------+\n\nIn standard SQL, if there are multiple conditions, the first condition\nrelates to the SQLSTATE value returned for the previous SQL statement.\nIn MySQL, this is not guaranteed. To get the main error, you cannot do\nthis:\n\nGET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO;\n\nInstead, retrieve the condition count first, then use it to specify\nwhich condition number to inspect:\n\nGET DIAGNOSTICS @cno = NUMBER;\nGET DIAGNOSTICS CONDITION @cno @errno = MYSQL_ERRNO;\n\nFor information about permissible statement and condition information\nitems, and which ones are populated when a condition occurs, see\nhttps://dev.mysql.com/doc/refman/5.6/en/diagnostics-area.html#diagnosti\ncs-area-information-items.\n\nHere is an example that uses GET DIAGNOSTICS and an exception handler\nin stored procedure context to assess the outcome of an insert\noperation. If the insert was successful, the procedure uses GET\nDIAGNOSTICS to get the rows-affected count. This shows that you can use\nGET DIAGNOSTICS multiple times to retrieve information about a\nstatement as long as the diagnostics area has not been cleared.\n\nCREATE PROCEDURE do_insert(value INT)\nBEGIN\n  -- Declare variables to hold diagnostics area information\n  DECLARE code CHAR(5) DEFAULT \'00000\';\n  DECLARE msg TEXT;\n  DECLARE nrows INT;\n  DECLARE result TEXT;\n  -- Declare exception handler for failed insert\n  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION\n    BEGIN\n      GET DIAGNOSTICS CONDITION 1\n        code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;\n    END;\n\n  -- Perform the insert\n  INSERT INTO t1 (int_col) VALUES(value);\n  -- Check whether the insert was successful\n  IF code = \'00000\' THEN\n    GET DIAGNOSTICS nrows = ROW_COUNT;\n    SET result = CONCAT(\'insert succeeded, row count = \',nrows);\n  ELSE\n    SET result = CONCAT(\'insert failed, error = \',code,\', message = \',msg);\n  END IF;\n  -- Say what happened\n  SELECT result;\nEND;\n\nSuppose that t1.int_col is an integer column that is declared as NOT\nNULL. The procedure produces these results when invoked to insert\nnon-NULL and NULL values, respectively:\n\nmysql> CALL do_insert(1);\n+---------------------------------+\n| result                          |\n+---------------------------------+\n| insert succeeded, row count = 1 |\n+---------------------------------+\n\nmysql> CALL do_insert(NULL);\n+-------------------------------------------------------------------------+\n| result                                                                  |\n+-------------------------------------------------------------------------+\n| insert failed, error = 23000, message = Column \'int_col\' cannot be null |\n+-------------------------------------------------------------------------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/get-diagnostics.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/get-diagnostics.html');
INSERT INTO `help_topic` VALUES (524, 'SIGNAL', 40, 'Syntax:\nSIGNAL condition_value\n    [SET signal_information_item\n    [, signal_information_item] ...]\n\ncondition_value: {\n    SQLSTATE [VALUE] sqlstate_value\n  | condition_name\n}\n\nsignal_information_item:\n    condition_information_item_name = simple_value_specification\n\ncondition_information_item_name: {\n    CLASS_ORIGIN\n  | SUBCLASS_ORIGIN\n  | MESSAGE_TEXT\n  | MYSQL_ERRNO\n  | CONSTRAINT_CATALOG\n  | CONSTRAINT_SCHEMA\n  | CONSTRAINT_NAME\n  | CATALOG_NAME\n  | SCHEMA_NAME\n  | TABLE_NAME\n  | COLUMN_NAME\n  | CURSOR_NAME\n}\n\ncondition_name, simple_value_specification:\n    (see following discussion)\n\nSIGNAL is the way to \"return\" an error. SIGNAL provides error\ninformation to a handler, to an outer portion of the application, or to\nthe client. Also, it provides control over the error\'s characteristics\n(error number, SQLSTATE value, message). Without SIGNAL, it is\nnecessary to resort to workarounds such as deliberately referring to a\nnonexistent table to cause a routine to return an error.\n\nNo privileges are required to execute the SIGNAL statement.\n\nTo retrieve information from the diagnostics area, use the GET\nDIAGNOSTICS statement (see [HELP GET DIAGNOSTICS]). For information\nabout the diagnostics area, see\nhttps://dev.mysql.com/doc/refman/5.6/en/diagnostics-area.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/signal.html\n\n', 'CREATE PROCEDURE p (pval INT)\nBEGIN\n  DECLARE specialty CONDITION FOR SQLSTATE \'45000\';\n  IF pval = 0 THEN\n    SIGNAL SQLSTATE \'01000\';\n  ELSEIF pval = 1 THEN\n    SIGNAL SQLSTATE \'45000\'\n      SET MESSAGE_TEXT = \'An error occurred\';\n  ELSEIF pval = 2 THEN\n    SIGNAL specialty\n      SET MESSAGE_TEXT = \'An error occurred\';\n  ELSE\n    SIGNAL SQLSTATE \'01000\'\n      SET MESSAGE_TEXT = \'A warning occurred\', MYSQL_ERRNO = 1000;\n    SIGNAL SQLSTATE \'45000\'\n      SET MESSAGE_TEXT = \'An error occurred\', MYSQL_ERRNO = 1001;\n  END IF;\nEND;\n', 'https://dev.mysql.com/doc/refman/5.6/en/signal.html');
INSERT INTO `help_topic` VALUES (525, 'ALTER USER', 41, 'Syntax:\nALTER USER user_specification [, user_specification] ...\n\nuser_specification:\n    user PASSWORD EXPIRE\n\nThe ALTER USER statement modifies MySQL accounts. An error occurs if\nyou try to modify a nonexistent account.\n\nTo use ALTER USER, you must have the global CREATE USER privilege or\nthe UPDATE privilege for the mysql system database. When the read_only\nsystem variable is enabled, ALTER USER additionally requires the SUPER\nprivilege.\n\nEach account name uses the format described in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. The host\nname part of the account name, if omitted, defaults to \'%\'. It is also\npossible to specify CURRENT_USER or CURRENT_USER() to refer to the\naccount associated with the current session.\n\nFor each account, ALTER USER expires its password. For example:\n\nALTER USER \'jeffrey\'@\'localhost\' PASSWORD EXPIRE;\n\nPassword expiration for an account affects the corresponding row of the\nmysql.user system table: The server sets the password_expired column to\n\'Y\'.\n\nA client session operates in restricted mode if the account password\nhas been expired. In restricted mode, operations performed within the\nsession result in an error until the user establishes a new account\npassword:\n\nmysql> SELECT 1;\nERROR 1820 (HY000): You must SET PASSWORD before executing this statement\n\nmysql> SET PASSWORD = PASSWORD(\'new_password\');\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT 1;\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set (0.00 sec)\n\nThis restricted mode of operation permits SET statements, which is\nuseful if the account password has a hashing format that requires\nold_passwords to be set to a value different from its default before\nusing SET PASSWORD.\n\nIt is possible for an administrative user to reset the account\npassword, but any existing sessions for the account remain restricted.\nA client using the account must disconnect and reconnect before\nstatements can be executed successfully.\n\n*Note*:\n\nAlthough it is possible to \"reset\" an expired password by setting it to\nits current value, it is preferable, as a matter of good policy, to\nchoose a different password.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/alter-user.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/alter-user.html');
INSERT INTO `help_topic` VALUES (527, 'DROP USER', 41, 'Syntax:\nDROP USER user [, user] ...\n\nThe DROP USER statement removes one or more MySQL accounts and their\nprivileges. It removes privilege rows for the account from all grant\ntables. An error occurs for accounts that do not exist.\n\nTo use DROP USER, you must have the global CREATE USER privilege, or\nthe DELETE privilege for the mysql system database. When the read_only\nsystem variable is enabled, DROP USER additionally requires the SUPER\nprivilege.\n\nEach account name uses the format described in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. For\nexample:\n\nDROP USER \'jeffrey\'@\'localhost\';\n\nThe host name part of the account name, if omitted, defaults to \'%\'.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/drop-user.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/drop-user.html');
INSERT INTO `help_topic` VALUES (528, 'GRANT', 41, 'Syntax:\nGRANT\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    TO user [auth_option] [, user [auth_option]] ...\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH {GRANT OPTION | resource_option} ...]\n\nGRANT PROXY ON user\n    TO user [, user] ...\n    [WITH GRANT OPTION]\n\nobject_type: {\n    TABLE\n  | FUNCTION\n  | PROCEDURE\n}\n\npriv_level: {\n    *\n  | *.*\n  | db_name.*\n  | db_name.tbl_name\n  | tbl_name\n  | db_name.routine_name\n}\n\nuser:\n    (see https://dev.mysql.com/doc/refman/5.6/en/account-names.html)\n\nauth_option: {\n    IDENTIFIED BY [PASSWORD] \'auth_string\'\n  | IDENTIFIED WITH auth_plugin\n  | IDENTIFIED WITH auth_plugin AS \'auth_string\'\n}\n\ntls_option: {\n    SSL\n  | X509\n  | CIPHER \'cipher\'\n  | ISSUER \'issuer\'\n  | SUBJECT \'subject\'\n}\n\nresource_option: {\n  | MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n}\n\nThe GRANT statement grants privileges to MySQL user accounts. GRANT\nalso serves to specify other account characteristics such as use of\nsecure connections and limits on access to server resources.\n\nTo grant a privilege with GRANT, you must have the GRANT OPTION\nprivilege, and you must have the privileges that you are granting.\n(Alternatively, if you have the UPDATE privilege for the grant tables\nin the mysql system database, you can grant any account any privilege.)\nWhen the read_only system variable is enabled, GRANT additionally\nrequires the SUPER privilege.\n\nThe REVOKE statement is related to GRANT and enables administrators to\nremove account privileges. See [HELP REVOKE].\n\nEach account name uses the format described in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. For\nexample:\n\nGRANT ALL ON db1.* TO \'jeffrey\'@\'localhost\';\n\nThe host name part of the account, if omitted, defaults to \'%\'.\n\nNormally, a database administrator first uses CREATE USER to create an\naccount, then GRANT to define its privileges and characteristics. For\nexample:\n\nCREATE USER \'jeffrey\'@\'localhost\' IDENTIFIED BY \'password\';\nGRANT ALL ON db1.* TO \'jeffrey\'@\'localhost\';\nGRANT SELECT ON db2.invoice TO \'jeffrey\'@\'localhost\';\nGRANT USAGE ON *.* TO \'jeffrey\'@\'localhost\' WITH MAX_QUERIES_PER_HOUR 90;\n\n*Note*:\n\nExamples shown here include no IDENTIFIED clause. It is assumed that\nyou establish passwords with CREATE USER at account-creation time to\navoid creating insecure accounts.\n\nIf an account named in a GRANT statement does not already exist, GRANT\nmay create it under the conditions described later in the discussion of\nthe NO_AUTO_CREATE_USER SQL mode.\n\nFrom the mysql program, GRANT responds with Query OK, 0 rows affected\nwhen executed successfully. To determine what privileges result from\nthe operation, use SHOW GRANTS. See [HELP SHOW GRANTS].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/grant.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/grant.html');
INSERT INTO `help_topic` VALUES (529, 'RENAME USER', 41, 'Syntax:\nRENAME USER old_user TO new_user\n    [, old_user TO new_user] ...\n\nThe RENAME USER statement renames existing MySQL accounts. An error\noccurs for old accounts that do not exist or new accounts that already\nexist.\n\nTo use RENAME USER, you must have the global CREATE USER privilege, or\nthe UPDATE privilege for the mysql system database. When the read_only\nsystem variable is enabled, RENAME USER additionally requires the SUPER\nprivilege.\n\nEach account name uses the format described in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. For\nexample:\n\nRENAME USER \'jeffrey\'@\'localhost\' TO \'jeff\'@\'127.0.0.1\';\n\nThe host name part of the account name, if omitted, defaults to \'%\'.\n\nRENAME USER causes the privileges held by the old user to be those held\nby the new user. However, RENAME USER does not automatically drop or\ninvalidate databases or objects within them that the old user created.\nThis includes stored programs or views for which the DEFINER attribute\nnames the old user. Attempts to access such objects may produce an\nerror if they execute in definer security context. (For information\nabout security context, see\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-objects-security.html.)\n\nThe privilege changes take effect as indicated in\nhttps://dev.mysql.com/doc/refman/5.6/en/privilege-changes.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/rename-user.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/rename-user.html');
INSERT INTO `help_topic` VALUES (530, 'REVOKE', 41, 'Syntax:\nREVOKE\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    FROM user [, user] ...\n\nREVOKE ALL [PRIVILEGES], GRANT OPTION\n    FROM user [, user] ...\n\nREVOKE PROXY ON user\n    FROM user [, user] ...\n\nThe REVOKE statement enables system administrators to revoke privileges\nfrom MySQL accounts.\n\nFor details on the levels at which privileges exist, the permissible\npriv_type, priv_level, and object_type values, and the syntax for\nspecifying users and passwords, see [HELP GRANT].\n\nWhen the read_only system variable is enabled, REVOKE requires the\nSUPER privilege in addition to any other required privileges described\nin the following discussion.\n\nEach account name uses the format described in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. For\nexample:\n\nREVOKE INSERT ON *.* FROM \'jeffrey\'@\'localhost\';\n\nThe host name part of the account name, if omitted, defaults to \'%\'.\n\nTo use the first REVOKE syntax, you must have the GRANT OPTION\nprivilege, and you must have the privileges that you are revoking.\n\nTo revoke all privileges, use the second syntax, which drops all\nglobal, database, table, column, and routine privileges for the named\nuser or users:\n\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM user [, user] ...\n\nTo use this REVOKE syntax, you must have the global CREATE USER\nprivilege, or the UPDATE privilege for the mysql system database.\n\nUser accounts from which privileges are to be revoked must exist, but\nthe privileges to be revoked need not be currently granted to them.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/revoke.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/revoke.html');
INSERT INTO `help_topic` VALUES (531, 'SET PASSWORD', 41, 'Syntax:\nSET PASSWORD [FOR user] = password_option\n\npassword_option: {\n    PASSWORD(\'auth_string\')\n  | OLD_PASSWORD(\'auth_string\')\n  | \'hash_string\'\n}\n\nThe SET PASSWORD statement assigns a password to a MySQL user account,\nspecified as either a cleartext (unencrypted) or encrypted value:\n\no \'auth_string\' represents a cleartext password.\n\no \'hash_string\' represents an encrypted password.\n\n*Important*:\n\nUnder some circumstances, SET PASSWORD may be recorded in server logs\nor on the client side in a history file such as ~/.mysql_history, which\nmeans that cleartext passwords may be read by anyone having read access\nto that information. For information about the conditions under which\nthis occurs for the server logs and how to control it, see\nhttps://dev.mysql.com/doc/refman/5.6/en/password-logging.html. For\nsimilar information about client-side logging, see\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-logging.html.\n\nSET PASSWORD can be used with or without a FOR clause that explicitly\nnames a user account:\n\no With a FOR user clause, the statement sets the password for the named\n  account, which must exist:\n\nSET PASSWORD FOR \'jeffrey\'@\'localhost\' = password_option;\n\no With no FOR user clause, the statement sets the password for the\n  current user:\n\nSET PASSWORD = password_option;\n\n  Any client who connects to the server using a nonanonymous account\n  can change the password for that account. (In particular, you can\n  change your own password.) To see which account the server\n  authenticated you as, invoke the CURRENT_USER() function:\n\nSELECT CURRENT_USER();\n\nIf a FOR user clause is given, the account name uses the format\ndescribed in\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html. For\nexample:\n\nSET PASSWORD FOR \'bob\'@\'%.example.org\' = PASSWORD(\'auth_string\');\n\nThe host name part of the account name, if omitted, defaults to \'%\'.\n\nSetting the password for a named account (with a FOR clause) requires\nthe UPDATE privilege for the mysql system database. Setting the\npassword for yourself (for a nonanonymous account with no FOR clause)\nrequires no special privileges. When the read_only system variable is\nenabled, SET PASSWORD requires the SUPER privilege in addition to any\nother required privileges.\n\nThe password can be specified in these ways:\n\no Use the PASSWORD() function\n\n  The PASSWORD() argument is the cleartext (unencrypted) password.\n  PASSWORD() hashes the password and returns the encrypted password\n  string for storage in the account row in the mysql.user system table.\n\n  The PASSWORD() function hashes the password using the hashing method\n  determined by the value of the old_passwords system variable value.\n  If SET PASSWORD rejects the hashed password value returned by\n  PASSWORD() as not being in the correct format, it may be necessary to\n  change old_passwords to change the hashing method. For example, if\n  the account uses the mysql_native_password plugin, the old_passwords\n  value must be 0:\n\nSET old_passwords = 0;\nSET PASSWORD FOR \'jeffrey\'@\'localhost\' = PASSWORD(\'password\');\n\n  If the old_passwords value differs from that required by the\n  authentication plugin, the hashed password value returned by\n  PASSWORD() is not acceptable for that plugin, and attempts to set the\n  password produce an error. For example:\n\nmysql> SET old_passwords = 1;\nmysql> SET PASSWORD FOR \'jeffrey\'@\'localhost\' = PASSWORD(\'password\');\nERROR 1372 (HY000): Password hash should be a 41-digit hexadecimal number\n\n  Permitted old_passwords values are described later in this section.\n\no Use the OLD_PASSWORD() function:\n\n  The \'auth_string\' function argument is the cleartext (unencrypted)\n  password. OLD_PASSWORD() hashes the password using pre-4.1 hashing\n  and returns the encrypted password string for storage in the account\n  row in the mysql.user system table. This hashing method is\n  appropriate only for accounts that use the mysql_old_password\n  authentication plugin.\n\no Use an already encrypted password string\n\n  The password is specified as a string literal. It must represent the\n  already encrypted password value, in the hash format required by the\n  authentication method used for the account.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-password.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-password.html');
INSERT INTO `help_topic` VALUES (532, 'ANALYZE TABLE', 42, 'Syntax:\nANALYZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n\nANALYZE TABLE performs a key distribution analysis and stores the\ndistribution for the named table or tables. For MyISAM tables, this\nstatement is equivalent to using myisamchk --analyze.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nANALYZE TABLE works with InnoDB, NDB, and MyISAM tables. It does not\nwork with views.\n\nANALYZE TABLE is supported for partitioned tables, and you can use\nALTER TABLE ... ANALYZE PARTITION to analyze one or more partitions;\nfor more information, see [HELP ALTER TABLE], and\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-maintenance.html.\n\nDuring the analysis, the table is locked with a read lock for InnoDB\nand MyISAM.\n\nANALYZE TABLE removes the table from the table definition cache, which\nrequires a flush lock. If there are long running statements or\ntransactions still using the table, subsequent statements and\ntransactions must wait for those operations to finish before the flush\nlock is released. Because ANALYZE TABLE itself typically finishes\nquickly, it may not be apparent that delayed transactions or statements\ninvolving the same table are due to the remaining flush lock.\n\nBy default, the server writes ANALYZE TABLE statements to the binary\nlog so that they replicate to replicas. To suppress logging, specify\nthe optional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/analyze-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/analyze-table.html');
INSERT INTO `help_topic` VALUES (533, 'CHECK TABLE', 42, 'Syntax:\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\n\noption: {\n    FOR UPGRADE\n  | QUICK\n  | FAST\n  | MEDIUM\n  | EXTENDED\n  | CHANGED\n}\n\nCHECK TABLE checks a table or tables for errors. For MyISAM tables, the\nkey statistics are updated as well. CHECK TABLE can also check views\nfor problems, such as tables that are referenced in the view definition\nthat no longer exist.\n\nTo check a table, you must have some privilege for it.\n\nCHECK TABLE works for InnoDB, MyISAM, ARCHIVE, and CSV tables.\n\nBefore running CHECK TABLE on InnoDB tables, see\nhttps://dev.mysql.com/doc/refman/5.6/en/check-table.html#check-table-in\nnodb.\n\nCHECK TABLE is supported for partitioned tables, and you can use ALTER\nTABLE ... CHECK PARTITION to check one or more partitions; for more\ninformation, see [HELP ALTER TABLE], and\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-maintenance.html.\n\nIn MySQL 5.6.11 only, gtid_next must be set to AUTOMATIC before issuing\nthis statement. (Bug #16062608, Bug #16715809, Bug #69045)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/check-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/check-table.html');
INSERT INTO `help_topic` VALUES (534, 'CHECKSUM TABLE', 42, 'Syntax:\nCHECKSUM TABLE tbl_name [, tbl_name] ... [QUICK | EXTENDED]\n\nCHECKSUM TABLE reports a checksum for the contents of a table. You can\nuse this statement to verify that the contents are the same before and\nafter a backup, rollback, or other operation that is intended to put\nthe data back to a known state.\n\nThis statement requires the SELECT privilege for the table.\n\nThis statement is not supported for views. If you run CHECKSUM TABLE\nagainst a view, the Checksum value is always NULL, and a warning is\nreturned.\n\nFor a nonexistent table, CHECKSUM TABLE returns NULL and generates a\nwarning.\n\nDuring the checksum operation, the table is locked with a read lock for\nInnoDB and MyISAM.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/checksum-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/checksum-table.html');
INSERT INTO `help_topic` VALUES (535, 'OPTIMIZE TABLE', 42, 'Syntax:\nOPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n\nOPTIMIZE TABLE reorganizes the physical storage of table data and\nassociated index data, to reduce storage space and improve I/O\nefficiency when accessing the table. The exact changes made to each\ntable depend on the storage engine used by that table.\n\nUse OPTIMIZE TABLE in these cases, depending on the type of table:\n\no After doing substantial insert, update, or delete operations on an\n  InnoDB table that has its own .ibd file because it was created with\n  the innodb_file_per_table option enabled. The table and indexes are\n  reorganized, and disk space can be reclaimed for use by the operating\n  system.\n\no After doing substantial insert, update, or delete operations on\n  columns that are part of a FULLTEXT index in an InnoDB table. Set the\n  configuration option innodb_optimize_fulltext_only=1 first. To keep\n  the index maintenance period to a reasonable time, set the\n  innodb_ft_num_word_optimize option to specify how many words to\n  update in the search index, and run a sequence of OPTIMIZE TABLE\n  statements until the search index is fully updated.\n\no After deleting a large part of a MyISAM or ARCHIVE table, or making\n  many changes to a MyISAM or ARCHIVE table with variable-length rows\n  (tables that have VARCHAR, VARBINARY, BLOB, or TEXT columns). Deleted\n  rows are maintained in a linked list and subsequent INSERT operations\n  reuse old row positions. You can use OPTIMIZE TABLE to reclaim the\n  unused space and to defragment the data file. After extensive changes\n  to a table, this statement may also improve performance of statements\n  that use the table, sometimes significantly.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nOPTIMIZE TABLE works for InnoDB, MyISAM, and ARCHIVE tables. OPTIMIZE\nTABLE is also supported for dynamic columns of in-memory NDB tables. It\ndoes not work for fixed-width columns of in-memory tables, nor does it\nwork for Disk Data tables. The performance of OPTIMIZE on NDB Cluster\ntables can be tuned using --ndb-optimization-delay, which controls the\nlength of time to wait between processing batches of rows by OPTIMIZE\nTABLE. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-limitations-resol\nved.html.\n\nFor NDB Cluster tables, OPTIMIZE TABLE can be interrupted by (for\nexample) killing the SQL thread performing the OPTIMIZE operation.\n\nBy default, OPTIMIZE TABLE does not work for tables created using any\nother storage engine and returns a result indicating this lack of\nsupport. You can make OPTIMIZE TABLE work for other storage engines by\nstarting mysqld with the --skip-new option. In this case, OPTIMIZE\nTABLE is just mapped to ALTER TABLE.\n\nThis statement does not work with views.\n\nOPTIMIZE TABLE is supported for partitioned tables. For information\nabout using this statement with partitioned tables and table\npartitions, see\nhttps://dev.mysql.com/doc/refman/5.6/en/partitioning-maintenance.html.\n\nBy default, the server writes OPTIMIZE TABLE statements to the binary\nlog so that they replicate to replicas. To suppress logging, specify\nthe optional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.\n\nIn MySQL 5.6.11 only, gtid_next must be set to AUTOMATIC before issuing\nthis statement. (Bug #16062608, Bug #16715809, Bug #69045)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/optimize-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/optimize-table.html');
INSERT INTO `help_topic` VALUES (536, 'REPAIR TABLE', 42, 'Syntax:\nREPAIR [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n    [QUICK] [EXTENDED] [USE_FRM]\n\nREPAIR TABLE repairs a possibly corrupted table, for certain storage\nengines only.\n\nThis statement requires SELECT and INSERT privileges for the table.\n\nAlthough normally you should never have to run REPAIR TABLE, if\ndisaster strikes, this statement is very likely to get back all your\ndata from a MyISAM table. If your tables become corrupted often, try to\nfind the reason for it, to eliminate the need to use REPAIR TABLE. See\nhttps://dev.mysql.com/doc/refman/5.6/en/crashing.html, and\nhttps://dev.mysql.com/doc/refman/5.6/en/myisam-table-problems.html.\n\nREPAIR TABLE checks the table to see whether an upgrade is required. If\nso, it performs the upgrade, following the same rules as CHECK TABLE\n... FOR UPGRADE. See [HELP CHECK TABLE], for more information.\n\n*Important*:\n\no Make a backup of a table before performing a table repair operation;\n  under some circumstances the operation might cause data loss.\n  Possible causes include but are not limited to file system errors.\n  See https://dev.mysql.com/doc/refman/5.6/en/backup-and-recovery.html.\n\no If the server exits during a REPAIR TABLE operation, it is essential\n  after restarting it that you immediately execute another REPAIR TABLE\n  statement for the table before performing any other operations on it.\n  In the worst case, you might have a new clean index file without\n  information about the data file, and then the next operation you\n  perform could overwrite the data file. This is an unlikely but\n  possible scenario that underscores the value of making a backup\n  first.\n\no In the event that a table on the source becomes corrupted and you run\n  REPAIR TABLE on it, any resulting changes to the original table are\n  not propagated to replicas.\n\no In MySQL 5.6.11 only, gtid_next must be set to AUTOMATIC before\n  issuing this statement. (Bug #16062608, Bug #16715809, Bug #69045)\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/repair-table.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/repair-table.html');
INSERT INTO `help_topic` VALUES (537, 'CREATE FUNCTION UDF', 43, 'Syntax:\nCREATE [AGGREGATE] FUNCTION function_name\n    RETURNS {STRING|INTEGER|REAL|DECIMAL}\n    SONAME shared_library_name\n\nThis statement loads the user-defined function (UDF) named\nfunction_name. (CREATE FUNCTION is also used to created stored\nfunctions; see [HELP CREATE PROCEDURE].)\n\nA user-defined function is a way to extend MySQL with a new function\nthat works like a native (built-in) MySQL function such as ABS() or\nCONCAT(). See Adding a User-Defined Function\n(https://dev.mysql.com/doc/extending-mysql/5.6/en/adding-udf.html).\n\nfunction_name is the name that should be used in SQL statements to\ninvoke the function. The RETURNS clause indicates the type of the\nfunction\'s return value. DECIMAL is a legal value after RETURNS, but\ncurrently DECIMAL functions return string values and should be written\nlike STRING functions.\n\nThe AGGREGATE keyword, if given, signifies that the UDF is an aggregate\n(group) function. An aggregate UDF works exactly like a native MySQL\naggregate function such as SUM() or COUNT().\n\nshared_library_name is the base name of the shared library file\ncontaining the code that implements the function. The file must be\nlocated in the plugin directory. This directory is given by the value\nof the plugin_dir system variable. For more information, see\nhttps://dev.mysql.com/doc/refman/5.6/en/udf-loading.html.\n\nCREATE FUNCTION requires the INSERT privilege for the mysql system\ndatabase because it adds a row to the mysql.func system table to\nregister the function.\n\nDuring the normal startup sequence, the server loads UDFs registered in\nthe mysql.func table. If the server is started with the\n--skip-grant-tables option, UDFs registered in the table are not loaded\nand are unavailable.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/create-function-udf.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/create-function-udf.html');
INSERT INTO `help_topic` VALUES (539, 'INSTALL PLUGIN', 44, 'Syntax:\nINSTALL PLUGIN plugin_name SONAME \'shared_library_name\'\n\nThis statement installs a server plugin. It requires the INSERT\nprivilege for the mysql.plugin system table because it adds a row to\nthat table to register the plugin.\n\nplugin_name is the name of the plugin as defined in the plugin\ndescriptor structure contained in the library file (see Plugin Data\nStructures\n(https://dev.mysql.com/doc/extending-mysql/5.6/en/plugin-data-structure\ns.html)). Plugin names are not case-sensitive. For maximal\ncompatibility, plugin names should be limited to ASCII letters, digits,\nand underscore because they are used in C source files, shell command\nlines, M4 and Bourne shell scripts, and SQL environments.\n\nshared_library_name is the name of the shared library that contains the\nplugin code. The name includes the file name extension (for example,\nlibmyplugin.so, libmyplugin.dll, or libmyplugin.dylib).\n\nThe shared library must be located in the plugin directory (the\ndirectory named by the plugin_dir system variable). The library must be\nin the plugin directory itself, not in a subdirectory. By default,\nplugin_dir is the plugin directory under the directory named by the\npkglibdir configuration variable, but it can be changed by setting the\nvalue of plugin_dir at server startup. For example, set its value in a\nmy.cnf file:\n\n[mysqld]\nplugin_dir=/path/to/plugin/directory\n\nIf the value of plugin_dir is a relative path name, it is taken to be\nrelative to the MySQL base directory (the value of the basedir system\nvariable).\n\nINSTALL PLUGIN loads and initializes the plugin code to make the plugin\navailable for use. A plugin is initialized by executing its\ninitialization function, which handles any setup that the plugin must\nperform before it can be used. When the server shuts down, it executes\nthe deinitialization function for each plugin that is loaded so that\nthe plugin has a chance to perform any final cleanup.\n\nINSTALL PLUGIN also registers the plugin by adding a line that\nindicates the plugin name and library file name to the mysql.plugin\nsystem table. During the normal startup sequence, the server loads and\ninitializes plugins registered in mysql.plugin. This means that a\nplugin is installed with INSTALL PLUGIN only once, not every time the\nserver starts. If the server is started with the --skip-grant-tables\noption, plugins registered in the mysql.plugin table are not loaded and\nare unavailable.\n\nA plugin library can contain multiple plugins. For each of them to be\ninstalled, use a separate INSTALL PLUGIN statement. Each statement\nnames a different plugin, but all of them specify the same library\nname.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/install-plugin.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/install-plugin.html');
INSERT INTO `help_topic` VALUES (541, 'SET', 3, 'Syntax:\nSET variable = expr [, variable = expr] ...\n\nvariable: {\n    user_var_name\n  | param_name\n  | local_var_name\n  | {GLOBAL | @@GLOBAL.} system_var_name\n  | [SESSION | @@SESSION. | @@] system_var_name\n}\n\nSET ONE_SHOT system_var_name = expr\n\nSET syntax for variable assignment enables you to assign values to\ndifferent types of variables that affect the operation of the server or\nclients:\n\no User-defined variables. See\n  https://dev.mysql.com/doc/refman/5.6/en/user-variables.html.\n\no Stored procedure and function parameters, and stored program local\n  variables. See\n  https://dev.mysql.com/doc/refman/5.6/en/stored-program-variables.html\n  .\n\no System variables. See\n  https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n  System variables also can be set at server startup, as described in\n  https://dev.mysql.com/doc/refman/5.6/en/using-system-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-variable.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-variable.html');
INSERT INTO `help_topic` VALUES (542, 'SET CHARACTER SET', 3, 'Syntax:\nSET {CHARACTER SET | CHARSET}\n    {\'charset_name\' | DEFAULT}\n\nThis statement maps all strings sent between the server and the current\nclient with the given mapping. SET CHARACTER SET sets three session\nsystem variables: character_set_client and character_set_results are\nset to the given character set, and character_set_connection to the\nvalue of character_set_database. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html.\n\ncharset_name may be quoted or unquoted.\n\nThe default character set mapping can be restored by using the value\nDEFAULT. The default depends on the server configuration.\n\nSome character sets cannot be used as the client character set.\nAttempting to use them with SET CHARACTER SET produces an error. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html#charset\n-connection-impermissible-client-charset.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-character-set.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-character-set.html');
INSERT INTO `help_topic` VALUES (543, 'SET CHARSET', 3, 'Syntax:\nSET {CHARACTER SET | CHARSET}\n    {\'charset_name\' | DEFAULT}\n\nThis statement maps all strings sent between the server and the current\nclient with the given mapping. SET CHARACTER SET sets three session\nsystem variables: character_set_client and character_set_results are\nset to the given character set, and character_set_connection to the\nvalue of character_set_database. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html.\n\ncharset_name may be quoted or unquoted.\n\nThe default character set mapping can be restored by using the value\nDEFAULT. The default depends on the server configuration.\n\nSome character sets cannot be used as the client character set.\nAttempting to use them with SET CHARACTER SET produces an error. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html#charset\n-connection-impermissible-client-charset.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-character-set.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-character-set.html');
INSERT INTO `help_topic` VALUES (544, 'SET NAMES', 3, 'Syntax:\nSET NAMES {\'charset_name\'\n    [COLLATE \'collation_name\'] | DEFAULT}\n\nThis statement sets the three session system variables\ncharacter_set_client, character_set_connection, and\ncharacter_set_results to the given character set. Setting\ncharacter_set_connection to charset_name also sets collation_connection\nto the default collation for charset_name. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html.\n\nThe optional COLLATE clause may be used to specify a collation\nexplicitly. If given, the collation must one of the permitted\ncollations for charset_name.\n\ncharset_name and collation_name may be quoted or unquoted.\n\nThe default mapping can be restored by using a value of DEFAULT. The\ndefault depends on the server configuration.\n\nSome character sets cannot be used as the client character set.\nAttempting to use them with SET NAMES produces an error. See\nhttps://dev.mysql.com/doc/refman/5.6/en/charset-connection.html#charset\n-connection-impermissible-client-charset.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/set-names.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/set-names.html');
INSERT INTO `help_topic` VALUES (545, 'SHOW', 3, 'SHOW has many forms that provide information about databases, tables,\ncolumns, or status information about the server. This section describes\nthose following:\n\nSHOW AUTHORS\nSHOW {BINARY | MASTER} LOGS\nSHOW BINLOG EVENTS [IN \'log_name\'] [FROM pos] [LIMIT [offset,] row_count]\nSHOW CHARACTER SET [like_or_where]\nSHOW COLLATION [like_or_where]\nSHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [like_or_where]\nSHOW CONTRIBUTORS\nSHOW CREATE DATABASE db_name\nSHOW CREATE EVENT event_name\nSHOW CREATE FUNCTION func_name\nSHOW CREATE PROCEDURE proc_name\nSHOW CREATE TABLE tbl_name\nSHOW CREATE TRIGGER trigger_name\nSHOW CREATE VIEW view_name\nSHOW DATABASES [like_or_where]\nSHOW ENGINE engine_name {STATUS | MUTEX}\nSHOW [STORAGE] ENGINES\nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW EVENTS\nSHOW FUNCTION CODE func_name\nSHOW FUNCTION STATUS [like_or_where]\nSHOW GRANTS FOR user\nSHOW INDEX FROM tbl_name [FROM db_name]\nSHOW MASTER STATUS\nSHOW OPEN TABLES [FROM db_name] [like_or_where]\nSHOW PLUGINS\nSHOW PROCEDURE CODE proc_name\nSHOW PROCEDURE STATUS [like_or_where]\nSHOW PRIVILEGES\nSHOW [FULL] PROCESSLIST\nSHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]\nSHOW PROFILES\nSHOW RELAYLOG EVENTS [IN \'log_name\'] [FROM pos] [LIMIT [offset,] row_count]\nSHOW SLAVE HOSTS\nSHOW SLAVE STATUS\nSHOW [GLOBAL | SESSION] STATUS [like_or_where]\nSHOW TABLE STATUS [FROM db_name] [like_or_where]\nSHOW [FULL] TABLES [FROM db_name] [like_or_where]\nSHOW TRIGGERS [FROM db_name] [like_or_where]\nSHOW [GLOBAL | SESSION] VARIABLES [like_or_where]\nSHOW WARNINGS [LIMIT [offset,] row_count]\n\nlike_or_where: {\n    LIKE \'pattern\'\n  | WHERE expr\n}\n\nIf the syntax for a given SHOW statement includes a LIKE \'pattern\'\npart, \'pattern\' is a string that can contain the SQL % and _ wildcard\ncharacters. The pattern is useful for restricting statement output to\nmatching values.\n\nSeveral SHOW statements also accept a WHERE clause that provides more\nflexibility in specifying which rows to display. See\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show.html');
INSERT INTO `help_topic` VALUES (550, 'SHOW CHARACTER SET', 3, 'Syntax:\nSHOW CHARACTER SET\n    [LIKE \'pattern\' | WHERE expr]\n\nThe SHOW CHARACTER SET statement shows all available character sets.\nThe LIKE clause, if present, indicates which character set names to\nmatch. The WHERE clause can be given to select rows using more general\nconditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html. For\nexample:\n\nmysql> SHOW CHARACTER SET LIKE \'latin%\';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description                 | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |\n| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |\n| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |\n| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |\n+---------+-----------------------------+-------------------+--------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-character-set.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-character-set.html');
INSERT INTO `help_topic` VALUES (551, 'SHOW COLLATION', 3, 'Syntax:\nSHOW COLLATION\n    [LIKE \'pattern\' | WHERE expr]\n\nThis statement lists collations supported by the server. By default,\nthe output from SHOW COLLATION includes all available collations. The\nLIKE clause, if present, indicates which collation names to match. The\nWHERE clause can be given to select rows using more general conditions,\nas discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html. For\nexample:\n\nmysql> SHOW COLLATION WHERE Charset = \'latin1\';\n+-------------------+---------+----+---------+----------+---------+\n| Collation         | Charset | Id | Default | Compiled | Sortlen |\n+-------------------+---------+----+---------+----------+---------+\n| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |\n| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |\n| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |\n| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |\n| latin1_bin        | latin1  | 47 |         | Yes      |       1 |\n| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |\n| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |\n| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |\n+-------------------+---------+----+---------+----------+---------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-collation.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-collation.html');
INSERT INTO `help_topic` VALUES (555, 'SHOW CREATE DATABASE', 3, 'Syntax:\nSHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n\nShows the CREATE DATABASE statement that creates the named database. If\nthe SHOW statement includes an IF NOT EXISTS clause, the output too\nincludes such a clause. SHOW CREATE SCHEMA is a synonym for SHOW CREATE\nDATABASE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-database.html\n\n', 'mysql> SHOW CREATE DATABASE test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test`\n                 /*!40100 DEFAULT CHARACTER SET latin1 */\n\nmysql> SHOW CREATE SCHEMA test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test`\n                 /*!40100 DEFAULT CHARACTER SET latin1 */\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-database.html');
INSERT INTO `help_topic` VALUES (556, 'SHOW CREATE SCHEMA', 3, 'Syntax:\nSHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n\nShows the CREATE DATABASE statement that creates the named database. If\nthe SHOW statement includes an IF NOT EXISTS clause, the output too\nincludes such a clause. SHOW CREATE SCHEMA is a synonym for SHOW CREATE\nDATABASE.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-database.html\n\n', 'mysql> SHOW CREATE DATABASE test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test`\n                 /*!40100 DEFAULT CHARACTER SET latin1 */\n\nmysql> SHOW CREATE SCHEMA test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test`\n                 /*!40100 DEFAULT CHARACTER SET latin1 */\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-database.html');
INSERT INTO `help_topic` VALUES (557, 'SHOW CREATE EVENT', 3, 'Syntax:\nSHOW CREATE EVENT event_name\n\nThis statement displays the CREATE EVENT statement needed to re-create\na given event. It requires the EVENT privilege for the database from\nwhich the event is to be shown. For example (using the same event\ne_daily defined and then altered in [HELP SHOW EVENTS]):\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-event.html\n\n', 'mysql> SHOW CREATE EVENT myschema.e_daily\\G\n*************************** 1. row ***************************\n               Event: e_daily\n            sql_mode: NO_ENGINE_SUBSTITUTION\n           time_zone: SYSTEM\n        Create Event: CREATE DEFINER=`jon`@`ghidora` EVENT `e_daily`\n                        ON SCHEDULE EVERY 1 DAY\n                        STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n                        ON COMPLETION NOT PRESERVE\n                        ENABLE\n                        COMMENT \'Saves total number of sessions then\n                                clears the table each day\'\n                        DO BEGIN\n                          INSERT INTO site_activity.totals (time, total)\n                            SELECT CURRENT_TIMESTAMP, COUNT(*)\n                              FROM site_activity.sessions;\n                          DELETE FROM site_activity.sessions;\n                        END\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-event.html');
INSERT INTO `help_topic` VALUES (552, 'SHOW COLUMNS', 3, 'Syntax:\nSHOW [FULL] {COLUMNS | FIELDS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW COLUMNS displays information about the columns in a given table.\nIt also works for views. SHOW COLUMNS displays information only for\nthose columns for which you have some privilege.\n\nmysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+\n\nAn alternative to tbl_name FROM db_name syntax is db_name.tbl_name.\nThese two statements are equivalent:\n\nSHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n\nThe optional FULL keyword causes the output to include the column\ncollation and comments, as well as the privileges you have for each\ncolumn.\n\nThe LIKE clause, if present, indicates which column names to match. The\nWHERE clause can be given to select rows using more general conditions,\nas discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nThe data types may differ from what you expect them to be based on a\nCREATE TABLE statement because MySQL sometimes changes data types when\nyou create or alter a table. The conditions under which this occurs are\ndescribed in\nhttps://dev.mysql.com/doc/refman/5.6/en/silent-column-changes.html.\n\nSHOW COLUMNS displays the following values for each table column:\n\no Field\n\n  The column name.\n\no Type\n\n  The column data type.\n\no Collation\n\n  The collation for nonbinary string columns, or NULL for other\n  columns. This value is displayed only if you use the FULL keyword.\n\no Null\n\n  The column nullability. The value is YES if NULL values can be stored\n  in the column, NO if not.\n\no Key\n\n  Whether the column is indexed:\n\n  o If Key is empty, the column either is not indexed or is indexed\n    only as a secondary column in a multiple-column, nonunique index.\n\n  o If Key is PRI, the column is a PRIMARY KEY or is one of the columns\n    in a multiple-column PRIMARY KEY.\n\n  o If Key is UNI, the column is the first column of a UNIQUE index. (A\n    UNIQUE index permits multiple NULL values, but you can tell whether\n    the column permits NULL by checking the Null field.)\n\n  o If Key is MUL, the column is the first column of a nonunique index\n    in which multiple occurrences of a given value are permitted within\n    the column.\n\n  If more than one of the Key values applies to a given column of a\n  table, Key displays the one with the highest priority, in the order\n  PRI, UNI, MUL.\n\n  A UNIQUE index may be displayed as PRI if it cannot contain NULL\n  values and there is no PRIMARY KEY in the table. A UNIQUE index may\n  display as MUL if several columns form a composite UNIQUE index;\n  although the combination of the columns is unique, each column can\n  still hold multiple occurrences of a given value.\n\no Default\n\n  The default value for the column. This is NULL if the column has an\n  explicit default of NULL, or if the column definition includes no\n  DEFAULT clause.\n\no Extra\n\n  Any additional information that is available about a given column.\n  The value is nonempty in these cases: auto_increment for columns that\n  have the AUTO_INCREMENT attribute; on update CURRENT_TIMESTAMP for\n  TIMESTAMP or DATETIME columns that have the ON UPDATE\n  CURRENT_TIMESTAMP attribute.\n\no Privileges\n\n  The privileges you have for the column. This value is displayed only\n  if you use the FULL keyword.\n\no Comment\n\n  Any comment included in the column definition. This value is\n  displayed only if you use the FULL keyword.\n\nTable column information is also available from the INFORMATION_SCHEMA\nCOLUMNS table. See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-columns-tabl\ne.html.\n\nYou can list a table\'s columns with the mysqlshow db_name tbl_name\ncommand.\n\nThe DESCRIBE statement provides information similar to SHOW COLUMNS.\nSee https://dev.mysql.com/doc/refman/5.6/en/describe.html.\n\nThe SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements\nalso provide information about tables. See [HELP SHOW].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-columns.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-columns.html');
INSERT INTO `help_topic` VALUES (559, 'SHOW CREATE PROCEDURE', 3, 'Syntax:\nSHOW CREATE PROCEDURE proc_name\n\nThis statement is a MySQL extension. It returns the exact string that\ncan be used to re-create the named stored procedure. A similar\nstatement, SHOW CREATE FUNCTION, displays information about stored\nfunctions (see [HELP SHOW CREATE FUNCTION]).\n\nTo use either statement, you must be the user named in the routine\nDEFINER clause or have SELECT access to the mysql.proc table. If you do\nnot have privileges for the routine itself, the value displayed for the\nCreate Procedure or Create Function column is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-procedure.html\n\n', 'mysql> SHOW CREATE PROCEDURE test.citycount\\G\n*************************** 1. row ***************************\n           Procedure: citycount\n            sql_mode: STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION\n    Create Procedure: CREATE DEFINER=`me`@`localhost`\n                      PROCEDURE `citycount`(IN country CHAR(3), OUT cities INT)\n                      BEGIN\n                        SELECT COUNT(*) INTO cities FROM world.city\n                        WHERE CountryCode = country;\n                      END\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n\nmysql> SHOW CREATE FUNCTION test.hello\\G\n*************************** 1. row ***************************\n            Function: hello\n            sql_mode: STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION\n     Create Function: CREATE DEFINER=`me`@`localhost`\n                      FUNCTION `hello`(s CHAR(20))\n                      RETURNS char(50) CHARSET latin1\n                      DETERMINISTIC\n                      RETURN CONCAT(\'Hello, \',s,\'!\')\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-procedure.html');
INSERT INTO `help_topic` VALUES (553, 'SHOW FIELDS', 3, 'Syntax:\nSHOW [FULL] {COLUMNS | FIELDS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW COLUMNS displays information about the columns in a given table.\nIt also works for views. SHOW COLUMNS displays information only for\nthose columns for which you have some privilege.\n\nmysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+\n\nAn alternative to tbl_name FROM db_name syntax is db_name.tbl_name.\nThese two statements are equivalent:\n\nSHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n\nThe optional FULL keyword causes the output to include the column\ncollation and comments, as well as the privileges you have for each\ncolumn.\n\nThe LIKE clause, if present, indicates which column names to match. The\nWHERE clause can be given to select rows using more general conditions,\nas discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nThe data types may differ from what you expect them to be based on a\nCREATE TABLE statement because MySQL sometimes changes data types when\nyou create or alter a table. The conditions under which this occurs are\ndescribed in\nhttps://dev.mysql.com/doc/refman/5.6/en/silent-column-changes.html.\n\nSHOW COLUMNS displays the following values for each table column:\n\no Field\n\n  The column name.\n\no Type\n\n  The column data type.\n\no Collation\n\n  The collation for nonbinary string columns, or NULL for other\n  columns. This value is displayed only if you use the FULL keyword.\n\no Null\n\n  The column nullability. The value is YES if NULL values can be stored\n  in the column, NO if not.\n\no Key\n\n  Whether the column is indexed:\n\n  o If Key is empty, the column either is not indexed or is indexed\n    only as a secondary column in a multiple-column, nonunique index.\n\n  o If Key is PRI, the column is a PRIMARY KEY or is one of the columns\n    in a multiple-column PRIMARY KEY.\n\n  o If Key is UNI, the column is the first column of a UNIQUE index. (A\n    UNIQUE index permits multiple NULL values, but you can tell whether\n    the column permits NULL by checking the Null field.)\n\n  o If Key is MUL, the column is the first column of a nonunique index\n    in which multiple occurrences of a given value are permitted within\n    the column.\n\n  If more than one of the Key values applies to a given column of a\n  table, Key displays the one with the highest priority, in the order\n  PRI, UNI, MUL.\n\n  A UNIQUE index may be displayed as PRI if it cannot contain NULL\n  values and there is no PRIMARY KEY in the table. A UNIQUE index may\n  display as MUL if several columns form a composite UNIQUE index;\n  although the combination of the columns is unique, each column can\n  still hold multiple occurrences of a given value.\n\no Default\n\n  The default value for the column. This is NULL if the column has an\n  explicit default of NULL, or if the column definition includes no\n  DEFAULT clause.\n\no Extra\n\n  Any additional information that is available about a given column.\n  The value is nonempty in these cases: auto_increment for columns that\n  have the AUTO_INCREMENT attribute; on update CURRENT_TIMESTAMP for\n  TIMESTAMP or DATETIME columns that have the ON UPDATE\n  CURRENT_TIMESTAMP attribute.\n\no Privileges\n\n  The privileges you have for the column. This value is displayed only\n  if you use the FULL keyword.\n\no Comment\n\n  Any comment included in the column definition. This value is\n  displayed only if you use the FULL keyword.\n\nTable column information is also available from the INFORMATION_SCHEMA\nCOLUMNS table. See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-columns-tabl\ne.html.\n\nYou can list a table\'s columns with the mysqlshow db_name tbl_name\ncommand.\n\nThe DESCRIBE statement provides information similar to SHOW COLUMNS.\nSee https://dev.mysql.com/doc/refman/5.6/en/describe.html.\n\nThe SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX statements\nalso provide information about tables. See [HELP SHOW].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-columns.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-columns.html');
INSERT INTO `help_topic` VALUES (560, 'SHOW CREATE TABLE', 3, 'Syntax:\nSHOW CREATE TABLE tbl_name\n\nShows the CREATE TABLE statement that creates the named table. To use\nthis statement, you must have some privilege for the table. This\nstatement also works with views.\n\nSHOW CREATE TABLE quotes table and column names according to the value\nof the sql_quote_show_create option. See\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nWhen altering the storage engine of a table, table options that are not\napplicable to the new storage engine are retained in the table\ndefinition to enable reverting the table with its previously defined\noptions to the original storage engine, if necessary. For example, when\nchanging the storage engine from InnoDB to MyISAM, InnoDB-specific\noptions such as ROW_FORMAT=COMPACT are retained.\n\nWhen creating a table with strict mode disabled, the storage engine\'s\ndefault row format is used if the specified row format is not\nsupported. The actual row format of the table is reported in the\nRow_format column in response to SHOW TABLE STATUS. SHOW CREATE TABLE\nshows the row format that was specified in the CREATE TABLE statement.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-create-table.html\n\n', 'mysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `s` char(60) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) ROW_FORMAT=COMPACT ENGINE=InnoDB;\nmysql> ALTER TABLE t1 ENGINE=MyISAM;\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) NOT NULL,\n  PRIMARY KEY (`c1`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-create-table.html');
INSERT INTO `help_topic` VALUES (563, 'SHOW DATABASES', 3, 'Syntax:\nSHOW {DATABASES | SCHEMAS}\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW DATABASES lists the databases on the MySQL server host. SHOW\nSCHEMAS is a synonym for SHOW DATABASES. The LIKE clause, if present,\nindicates which database names to match. The WHERE clause can be given\nto select rows using more general conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nYou see only those databases for which you have some kind of privilege,\nunless you have the global SHOW DATABASES privilege. You can also get\nthis list using the mysqlshow command.\n\nIf the server was started with the --skip-show-database option, you\ncannot use this statement at all unless you have the SHOW DATABASES\nprivilege.\n\nMySQL implements databases as directories in the data directory, so\nthis statement simply lists directories in that location. However, the\noutput may include names of directories that do not correspond to\nactual databases.\n\nDatabase information is also available from the INFORMATION_SCHEMA\nSCHEMATA table. See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-schemata-tab\nle.html.\n\n*Caution*:\n\nBecause a global privilege is considered a privilege for all databases,\nany global privilege enables a user to see all database names with SHOW\nDATABASES or by examining the INFORMATION_SCHEMA SCHEMATA table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-databases.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-databases.html');
INSERT INTO `help_topic` VALUES (564, 'SHOW SCHEMAS', 3, 'Syntax:\nSHOW {DATABASES | SCHEMAS}\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW DATABASES lists the databases on the MySQL server host. SHOW\nSCHEMAS is a synonym for SHOW DATABASES. The LIKE clause, if present,\nindicates which database names to match. The WHERE clause can be given\nto select rows using more general conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nYou see only those databases for which you have some kind of privilege,\nunless you have the global SHOW DATABASES privilege. You can also get\nthis list using the mysqlshow command.\n\nIf the server was started with the --skip-show-database option, you\ncannot use this statement at all unless you have the SHOW DATABASES\nprivilege.\n\nMySQL implements databases as directories in the data directory, so\nthis statement simply lists directories in that location. However, the\noutput may include names of directories that do not correspond to\nactual databases.\n\nDatabase information is also available from the INFORMATION_SCHEMA\nSCHEMATA table. See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-schemata-tab\nle.html.\n\n*Caution*:\n\nBecause a global privilege is considered a privilege for all databases,\nany global privilege enables a user to see all database names with SHOW\nDATABASES or by examining the INFORMATION_SCHEMA SCHEMATA table.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-databases.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-databases.html');
INSERT INTO `help_topic` VALUES (567, 'SHOW ERRORS', 3, 'Syntax:\nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW COUNT(*) ERRORS\n\nSHOW ERRORS is a diagnostic statement that is similar to SHOW WARNINGS,\nexcept that it displays information only for errors, rather than for\nerrors, warnings, and notes.\n\nThe LIMIT clause has the same syntax as for the SELECT statement. See\nhttps://dev.mysql.com/doc/refman/5.6/en/select.html.\n\nThe SHOW COUNT(*) ERRORS statement displays the number of errors. You\ncan also retrieve this number from the error_count variable:\n\nSHOW COUNT(*) ERRORS;\nSELECT @@error_count;\n\nSHOW ERRORS and error_count apply only to errors, not warnings or\nnotes. In other respects, they are similar to SHOW WARNINGS and\nwarning_count. In particular, SHOW ERRORS cannot display information\nfor more than max_error_count messages, and error_count can exceed the\nvalue of max_error_count if the number of errors exceeds\nmax_error_count.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-errors.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-errors.html');
INSERT INTO `help_topic` VALUES (568, 'SHOW EVENTS', 3, 'Syntax:\nSHOW EVENTS\n    [{FROM | IN} schema_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nThis statement displays information about Event Manager events, which\nare discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/event-scheduler.html. It\nrequires the EVENT privilege for the database from which the events are\nto be shown.\n\nIn its simplest form, SHOW EVENTS lists all of the events in the\ncurrent schema:\n\nmysql> SELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora    | myschema |\n+----------------+----------+\n1 row in set (0.00 sec)\n\nmysql> SHOW EVENTS\\G\n*************************** 1. row ***************************\n                  Db: myschema\n                Name: e_daily\n             Definer: jon@ghidora\n           Time zone: SYSTEM\n                Type: RECURRING\n          Execute at: NULL\n      Interval value: 1\n      Interval field: DAY\n              Starts: 2018-08-08 11:06:34\n                Ends: NULL\n              Status: ENABLED\n          Originator: 1\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n\nTo see events for a specific schema, use the FROM clause. For example,\nto see events for the test schema, use the following statement:\n\nSHOW EVENTS FROM test;\n\nThe LIKE clause, if present, indicates which event names to match. The\nWHERE clause can be given to select rows using more general conditions,\nas discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-events.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-events.html');
INSERT INTO `help_topic` VALUES (571, 'SHOW GRANTS', 3, 'Syntax:\nSHOW GRANTS [FOR user]\n\nThis statement displays the privileges that are assigned to a MySQL\nuser account, in the form of GRANT statements that must be executed to\nduplicate the privilege assignments.\n\nSHOW GRANTS requires the SELECT privilege for the mysql system\ndatabase, except to display privileges for the current user. For output\nthat includes an IDENTIFIED BY PASSWORD clause displaying an account\npassword hash value, the SUPER privilege is required to see the actual\nhash value. Otherwise, the value displays as <secret>.\n\nTo name the account for SHOW GRANTS, use the same format as for the\nGRANT statement (for example, \'jeffrey\'@\'localhost\'):\n\nmysql> SHOW GRANTS FOR \'jeffrey\'@\'localhost\';\n+------------------------------------------------------------------+\n| Grants for jeffrey@localhost                                     |\n+------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `jeffrey`@`localhost`                      |\n| GRANT SELECT, INSERT, UPDATE ON `db1`.* TO `jeffrey`@`localhost` |\n+------------------------------------------------------------------+\n\nThe host part, if omitted, defaults to \'%\'. For additional information\nabout specifying account names, see\nhttps://dev.mysql.com/doc/refman/5.6/en/account-names.html.\n\nTo display the privileges granted to the current user (the account you\nare using to connect to the server), you can use any of the following\nstatements:\n\nSHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\nSHOW GRANTS FOR CURRENT_USER();\n\nIf SHOW GRANTS FOR CURRENT_USER (or any equivalent syntax) is used in\ndefiner context, such as within a stored procedure that executes with\ndefiner rather than invoker privileges, the grants displayed are those\nof the definer and not the invoker.\n\nSHOW GRANTS does not display privileges that are available to the named\naccount but are granted to a different account. For example, if an\nanonymous account exists, the named account might be able to use its\nprivileges, but SHOW GRANTS does not display them.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-grants.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-grants.html');
INSERT INTO `help_topic` VALUES (572, 'SHOW INDEX', 3, 'Syntax:\nSHOW {INDEX | INDEXES | KEYS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [WHERE expr]\n\nSHOW INDEX returns table index information. The format resembles that\nof the SQLStatistics call in ODBC. This statement requires some\nprivilege for any column in the table.\n\nmysql> SHOW INDEX FROM City\\G\n*************************** 1. row ***************************\n        Table: city\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: ID\n    Collation: A\n  Cardinality: 4188\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n*************************** 2. row ***************************\n        Table: city\n   Non_unique: 1\n     Key_name: CountryCode\n Seq_in_index: 1\n  Column_name: CountryCode\n    Collation: A\n  Cardinality: 4188\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n\nAn alternative to tbl_name FROM db_name syntax is db_name.tbl_name.\nThese two statements are equivalent:\n\nSHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;\n\nThe WHERE clause can be given to select rows using more general\nconditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nSHOW INDEX returns the following fields:\n\no Table\n\n  The name of the table.\n\no Non_unique\n\n  0 if the index cannot contain duplicates, 1 if it can.\n\no Key_name\n\n  The name of the index. If the index is the primary key, the name is\n  always PRIMARY.\n\no Seq_in_index\n\n  The column sequence number in the index, starting with 1.\n\no Column_name\n\n  The name of the column.\n\no Collation\n\n  How the column is sorted in the index. This can have values A\n  (ascending) or NULL (not sorted).\n\no Cardinality\n\n  An estimate of the number of unique values in the index. To update\n  this number, run ANALYZE TABLE or (for MyISAM tables) myisamchk -a.\n\n  Cardinality is counted based on statistics stored as integers, so the\n  value is not necessarily exact even for small tables. The higher the\n  cardinality, the greater the chance that MySQL uses the index when\n  doing joins.\n\no Sub_part\n\n  The index prefix. That is, the number of indexed characters if the\n  column is only partly indexed, NULL if the entire column is indexed.\n\n  *Note*:\n\n  Prefix limits are measured in bytes. However, prefix lengths for\n  index specifications in CREATE TABLE, ALTER TABLE, and CREATE INDEX\n  statements are interpreted as number of characters for nonbinary\n  string types (CHAR, VARCHAR, TEXT) and number of bytes for binary\n  string types (BINARY, VARBINARY, BLOB). Take this into account when\n  specifying a prefix length for a nonbinary string column that uses a\n  multibyte character set.\n\n  For additional information about index prefixes, see\n  https://dev.mysql.com/doc/refman/5.6/en/column-indexes.html, and\n  [HELP CREATE INDEX].\n\no Packed\n\n  Indicates how the key is packed. NULL if it is not.\n\no Null\n\n  Contains YES if the column may contain NULL values and \'\' if not.\n\no Index_type\n\n  The index method used (BTREE, FULLTEXT, HASH, RTREE).\n\no Comment\n\n  Information about the index not described in its own column, such as\n  disabled if the index is disabled.\n\no Index_comment\n\n  Any comment provided for the index with a COMMENT attribute when the\n  index was created.\n\nInformation about table indexes is also available from the\nINFORMATION_SCHEMA STATISTICS table. See\nhttps://dev.mysql.com/doc/refman/5.6/en/information-schema-statistics-t\nable.html.\n\nYou can list a table\'s indexes with the mysqlshow -k db_name tbl_name\ncommand.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-index.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-index.html');
INSERT INTO `help_topic` VALUES (575, 'SHOW PLUGINS', 3, 'Syntax:\nSHOW PLUGINS\n\nSHOW PLUGINS displays information about server plugins.\n\nExample of SHOW PLUGINS output:\n\nmysql> SHOW PLUGINS\\G\n*************************** 1. row ***************************\n   Name: binlog\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 2. row ***************************\n   Name: CSV\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 3. row ***************************\n   Name: MEMORY\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 4. row ***************************\n   Name: MyISAM\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n...\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-plugins.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-plugins.html');
INSERT INTO `help_topic` VALUES (577, 'SHOW PROCEDURE CODE', 3, 'Syntax:\nSHOW PROCEDURE CODE proc_name\n\nThis statement is a MySQL extension that is available only for servers\nthat have been built with debugging support. It displays a\nrepresentation of the internal implementation of the named stored\nprocedure. A similar statement, SHOW FUNCTION CODE, displays\ninformation about stored functions (see [HELP SHOW FUNCTION CODE]).\n\nTo use either statement, you must be the owner of the routine or have\nSELECT access to the mysql.proc table.\n\nIf the named routine is available, each statement produces a result\nset. Each row in the result set corresponds to one \"instruction\" in the\nroutine. The first column is Pos, which is an ordinal number beginning\nwith 0. The second column is Instruction, which contains an SQL\nstatement (usually changed from the original source), or a directive\nwhich has meaning only to the stored-routine handler.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-procedure-code.html\n\n', 'mysql> DELIMITER //\nmysql> CREATE PROCEDURE p1 ()\n       BEGIN\n         DECLARE fanta INT DEFAULT 55;\n         DROP TABLE t2;\n         LOOP\n           INSERT INTO t3 VALUES (fanta);\n           END LOOP;\n         END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction                            |\n+-----+----------------------------------------+\n|   0 | set fanta@0 55                         |\n|   1 | stmt 9 \"DROP TABLE t2\"                 |\n|   2 | stmt 5 \"INSERT INTO t3 VALUES (fanta)\" |\n|   3 | jump 2                                 |\n+-----+----------------------------------------+\n4 rows in set (0.00 sec)\n\nmysql> CREATE FUNCTION test.hello (s CHAR(20))\n       RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT(\'Hello, \',s,\'!\');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW FUNCTION CODE test.hello;\n+-----+---------------------------------------+\n| Pos | Instruction                           |\n+-----+---------------------------------------+\n|   0 | freturn 254 concat(\'Hello, \',s@0,\'!\') |\n+-----+---------------------------------------+\n1 row in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-procedure-code.html');
INSERT INTO `help_topic` VALUES (578, 'SHOW PROCEDURE STATUS', 3, 'Syntax:\nSHOW PROCEDURE STATUS\n    [LIKE \'pattern\' | WHERE expr]\n\nThis statement is a MySQL extension. It returns characteristics of a\nstored procedure, such as the database, name, type, creator, creation\nand modification dates, and character set information. A similar\nstatement, SHOW FUNCTION STATUS, displays information about stored\nfunctions (see [HELP SHOW FUNCTION STATUS]).\n\nTo use either statement, you must be the owner of the routine or have\nSELECT access to the mysql.proc table.\n\nThe LIKE clause, if present, indicates which procedure or function\nnames to match. The WHERE clause can be given to select rows using more\ngeneral conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-procedure-status.html\n\n', 'mysql> SHOW PROCEDURE STATUS LIKE \'sp1\'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: sp1\n                Type: PROCEDURE\n             Definer: testuser@localhost\n            Modified: 2018-08-08 13:54:11\n             Created: 2018-08-08 13:54:11\n       Security_type: DEFINER\n             Comment:\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n\nmysql> SHOW FUNCTION STATUS LIKE \'hello\'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: hello\n                Type: FUNCTION\n             Definer: testuser@localhost\n            Modified: 2020-03-10 11:14:27\n             Created: 2020-03-10 11:14:27\n       Security_type: DEFINER\n             Comment:\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-procedure-status.html');
INSERT INTO `help_topic` VALUES (579, 'SHOW PROCESSLIST', 3, 'Syntax:\nSHOW [FULL] PROCESSLIST\n\nThe MySQL process list indicates the operations currently being\nperformed by the set of threads executing within the server. The SHOW\nPROCESSLIST statement is one source of process information. For a\ncomparison of this statement with other sources, see\nhttps://dev.mysql.com/doc/refman/5.6/en/processlist-access.html#process\nlist-sources.\n\nIf you have the PROCESS privilege, you can see all threads, even those\nbelonging to other users. Otherwise (without the PROCESS privilege),\nnonanonymous users have access to information about their own threads\nbut not threads for other users, and anonymous users have no access to\nthread information.\n\nWithout the FULL keyword, SHOW PROCESSLIST displays only the first 100\ncharacters of each statement in the Info field.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-processlist.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-processlist.html');
INSERT INTO `help_topic` VALUES (580, 'SHOW PROFILE', 3, 'Syntax:\nSHOW PROFILE [type [, type] ... ]\n    [FOR QUERY n]\n    [LIMIT row_count [OFFSET offset]]\n\ntype: {\n    ALL\n  | BLOCK IO\n  | CONTEXT SWITCHES\n  | CPU\n  | IPC\n  | MEMORY\n  | PAGE FAULTS\n  | SOURCE\n  | SWAPS\n}\n\nThe SHOW PROFILE and SHOW PROFILES statements display profiling\ninformation that indicates resource usage for statements executed\nduring the course of the current session.\n\n*Note*:\n\nThese statements are deprecated as of MySQL 5.6.7; expect them to be\nremoved in a future MySQL release. Use the Performance Schema instead;\nsee\nhttps://dev.mysql.com/doc/refman/5.6/en/performance-schema-query-profil\ning.html.\n\nTo control profiling, use the profiling session variable, which has a\ndefault value of 0 (OFF). Enable profiling by setting profiling to 1 or\nON:\n\nmysql> SET profiling = 1;\n\nSHOW PROFILES displays a list of the most recent statements sent to the\nserver. The size of the list is controlled by the\nprofiling_history_size session variable, which has a default value of\n15. The maximum value is 100. Setting the value to 0 has the practical\neffect of disabling profiling.\n\nAll statements are profiled except SHOW PROFILE and SHOW PROFILES, so\nyou find neither of those statements in the profile list. Malformed\nstatements are profiled. For example, SHOW PROFILING is an illegal\nstatement, and a syntax error occurs if you try to execute it, but it\nshows up in the profiling list.\n\nSHOW PROFILE displays detailed information about a single statement.\nWithout the FOR QUERY n clause, the output pertains to the most\nrecently executed statement. If FOR QUERY n is included, SHOW PROFILE\ndisplays information for statement n. The values of n correspond to the\nQuery_ID values displayed by SHOW PROFILES.\n\nThe LIMIT row_count clause may be given to limit the output to\nrow_count rows. If LIMIT is given, OFFSET offset may be added to begin\nthe output offset rows into the full set of rows.\n\nBy default, SHOW PROFILE displays Status and Duration columns. The\nStatus values are like the State values displayed by SHOW PROCESSLIST,\nalthough there might be some minor differences in interpretion for the\ntwo statements for some status values (see\nhttps://dev.mysql.com/doc/refman/5.6/en/thread-information.html).\n\nOptional type values may be specified to display specific additional\ntypes of information:\n\no ALL displays all information\n\no BLOCK IO displays counts for block input and output operations\n\no CONTEXT SWITCHES displays counts for voluntary and involuntary\n  context switches\n\no CPU displays user and system CPU usage times\n\no IPC displays counts for messages sent and received\n\no MEMORY is not currently implemented\n\no PAGE FAULTS displays counts for major and minor page faults\n\no SOURCE displays the names of functions from the source code, together\n  with the name and line number of the file in which the function\n  occurs\n\no SWAPS displays swap counts\n\nProfiling is enabled per session. When a session ends, its profiling\ninformation is lost.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-profile.html\n\n', 'mysql> SELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> SET profiling = 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DROP TABLE IF EXISTS t1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> CREATE TABLE T1 (id INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROFILES;\n+----------+----------+--------------------------+\n| Query_ID | Duration | Query                    |\n+----------+----------+--------------------------+\n|        0 | 0.000088 | SET PROFILING = 1        |\n|        1 | 0.000136 | DROP TABLE IF EXISTS t1  |\n|        2 | 0.011947 | CREATE TABLE t1 (id INT) |\n+----------+----------+--------------------------+\n3 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| checking permissions | 0.000040 |\n| creating table       | 0.000056 |\n| After create         | 0.011363 |\n| query end            | 0.000375 |\n| freeing items        | 0.000089 |\n| logging slow query   | 0.000019 |\n| cleaning up          | 0.000005 |\n+----------------------+----------+\n7 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE FOR QUERY 1;\n+--------------------+----------+\n| Status             | Duration |\n+--------------------+----------+\n| query end          | 0.000107 |\n| freeing items      | 0.000008 |\n| logging slow query | 0.000015 |\n| cleaning up        | 0.000006 |\n+--------------------+----------+\n4 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE CPU FOR QUERY 2;\n+----------------------+----------+----------+------------+\n| Status               | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| checking permissions | 0.000040 | 0.000038 |   0.000002 |\n| creating table       | 0.000056 | 0.000028 |   0.000028 |\n| After create         | 0.011363 | 0.000217 |   0.001571 |\n| query end            | 0.000375 | 0.000013 |   0.000028 |\n| freeing items        | 0.000089 | 0.000010 |   0.000014 |\n| logging slow query   | 0.000019 | 0.000009 |   0.000010 |\n| cleaning up          | 0.000005 | 0.000003 |   0.000002 |\n+----------------------+----------+----------+------------+\n7 rows in set (0.00 sec)\n', 'https://dev.mysql.com/doc/refman/5.6/en/show-profile.html');
INSERT INTO `help_topic` VALUES (583, 'SHOW SLAVE HOSTS', 3, 'Syntax:\nSHOW SLAVE HOSTS\n\nDisplays a list of replicas currently registered with the source.\n\nSHOW SLAVE HOSTS should be executed on a server that acts as a\nreplication source. The statement displays information about servers\nthat are or have been connected as replicas, with each row of the\nresult corresponding to one replica server, as shown here:\n\nmysql> SHOW SLAVE HOSTS;\n+------------+-----------+------+-----------+--------------------------------------+\n| Server_id  | Host      | Port | Master_id | Slave_UUID                           |\n+------------+-----------+------+-----------+--------------------------------------+\n|  192168010 | iconnect2 | 3306 | 192168011 | 14cb6624-7f93-11e0-b2c0-c80aa9429562 |\n| 1921680101 | athena    | 3306 | 192168011 | 07af4990-f41f-11df-a566-7ac56fdaf645 |\n+------------+-----------+------+-----------+--------------------------------------+\n\no Server_id: The unique server ID of the replica server, as configured\n  in the replica server\'s option file, or on the command line with\n  --server-id=value.\n\no Host: The host name of the replica server as specified on the replica\n  with the --report-host option. This can differ from the machine name\n  as configured in the operating system.\n\no User: The replica server user name as, specified on the replica with\n  the --report-user option. Statement output includes this column only\n  if the source server is started with the --show-slave-auth-info\n  option.\n\no Password: The replica server password as, specified on the replica\n  with the --report-password option. Statement output includes this\n  column only if the source server is started with the\n  --show-slave-auth-info option.\n\no Port: The port on the source to which the replica server is\n  listening, as specified on the replica with the --report-port option.\n\n  A zero in this column means that the replica port (--report-port) was\n  not set.\n\no Master_id: The unique server ID of the source server that the replica\n  server is replicating from. This is the server ID of the server on\n  which SHOW SLAVE HOSTS is executed, so this same value is listed for\n  each row in the result.\n\no Slave_UUID: The globally unique ID of this replica, as generated on\n  the replica and found in the replica\'s auto.cnf file.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-slave-hosts.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-slave-hosts.html');
INSERT INTO `help_topic` VALUES (584, 'SHOW SLAVE STATUS', 3, 'Syntax:\nSHOW SLAVE STATUS\n\nThis statement provides status information on essential parameters of\nthe replica threads. It requires either the SUPER or REPLICATION CLIENT\nprivilege.\n\nIf you issue this statement using the mysql client, you can use a \\G\nstatement terminator rather than a semicolon to obtain a more readable\nvertical layout:\n\nmysql> SHOW SLAVE STATUS\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: localhost\n                  Master_User: root\n                  Master_Port: 13000\n                Connect_Retry: 60\n              Master_Log_File: source-bin.000002\n          Read_Master_Log_Pos: 1307\n               Relay_Log_File: replica-relay-bin.000003\n                Relay_Log_Pos: 1508\n        Relay_Master_Log_File: source-bin.000002\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 1307\n              Relay_Log_Space: 1858\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: 1\n                  Master_UUID: 3e11fa47-71ca-11e1-9e33-c80aa9429562\n             Master_Info_File: /var/mysqld.2/data/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Reading event from the relay log\n           Master_Retry_Count: 10\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5\n            Executed_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5\n                Auto_Position: 1\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-slave-status.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-slave-status.html');
INSERT INTO `help_topic` VALUES (585, 'SHOW STATUS', 3, 'Syntax:\nSHOW [GLOBAL | SESSION] STATUS\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW STATUS provides server status information (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-status-variables.html).\nThis statement does not require any privilege. It requires only the\nability to connect to the server.\n\nStatus variable information is also available from these sources:\n\no The GLOBAL_STATUS and SESSION_STATUS tables. See\n  https://dev.mysql.com/doc/refman/5.6/en/information-schema-status-tab\n  le.html.\n\no The mysqladmin extended-status command. See\n  https://dev.mysql.com/doc/refman/5.6/en/mysqladmin.html.\n\nFor SHOW STATUS, a LIKE clause, if present, indicates which variable\nnames to match. A WHERE clause can be given to select rows using more\ngeneral conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nSHOW STATUS accepts an optional GLOBAL or SESSION variable scope\nmodifier:\n\no With a GLOBAL modifier, the statement displays the global status\n  values. A global status variable may represent status for some aspect\n  of the server itself (for example, Aborted_connects), or the\n  aggregated status over all connections to MySQL (for example,\n  Bytes_received and Bytes_sent). If a variable has no global value,\n  the session value is displayed.\n\no With a SESSION modifier, the statement displays the status variable\n  values for the current connection. If a variable has no session\n  value, the global value is displayed. LOCAL is a synonym for SESSION.\n\no If no modifier is present, the default is SESSION.\n\nThe scope for each status variable is listed at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-status-variables.html.\n\nEach invocation of the SHOW STATUS statement uses an internal temporary\ntable and increments the global Created_tmp_tables value.\n\nWith a LIKE clause, the statement displays only rows for those\nvariables with names that match the pattern:\n\nmysql> SHOW STATUS LIKE \'Key%\';\n+--------------------+----------+\n| Variable_name      | Value    |\n+--------------------+----------+\n| Key_blocks_used    | 14955    |\n| Key_read_requests  | 96854827 |\n| Key_reads          | 162040   |\n| Key_write_requests | 7589728  |\n| Key_writes         | 3813196  |\n+--------------------+----------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-status.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-status.html');
INSERT INTO `help_topic` VALUES (587, 'SHOW TABLES', 3, 'Syntax:\nSHOW [FULL] TABLES\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW TABLES lists the non-TEMPORARY tables in a given database. You can\nalso get this list using the mysqlshow db_name command. The LIKE\nclause, if present, indicates which table names to match. The WHERE\nclause can be given to select rows using more general conditions, as\ndiscussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nMatching performed by the LIKE clause is dependent on the setting of\nthe lower_case_table_names system variable.\n\nThis statement also lists any views in the database. The optional FULL\nmodifier causes SHOW TABLES to display a second output column with\nvalues of BASE TABLE for a table, VIEW for a view, or SYSTEM VIEW for\nan INFORMATION_SCHEMA table.\n\nIf you have no privileges for a base table or view, it does not show up\nin the output from SHOW TABLES or mysqlshow db_name.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-tables.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-tables.html');
INSERT INTO `help_topic` VALUES (588, 'SHOW TRIGGERS', 3, 'Syntax:\nSHOW TRIGGERS\n    [{FROM | IN} db_name]\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW TRIGGERS lists the triggers currently defined for tables in a\ndatabase (the default database unless a FROM clause is given). This\nstatement returns results only for databases and tables for which you\nhave the TRIGGER privilege. The LIKE clause, if present, indicates\nwhich table names (not trigger names) to match and causes the statement\nto display triggers for those tables. The WHERE clause can be given to\nselect rows using more general conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nFor the ins_sum trigger defined in\nhttps://dev.mysql.com/doc/refman/5.6/en/triggers.html, the output of\nSHOW TRIGGERS is as shown here:\n\nmysql> SHOW TRIGGERS LIKE \'acc%\'\\G\n*************************** 1. row ***************************\n             Trigger: ins_sum\n               Event: INSERT\n               Table: account\n           Statement: SET @sum = @sum + NEW.amount\n              Timing: BEFORE\n             Created: NULL\n            sql_mode: NO_ENGINE_SUBSTITUTION\n             Definer: me@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: latin1_swedish_ci\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-triggers.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-triggers.html');
INSERT INTO `help_topic` VALUES (589, 'SHOW VARIABLES', 3, 'Syntax:\nSHOW [GLOBAL | SESSION] VARIABLES\n    [LIKE \'pattern\' | WHERE expr]\n\nSHOW VARIABLES shows the values of MySQL system variables (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html).\nThis statement does not require any privilege. It requires only the\nability to connect to the server.\n\nSystem variable information is also available from these sources:\n\no The GLOBAL_VARIABLES and SESSION_VARIABLES tables. See\n  https://dev.mysql.com/doc/refman/5.6/en/information-schema-variables-\n  table.html.\n\no The mysqladmin variables command. See\n  https://dev.mysql.com/doc/refman/5.6/en/mysqladmin.html.\n\nFor SHOW VARIABLES, a LIKE clause, if present, indicates which variable\nnames to match. A WHERE clause can be given to select rows using more\ngeneral conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.6/en/extended-show.html.\n\nSHOW VARIABLES accepts an optional GLOBAL or SESSION variable scope\nmodifier:\n\no With a GLOBAL modifier, the statement displays global system variable\n  values. These are the values used to initialize the corresponding\n  session variables for new connections to MySQL. If a variable has no\n  global value, no value is displayed.\n\no With a SESSION modifier, the statement displays the system variable\n  values that are in effect for the current connection. If a variable\n  has no session value, the global value is displayed. LOCAL is a\n  synonym for SESSION.\n\no If no modifier is present, the default is SESSION.\n\nThe scope for each system variable is listed at\nhttps://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html.\n\nSHOW VARIABLES is subject to a version-dependent display-width limit.\nFor variables with very long values that are not completely displayed,\nuse SELECT as a workaround. For example:\n\nSELECT @@GLOBAL.innodb_data_file_path;\n\nMost system variables can be set at server startup (read-only variables\nsuch as version_comment are exceptions). Many can be changed at runtime\nwith the SET statement. See\nhttps://dev.mysql.com/doc/refman/5.6/en/using-system-variables.html,\nand [HELP SET].\n\nWith a LIKE clause, the statement displays only rows for those\nvariables with names that match the pattern. To obtain the row for a\nspecific variable, use a LIKE clause as shown:\n\nSHOW VARIABLES LIKE \'max_join_size\';\nSHOW SESSION VARIABLES LIKE \'max_join_size\';\n\nTo get a list of variables whose name match a pattern, use the %\nwildcard character in a LIKE clause:\n\nSHOW VARIABLES LIKE \'%size%\';\nSHOW GLOBAL VARIABLES LIKE \'%size%\';\n\nWildcard characters can be used in any position within the pattern to\nbe matched. Strictly speaking, because _ is a wildcard that matches any\nsingle character, you should escape it as \\_ to match it literally. In\npractice, this is rarely necessary.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-variables.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-variables.html');
INSERT INTO `help_topic` VALUES (590, 'SHOW WARNINGS', 3, 'Syntax:\nSHOW WARNINGS [LIMIT [offset,] row_count]\nSHOW COUNT(*) WARNINGS\n\nSHOW WARNINGS is a diagnostic statement that displays information about\nthe conditions (errors, warnings, and notes) resulting from executing a\nstatement in the current session. Warnings are generated for DML\nstatements such as INSERT, UPDATE, and LOAD DATA as well as DDL\nstatements such as CREATE TABLE and ALTER TABLE.\n\nThe LIMIT clause has the same syntax as for the SELECT statement. See\nhttps://dev.mysql.com/doc/refman/5.6/en/select.html.\n\nSHOW WARNINGS is also used following EXPLAIN EXTENDED, to display the\nextra information generated by EXPLAIN when the EXTENDED keyword is\nused. See\nhttps://dev.mysql.com/doc/refman/5.6/en/explain-extended.html.\n\nSHOW WARNINGS displays information about the conditions resulting from\nthe most recent statement in the current session that generated\nmessages. It shows nothing if the most recent statement used a table\nand generated no messages. (That is, statements that use a table but\ngenerate no messages clear the message list.) Statements that do not\nuse tables and do not generate messages have no effect on the message\nlist.\n\nThe SHOW COUNT(*) WARNINGS diagnostic statement displays the total\nnumber of errors, warnings, and notes. You can also retrieve this\nnumber from the warning_count system variable:\n\nSHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;\n\nA related diagnostic statement, SHOW ERRORS, shows only error\nconditions (it excludes warnings and notes), and SHOW COUNT(*) ERRORS\nstatement displays the total number of errors. See [HELP SHOW ERRORS].\nGET DIAGNOSTICS can be used to examine information for individual\nconditions. See [HELP GET DIAGNOSTICS].\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/show-warnings.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/show-warnings.html');
INSERT INTO `help_topic` VALUES (592, 'CACHE INDEX', 3, 'Syntax:\nCACHE INDEX {\n      tbl_index_list [, tbl_index_list] ...\n    | tbl_name PARTITION (partition_list)\n  }\n  IN key_cache_name\n\ntbl_index_list:\n  tbl_name [{INDEX|KEY} (index_name[, index_name] ...)]\n\npartition_list: {\n    partition_name[, partition_name] ...\n  | ALL\n}\n\nThe CACHE INDEX statement assigns table indexes to a specific key\ncache. It applies only to MyISAM tables, including partitioned MyISAM\ntables. After the indexes have been assigned, they can be preloaded\ninto the cache if desired with LOAD INDEX INTO CACHE.\n\nThe following statement assigns indexes from the tables t1, t2, and t3\nto the key cache named hot_cache:\n\nmysql> CACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table   | Op                 | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status   | OK       |\n| test.t2 | assign_to_keycache | status   | OK       |\n| test.t3 | assign_to_keycache | status   | OK       |\n+---------+--------------------+----------+----------+\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/cache-index.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/cache-index.html');
INSERT INTO `help_topic` VALUES (593, 'FLUSH', 3, 'Syntax:\nFLUSH [NO_WRITE_TO_BINLOG | LOCAL] {\n    flush_option [, flush_option] ...\n  | tables_option\n}\n\nflush_option: {\n    BINARY LOGS\n  | DES_KEY_FILE\n  | ENGINE LOGS\n  | ERROR LOGS\n  | GENERAL LOGS\n  | HOSTS\n  | LOGS\n  | PRIVILEGES\n  | QUERY CACHE\n  | RELAY LOGS\n  | SLOW LOGS\n  | STATUS\n  | USER_RESOURCES\n}\n\ntables_option: {\n    TABLES\n  | TABLES tbl_name [, tbl_name] ...\n  | TABLES WITH READ LOCK\n  | TABLES tbl_name [, tbl_name] ... WITH READ LOCK\n  | TABLES tbl_name [, tbl_name] ... FOR EXPORT\n}\n\nThe FLUSH statement has several variant forms that clear or reload\nvarious internal caches, flush tables, or acquire locks. To execute\nFLUSH, you must have the RELOAD privilege. Specific flush options might\nrequire additional privileges, as indicated in the option descriptions.\n\n*Note*:\n\nIt is not possible to issue FLUSH statements within stored functions or\ntriggers. However, you may use FLUSH in stored procedures, so long as\nthese are not called from stored functions or triggers. See\nhttps://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.htm\nl.\n\nBy default, the server writes FLUSH statements to the binary log so\nthat they replicate to replicas. To suppress logging, specify the\noptional NO_WRITE_TO_BINLOG keyword or its alias LOCAL.\n\n*Note*:\n\nFLUSH LOGS, FLUSH BINARY LOGS, FLUSH TABLES WITH READ LOCK (with or\nwithout a table list), and FLUSH TABLES tbl_name ... FOR EXPORT are not\nwritten to the binary log in any case because they would cause problems\nif replicated to a replica.\n\nThe FLUSH statement causes an implicit commit. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nThe mysqladmin utility provides a command-line interface to some flush\noperations, using commands such as flush-hosts, flush-logs,\nflush-privileges, flush-status, and flush-tables. See\nhttps://dev.mysql.com/doc/refman/5.6/en/mysqladmin.html.\n\nSending a SIGHUP signal to the server causes several flush operations\nto occur that are similar to various forms of the FLUSH statement.\nSignals can be sent by the root system account or the system account\nthat owns the server process. This enables the flush operations to be\nperformed without having to connect to the server, which requires a\nMySQL account that has privileges sufficient for those operations. See\nhttps://dev.mysql.com/doc/refman/5.6/en/unix-signal-response.html.\n\nThe RESET statement is similar to FLUSH. See [HELP RESET], for\ninformation about using RESET with replication.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/flush.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/flush.html');
INSERT INTO `help_topic` VALUES (594, 'KILL', 3, 'Syntax:\nKILL [CONNECTION | QUERY] processlist_id\n\nEach connection to mysqld runs in a separate thread. You can kill a\nthread with the KILL processlist_id statement.\n\nThread processlist identifiers can be determined from the ID column of\nthe INFORMATION_SCHEMA PROCESSLIST table, the Id column of SHOW\nPROCESSLIST output, and the PROCESSLIST_ID column of the Performance\nSchema threads table. The value for the current thread is returned by\nthe CONNECTION_ID() function.\n\nKILL permits an optional CONNECTION or QUERY modifier:\n\no KILL CONNECTION is the same as KILL with no modifier: It terminates\n  the connection associated with the given processlist_id, after\n  terminating any statement the connection is executing.\n\no KILL QUERY terminates the statement the connection is currently\n  executing, but leaves the connection itself intact.\n\nThe ability to see which threads are available to be killed depends on\nthe PROCESS privilege:\n\no Without PROCESS, you can see only your own threads.\n\no With PROCESS, you can see all threads.\n\nThe ability to kill threads and statements depends on the SUPER\nprivilege:\n\no Without SUPER, you can kill only your own threads and statements.\n\no With SUPER, you can kill all threads and statements.\n\nYou can also use the mysqladmin processlist and mysqladmin kill\ncommands to examine and kill threads.\n\n*Note*:\n\nYou cannot use KILL with the Embedded MySQL Server library because the\nembedded server merely runs inside the threads of the host application.\nIt does not create any connection threads of its own.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/kill.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/kill.html');
INSERT INTO `help_topic` VALUES (595, 'LOAD INDEX', 3, 'Syntax:\nLOAD INDEX INTO CACHE\n  tbl_index_list [, tbl_index_list] ...\n\ntbl_index_list:\n  tbl_name\n    [PARTITION (partition_list)]\n    [{INDEX|KEY} (index_name[, index_name] ...)]\n    [IGNORE LEAVES]\n\npartition_list: {\n    partition_name[, partition_name] ...\n  | ALL\n}\n\nThe LOAD INDEX INTO CACHE statement preloads a table index into the key\ncache to which it has been assigned by an explicit CACHE INDEX\nstatement, or into the default key cache otherwise.\n\nLOAD INDEX INTO CACHE applies only to MyISAM tables, including\npartitioned MyISAM tables. In addition, indexes on partitioned tables\ncan be preloaded for one, several, or all partitions.\n\nThe IGNORE LEAVES modifier causes only blocks for the nonleaf nodes of\nthe index to be preloaded.\n\nIGNORE LEAVES is also supported for partitioned MyISAM tables.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/load-index.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/load-index.html');
INSERT INTO `help_topic` VALUES (596, 'RESET', 3, 'Syntax:\nRESET reset_option [, reset_option] ...\n\nreset_option: {\n    MASTER\n  | QUERY CACHE\n  | SLAVE\n}\n\nThe RESET statement is used to clear the state of various server\noperations. You must have the RELOAD privilege to execute RESET.\n\nRESET acts as a stronger version of the FLUSH statement. See [HELP\nFLUSH].\n\nThe RESET statement causes an implicit commit. See\nhttps://dev.mysql.com/doc/refman/5.6/en/implicit-commit.html.\n\nIn MySQL 5.6.11 only, gtid_next must be set to AUTOMATIC before issuing\nthis statement. (Bug #16062608, Bug #16715809, Bug #69045)\n\nThe following list describes the permitted RESET statement reset_option\nvalues:\n\no RESET MASTER\n\n  Deletes all binary logs listed in the index file, resets the binary\n  log index file to be empty, and creates a new binary log file.\n\no RESET QUERY CACHE\n\n  Removes all query results from the query cache.\n\no RESET SLAVE\n\n  Makes the replica forget its replication position in the source\n  binary logs. Also resets the relay log by deleting any existing relay\n  log files and beginning a new one.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/reset.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/reset.html');
INSERT INTO `help_topic` VALUES (600, 'HELP STATEMENT', 45, 'Syntax:\nHELP \'search_string\'\n\nThe HELP statement returns online information from the MySQL Reference\nManual. Its proper operation requires that the help tables in the mysql\ndatabase be initialized with help topic information (see\nhttps://dev.mysql.com/doc/refman/5.6/en/server-side-help-support.html).\n\nThe HELP statement searches the help tables for the given search string\nand displays the result of the search. The search string is not\ncase-sensitive.\n\nThe search string can contain the wildcard characters % and _. These\nhave the same meaning as for pattern-matching operations performed with\nthe LIKE operator. For example, HELP \'rep%\' returns a list of topics\nthat begin with rep.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/help.html\n\n', '', 'https://dev.mysql.com/doc/refman/5.6/en/help.html');
INSERT INTO `help_topic` VALUES (602, 'MERGE', 46, 'The MERGE storage engine, also known as the MRG_MyISAM engine, is a\ncollection of identical MyISAM tables that can be used as one.\n\"Identical\" means that all tables have identical column data types and\nindex information. You cannot merge MyISAM tables in which the columns\nare listed in a different order, do not have exactly the same data\ntypes in corresponding columns, or have the indexes in different order.\nHowever, any or all of the MyISAM tables can be compressed with\nmyisampack. See\nhttps://dev.mysql.com/doc/refman/5.6/en/myisampack.html. Differences\nbetween tables such as these do not matter:\n\no Names of corresponding columns and indexes can differ.\n\no Comments for tables, columns, and indexes can differ.\n\no Table options such as AVG_ROW_LENGTH, MAX_ROWS, or PACK_KEYS can\n  differ.\n\nURL: https://dev.mysql.com/doc/refman/5.6/en/merge-storage-engine.html\n\n', 'mysql> CREATE TABLE t1 (\n    ->    a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->    message CHAR(20)) ENGINE=MyISAM;\nmysql> CREATE TABLE t2 (\n    ->    a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->    message CHAR(20)) ENGINE=MyISAM;\nmysql> INSERT INTO t1 (message) VALUES (\'Testing\'),(\'table\'),(\'t1\');\nmysql> INSERT INTO t2 (message) VALUES (\'Testing\'),(\'table\'),(\'t2\');\nmysql> CREATE TABLE total (\n    ->    a INT NOT NULL AUTO_INCREMENT,\n    ->    message CHAR(20), INDEX(a))\n    ->    ENGINE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;\n', 'https://dev.mysql.com/doc/refman/5.6/en/merge-storage-engine.html');

-- ----------------------------
-- Table structure for index_stats
-- ----------------------------
DROP TABLE IF EXISTS `index_stats`;
CREATE TABLE `index_stats`  (
  `db_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `table_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `index_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `prefix_arity` int UNSIGNED NOT NULL,
  `avg_frequency` decimal(12, 4) NULL DEFAULT NULL,
  PRIMARY KEY (`db_name`, `table_name`, `index_name`, `prefix_arity`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Statistics on Indexes' ROW_FORMAT = Page;

-- ----------------------------
-- Records of index_stats
-- ----------------------------

-- ----------------------------
-- Table structure for innodb_index_stats
-- ----------------------------
DROP TABLE IF EXISTS `innodb_index_stats`;
CREATE TABLE `innodb_index_stats`  (
  `database_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `table_name` varchar(199) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `index_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `last_update` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `stat_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `stat_value` bigint UNSIGNED NOT NULL,
  `sample_size` bigint UNSIGNED NULL DEFAULT NULL,
  `stat_description` varchar(1024) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`database_name`, `table_name`, `index_name`, `stat_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin ROW_FORMAT = Dynamic STATS_PERSISTENT = 0;

-- ----------------------------
-- Records of innodb_index_stats
-- ----------------------------
INSERT INTO `innodb_index_stats` VALUES ('mysql', 'gtid_slave_pos', 'PRIMARY', '2024-06-05 16:48:49', 'n_diff_pfx01', 0, 1, 'domain_id');
INSERT INTO `innodb_index_stats` VALUES ('mysql', 'gtid_slave_pos', 'PRIMARY', '2024-06-05 16:48:49', 'n_diff_pfx02', 0, 1, 'domain_id,sub_id');
INSERT INTO `innodb_index_stats` VALUES ('mysql', 'gtid_slave_pos', 'PRIMARY', '2024-06-05 16:48:49', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index');
INSERT INTO `innodb_index_stats` VALUES ('mysql', 'gtid_slave_pos', 'PRIMARY', '2024-06-05 16:48:49', 'size', 1, NULL, 'Number of pages in the index');

-- ----------------------------
-- Table structure for innodb_table_stats
-- ----------------------------
DROP TABLE IF EXISTS `innodb_table_stats`;
CREATE TABLE `innodb_table_stats`  (
  `database_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `table_name` varchar(199) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `last_update` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `n_rows` bigint UNSIGNED NOT NULL,
  `clustered_index_size` bigint UNSIGNED NOT NULL,
  `sum_of_other_index_sizes` bigint UNSIGNED NOT NULL,
  PRIMARY KEY (`database_name`, `table_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin ROW_FORMAT = Dynamic STATS_PERSISTENT = 0;

-- ----------------------------
-- Records of innodb_table_stats
-- ----------------------------
INSERT INTO `innodb_table_stats` VALUES ('mysql', 'gtid_slave_pos', '2024-06-05 16:48:49', 0, 1, 0);

-- ----------------------------
-- Table structure for plugin
-- ----------------------------
DROP TABLE IF EXISTS `plugin`;
CREATE TABLE `plugin`  (
  `name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `dl` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'MySQL plugins' ROW_FORMAT = Page;

-- ----------------------------
-- Records of plugin
-- ----------------------------

-- ----------------------------
-- Table structure for proc
-- ----------------------------
DROP TABLE IF EXISTS `proc`;
CREATE TABLE `proc`  (
  `db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `type` enum('FUNCTION','PROCEDURE','PACKAGE','PACKAGE BODY') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `specific_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `language` enum('SQL') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'SQL',
  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'CONTAINS_SQL',
  `is_deterministic` enum('YES','NO') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'NO',
  `security_type` enum('INVOKER','DEFINER') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'DEFINER',
  `param_list` blob NOT NULL,
  `returns` longblob NOT NULL,
  `body` longblob NOT NULL,
  `definer` varchar(384) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `created` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','IGNORE_BAD_TABLE_OPTIONS','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH','EMPTY_STRING_IS_NULL','SIMULTANEOUS_ASSIGNMENT','TIME_ROUND_FRACTIONAL') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `comment` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `character_set_client` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NULL DEFAULT NULL,
  `body_utf8` longblob NULL,
  `aggregate` enum('NONE','GROUP') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'NONE',
  PRIMARY KEY (`db`, `name`, `type`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Stored Procedures' ROW_FORMAT = Page;

-- ----------------------------
-- Records of proc
-- ----------------------------
INSERT INTO `proc` VALUES ('sys', 'ps_setup_reload_saved', 'PROCEDURE', 'ps_setup_reload_saved', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', '', '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Reloads a saved Performance Schema configuration,\n             so that you can alter the setup for debugging purposes,\n             but restore it to a previous state.\n             Use the companion procedure - ps_setup_save(), to\n             save a configuration.\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Parameters\n             None.\n             Example\n             mysql> CALL sys.ps_setup_save();\n             Query OK, 0 rows affected (0.08 sec)\n             mysql> UPDATE performance_schema.setup_instruments SET enabled = \'YES\', timed = \'YES\';\n             Query OK, 547 rows affected (0.40 sec)\n             Rows matched: 784  Changed: 547  Warnings: 0\n             /* Run some tests that need more detailed instrumentation here */\n             mysql> CALL sys.ps_setup_reload_saved();\n             Query OK, 0 rows affected (0.32 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_setup_reset_to_default', 'PROCEDURE', 'ps_setup_reset_to_default', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A20202020202020494E20696E5F766572626F736520424F4F4C45414E0A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Resets the Performance Schema setup to the default settings.\n             Parameters\n             in_verbose (BOOLEAN):\n               Whether to print each setup stage (including the SQL) whilst running.\n             Example\n             mysql> CALL sys.ps_setup_reset_to_default(true)\\G\n             *************************** 1. row ***************************\n             status: Resetting: setup_actors\n             DELETE\n             FROM performance_schema.setup_actors\n              WHERE NOT (HOST = \'%\' AND USER = \'%\' AND ROLE = \'%\')\n             1 row in set (0.00 sec)\n             *************************** 1. row ***************************\n             status: Resetting: setup_actors\n             INSERT IGNORE INTO performance_schema.setup_actors\n             VALUES (\'%\', \'%\', \'%\')\n             1 row in set (0.00 sec)\n             ...\n             mysql> CALL sys.ps_setup_reset_to_default(false)\\G\n             Query OK, 0 rows affected (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_setup_disable_background_threads', 'PROCEDURE', 'ps_setup_disable_background_threads', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', '', '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D20274E4F270A202020202057484552452074797065203D20274241434B47524F554E44273B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C2027206261636B67726F756E6420746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Disable all background thread instrumentation within Performance Schema.\n             Parameters\n             None.\n             Example\n             mysql> CALL sys.ps_setup_disable_background_threads();\n             +--------------------------------+\n             | summary                        |\n             +--------------------------------+\n             | Disabled 18 background threads |\n             +--------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D20274E4F270A202020202057484552452074797065203D20274241434B47524F554E44273B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C2027206261636B67726F756E6420746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'execute_prepared_stmt', 'PROCEDURE', 'execute_prepared_stmt', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F7175657279206C6F6E6774657874204348415241435445522053455420555446380A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes the query in the argument and executes it using a prepared statement. The prepared statement is deallocated,\n             so the procedure is mainly useful for executing one off dynamically created queries.\n             The sys_execute_prepared_stmt prepared statement name is used for the query and is required not to exist.\n             Parameters\n             in_query (longtext CHARACTER SET UTF8):\n               The query to execute.\n             Configuration Options\n             sys.debug\n               Whether to provide debugging output.\n               Default is \'OFF\'. Set to \'ON\' to include.\n             Example\n             mysql> CALL sys.execute_prepared_stmt(\'SELECT * FROM sys.sys_config\');\n             +------------------------+-------+---------------------+--------+\n             | variable               | value | set_time            | set_by |\n             +------------------------+-------+---------------------+--------+\n             | statement_truncate_len | 64    | 2015-06-30 13:06:00 | NULL   |\n             +------------------------+-------+---------------------+--------+\n             1 row in set (0.00 sec)\n             Query OK, 0 rows affected (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_setup_disable_consumer', 'PROCEDURE', 'ps_setup_disable_consumer', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20636F6E73756D6572205641524348415228313238290A20202020, '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020202053455420656E61626C6564203D20274E4F270A20202020205748455245206E616D65204C494B4520434F4E434154282725272C20636F6E73756D65722C20272527293B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720636F6E73756D6572272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Disables consumers within Performance Schema\n             matching the input pattern.\n             Parameters\n             consumer (VARCHAR(128)):\n               A LIKE pattern match (using \"%consumer%\") of consumers to disable\n             Example\n             To disable all consumers:\n             mysql> CALL sys.ps_setup_disable_consumer(\'\');\n             +--------------------------+\n             | summary                  |\n             +--------------------------+\n             | Disabled 15 consumers    |\n             +--------------------------+\n             1 row in set (0.02 sec)\n             To disable just the event_stage consumers:\n             mysql> CALL sys.ps_setup_disable_comsumers(\'stage\');\n             +------------------------+\n             | summary                |\n             +------------------------+\n             | Disabled 3 consumers   |\n             +------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020202053455420656E61626C6564203D20274E4F270A20202020205748455245206E616D65204C494B4520434F4E434154282725272C20636F6E73756D65722C20272527293B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720636F6E73756D6572272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_thread_stack', 'FUNCTION', 'ps_thread_stack', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x7468645F696420424947494E5420554E5349474E45442C0A2020202020202020646562756720424F4F4C45414E0A20202020, 0x6C6F6E67746578742043484152534554206C6174696E3120434F4C4C415445206C6174696E315F737765646973685F6369, mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Outputs a JSON formatted stack of all statements, stages and events\n             within Performance Schema for the specified thread.\n             Parameters\n             thd_id (BIGINT UNSIGNED):\n               The id of the thread to trace. This should match the thread_id\n               column from the performance_schema.threads table.\n             in_verbose (BOOLEAN):\n               Include file:lineno information in the events.\n             Example\n             (line separation added for output)\n             mysql> SELECT sys.ps_thread_stack(37, FALSE) AS thread_stack\\G\n             *************************** 1. row ***************************\n             thread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\"stack_created\": \"2014-02-19 13:39:03\",\n             \"mysql_version\": \"5.7.3-m13\",\"mysql_user\": \"root@localhost\",\"events\":\n             [{\"nesting_event_id\": \"0\", \"event_id\": \"10\", \"timer_wait\": 256.35, \"event_info\":\n             \"sql/select\", \"wait_info\": \"select @@version_comment limit 1\\nerrors: 0\\nwarnings: 0\\nlock time:\n             ...\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_thread_trx_info', 'FUNCTION', 'ps_thread_trx_info', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x696E5F7468726561645F696420424947494E5420554E5349474E45440A20202020, 0x6C6F6E6774657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, , 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns a JSON object with info on the given threads current transaction,\n             and the statements it has already executed, derived from the\n             performance_schema.events_transactions_current and\n             performance_schema.events_statements_history tables (so the consumers\n             for these also have to be enabled within Performance Schema to get full\n             data in the object).\n             When the output exceeds the default truncation length (65535), a JSON error\n             object is returned, such as:\n             { \"error\": \"Trx info truncated: Row 6 was cut by GROUP_CONCAT()\" }\n             Similar error objects are returned for other warnings/and exceptions raised\n             when calling the function.\n             The max length of the output of this function can be controlled with the\n             ps_thread_trx_info.max_length variable set via sys_config, or the\n             @sys.ps_thread_trx_info.max_length user variable, as appropriate.\n             Parameters\n             in_thread_id (BIGINT UNSIGNED):\n               The id of the thread to return the transaction info for.\n             Example\n             SELECT sys.ps_thread_trx_info(48)\\G\n             *************************** 1. row ***************************\n             sys.ps_thread_trx_info(48): [\n               {\n                 \"time\": \"790.70 us\",\n                 \"state\": \"COMMITTED\",\n                 \"mode\": \"READ WRITE\",\n                 \"autocommitted\": \"NO\",\n                 \"gtid\": \"AUTOMATIC\",\n                 \"isolation\": \"REPEATABLE READ\",\n                 \"statements_executed\": [\n                   {\n                     \"sql_text\": \"INSERT INTO info VALUES (1, \'foo\')\",\n                     \"time\": \"471.02 us\",\n                     \"schema\": \"trx\",\n                     \"rows_examined\": 0,\n                     \"rows_affected\": 1,\n                     \"rows_sent\": 0,\n                     \"tmp_tables\": 0,\n                     \"tmp_disk_tables\": 0,\n                     \"sort_rows\": 0,\n                     \"sort_merge_passes\": 0\n                   },\n                   {\n                     \"sql_text\": \"COMMIT\",\n                     \"time\": \"254.42 us\",\n                     \"schema\": \"trx\",\n                     \"rows_examined\": 0,\n                     \"rows_affected\": 0,\n                     \"rows_sent\": 0,\n                     \"tmp_tables\": 0,\n                     \"tmp_disk_tables\": 0,\n                     \"sort_rows\": 0,\n                     \"sort_merge_passes\": 0\n                   }\n                 ]\n               },\n               {\n                 \"time\": \"426.20 us\",\n                 \"state\": \"COMMITTED\",\n                 \"mode\": \"READ WRITE\",\n                 \"autocommitted\": \"NO\",\n                 \"gtid\": \"AUTOMATIC\",\n                 \"isolation\": \"REPEATABLE READ\",\n                 \"statements_executed\": [\n                   {\n                     \"sql_text\": \"INSERT INTO info VALUES (2, \'bar\')\",\n                     \"time\": \"107.33 us\",\n                     \"schema\": \"trx\",\n                     \"rows_examined\": 0,\n                     \"rows_affected\": 1,\n                     \"rows_sent\": 0,\n                     \"tmp_tables\": 0,\n                     \"tmp_disk_tables\": 0,\n                     \"sort_rows\": 0,\n                     \"sort_merge_passes\": 0\n                   },\n                   {\n                     \"sql_text\": \"COMMIT\",\n                     \"time\": \"213.23 us\",\n                     \"schema\": \"trx\",\n                     \"rows_examined\": 0,\n                     \"rows_affected\": 0,\n                     \"rows_sent\": 0,\n                     \"tmp_tables\": 0,\n                     \"tmp_disk_tables\": 0,\n                     \"sort_rows\": 0,\n                     \"sort_merge_passes\": 0\n                   }\n                 ]\n               }\n             ]\n             1 row in set (0.03 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_disabled_instruments', 'PROCEDURE', 'ps_setup_show_disabled_instruments', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', '', '', 0x424547494E0A2020202053454C454354206E616D652041532064697361626C65645F696E737472756D656E74732C2074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F696E737472756D656E74733B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently disabled instruments.\n             Parameters\n             None\n             Example\n             mysql> CALL sys.ps_setup_show_disabled_instruments();\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354206E616D652041532064697361626C65645F696E737472756D656E74732C2074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F696E737472756D656E74733B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_enabled_instruments', 'PROCEDURE', 'ps_setup_show_enabled_instruments', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', '', '', 0x424547494E0A2020202053454C454354206E616D6520415320656E61626C65645F696E737472756D656E74732C2074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F696E737472756D656E74733B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently enabled instruments.\n             Parameters\n             None\n             Example\n             mysql> CALL sys.ps_setup_show_enabled_instruments();\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354206E616D6520415320656E61626C65645F696E737472756D656E74732C2074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F696E737472756D656E74733B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_save', 'PROCEDURE', 'ps_setup_save', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F74696D656F757420494E540A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Saves the current configuration of Performance Schema,\n             so that you can alter the setup for debugging purposes,\n             but restore it to a previous state.\n             Use the companion procedure - ps_setup_reload_saved(), to\n             restore the saved config.\n             The named lock \"sys.ps_setup_save\" is taken before the\n             current configuration is saved. If the attempt to get the named\n             lock times out, an error occurs.\n             The lock is released after the settings have been restored by\n             calling ps_setup_reload_saved().\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Parameters\n             in_timeout INT\n               The timeout in seconds used when trying to obtain the lock.\n               A negative timeout means infinite timeout.\n             Example\n             mysql> CALL sys.ps_setup_save(-1);\n             Query OK, 0 rows affected (0.08 sec)\n             mysql> UPDATE performance_schema.setup_instruments\n                 ->    SET enabled = \'YES\', timed = \'YES\';\n             Query OK, 547 rows affected (0.40 sec)\n             Rows matched: 784  Changed: 547  Warnings: 0\n             /* Run some tests that need more detailed instrumentation here */\n             mysql> CALL sys.ps_setup_reload_saved();\n             Query OK, 0 rows affected (0.32 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_disabled_consumers', 'PROCEDURE', 'ps_setup_show_disabled_consumers', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', '', '', 0x424547494E0A2020202053454C454354206E616D652041532064697361626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F636F6E73756D6572733B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently disabled consumers.\n             Parameters\n             None\n             Example\n             mysql> CALL sys.ps_setup_show_disabled_consumers();\n             +---------------------------+\n             | disabled_consumers        |\n             +---------------------------+\n             | events_statements_current |\n             | global_instrumentation    |\n             | thread_instrumentation    |\n             | statements_digest         |\n             +---------------------------+\n             4 rows in set (0.05 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354206E616D652041532064697361626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F636F6E73756D6572733B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'statement_performance_analyzer', 'PROCEDURE', 'statement_performance_analyzer', 'SQL', 'CONTAINS_SQL', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F616374696F6E20454E554D2827736E617073686F74272C20276F766572616C6C272C202764656C7461272C20276372656174655F7461626C65272C20276372656174655F746D70272C202773617665272C2027636C65616E757027292C0A2020202020202020494E20696E5F7461626C65205641524348415228313239292C0A2020202020202020494E20696E5F766965777320534554202827776974685F72756E74696D65735F696E5F393574685F70657263656E74696C65272C2027616E616C79736973272C2027776974685F6572726F72735F6F725F7761726E696E6773272C2027776974685F66756C6C5F7461626C655F7363616E73272C2027776974685F736F7274696E67272C2027776974685F74656D705F7461626C6573272C2027637573746F6D27290A20202020, '', mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Create a report of the statements running on the server.\n             The views are calculated based on the overall and/or delta activity.\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Parameters\n             in_action (ENUM(\'snapshot\', \'overall\', \'delta\', \'create_tmp\', \'create_table\', \'save\', \'cleanup\')):\n               The action to take. Supported actions are:\n                 * snapshot      Store a snapshot. The default is to make a snapshot of the current content of\n                                 performance_schema.events_statements_summary_by_digest, but by setting in_table\n                                 this can be overwritten to copy the content of the specified table.\n                                 The snapshot is stored in the sys.tmp_digests temporary table.\n                 * overall       Generate analyzis based on the content specified by in_table. For the overall analyzis,\n                                 in_table can be NOW() to use a fresh snapshot. This will overwrite an existing snapshot.\n                                 Use NULL for in_table to use the existing snapshot. If in_table IS NULL and no snapshot\n                                 exists, a new will be created.\n                                 See also in_views and @sys.statement_performance_analyzer.limit.\n                 * delta         Generate a delta analysis. The delta will be calculated between the reference table in\n                                 in_table and the snapshot. An existing snapshot must exist.\n                                 The action uses the sys.tmp_digests_delta temporary table.\n                                 See also in_views and @sys.statement_performance_analyzer.limit.\n                 * create_table  Create a regular table suitable for storing the snapshot for later use, e.g. for\n                                 calculating deltas.\n                 * create_tmp    Create a temporary table suitable for storing the snapshot for later use, e.g. for\n                                 calculating deltas.\n                 * save          Save the snapshot in the table specified by in_table. The table must exists and have\n                                 the correct structure.\n                                 If no snapshot exists, a new is created.\n                 * cleanup       Remove the temporary tables used for the snapshot and delta.\n             in_table (VARCHAR(129)):\n               The table argument used for some actions. Use the format \'db1.t1\' or \'t1\' without using any backticks (`)\n               for quoting. Periods (.) are not supported in the database and table names.\n               The meaning of the table for each action supporting the argument is:\n                 * snapshot      The snapshot is created based on the specified table. Set to NULL or NOW() to use\n                                 the current content of performance_schema.events_statements_summary_by_digest.\n                 * overall       The table with the content to create the overall analyzis for. The following values\n                                 can be used:\n                                   - A table name - use the content of that table.\n                                   - NOW()        - create a fresh snapshot and overwrite the existing snapshot.\n                                   - NULL         - use the last stored snapshot.\n                 * delta         The table name is mandatory and specified the reference view to compare the currently\n                                 stored snapshot against. If no snapshot exists, a new will be created.\n                 * create_table  The name of the regular table to create.\n                 * create_tmp    The name of the temporary table to create.\n                 * save          The name of the table to save the currently stored snapshot into.\n             in_views (SET (\'with_runtimes_in_95th_percentile\', \'analysis\', \'with_errors_or_warnings\',\n                            \'with_full_table_scans\', \'with_sorting\', \'with_temp_tables\', \'custom\'))\n               Which views to include:\n                 * with_runtimes_in_95th_percentile  Based on the sys.statements_with_runtimes_in_95th_percentile view\n                 * analysis                          Based on the sys.statement_analysis view\n                 * with_errors_or_warnings           Based on the sys.statements_with_errors_or_warnings view\n                 * with_full_table_scans             Based on the sys.statements_with_full_table_scans view\n                 * with_sorting                      Based on the sys.statements_with_sorting view\n                 * with_temp_tables                  Based on the sys.statements_with_temp_tables view\n                 * custom                            Use a custom view. This view must be specified in @sys.statement_performance_analyzer.view to an existing view or a query\n             Default is to include all except \'custom\'.\n             Configuration Options\n             sys.statement_performance_analyzer.limit\n               The maximum number of rows to include for the views that does not have a built-in limit (e.g. the 95th percentile view).\n               If not set the limit is 100.\n             sys.statement_performance_analyzer.view\n               Used together with the \'custom\' view. If the value contains a space, it is considered a query, otherwise it must be\n               an existing view querying the performance_schema.events_statements_summary_by_digest table. There cannot be any limit\n               clause including in the query or view definition if @sys.statement_performance_analyzer.limit > 0.\n               If specifying a view, use the same format as for in_table.\n             sys.debug\n               Whether to provide debugging output.\n               Default is \'OFF\'. Set to \'ON\' to include.\n             Example\n             To create a report with the queries in the 95th percentile since last truncate of performance_schema.events_statements_summary_by_digest\n             and the delta for a 1 minute period:\n                1. Create a temporary table to store the initial snapshot.\n                2. Create the initial snapshot.\n                3. Save the initial snapshot in the temporary table.\n                4. Wait one minute.\n                5. Create a new snapshot.\n                6. Perform analyzis based on the new snapshot.\n                7. Perform analyzis based on the delta between the initial and new snapshots.\n             mysql> CALL sys.statement_performance_analyzer(\'create_tmp\', \'mydb.tmp_digests_ini\', NULL);\n             Query OK, 0 rows affected (0.08 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL);\n             Query OK, 0 rows affected (0.02 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'save\', \'mydb.tmp_digests_ini\', NULL);\n             Query OK, 0 rows affected (0.00 sec)\n             mysql> DO SLEEP(60);\n             Query OK, 0 rows affected (1 min 0.00 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL);\n             Query OK, 0 rows affected (0.02 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'overall\', NULL, \'with_runtimes_in_95th_percentile\');\n             +-----------------------------------------+\n             | Next Output                             |\n             +-----------------------------------------+\n             | Queries with Runtime in 95th Percentile |\n             +-----------------------------------------+\n             1 row in set (0.05 sec)\n             ...\n             mysql> CALL sys.statement_performance_analyzer(\'delta\', \'mydb.tmp_digests_ini\', \'with_runtimes_in_95th_percentile\');\n             +-----------------------------------------+\n             | Next Output                             |\n             +-----------------------------------------+\n             | Queries with Runtime in 95th Percentile |\n             +-----------------------------------------+\n             1 row in set (0.03 sec)\n             ...\n             To create an overall report of the 95th percentile queries and the top 10 queries with full table scans:\n             mysql> CALL sys.statement_performance_analyzer(\'snapshot\', NULL, NULL);\n             Query OK, 0 rows affected (0.01 sec)\n             mysql> SET @sys.statement_performance_analyzer.limit = 10;\n             Query OK, 0 rows affected (0.00 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'overall\', NULL, \'with_runtimes_in_95th_percentile,with_full_table_scans\');\n             +-----------------------------------------+\n             | Next Output                             |\n             +-----------------------------------------+\n             | Queries with Runtime in 95th Percentile |\n             +-----------------------------------------+\n             1 row in set (0.01 sec)\n             ...\n             +-------------------------------------+\n             | Next Output                         |\n             +-------------------------------------+\n             | Top 10 Queries with Full Table Scan |\n             +-------------------------------------+\n             1 row in set (0.09 sec)\n             ...\n             Use a custom view showing the top 10 query sorted by total execution time refreshing the view every minute using\n             the watch command in Linux.\n             mysql> CREATE OR REPLACE VIEW mydb.my_statements AS\n                 -> SELECT sys.format_statement(DIGEST_TEXT) AS query,\n                 ->        SCHEMA_NAME AS db,\n                 ->        COUNT_STAR AS exec_count,\n                 ->        sys.format_time(SUM_TIMER_WAIT) AS total_latency,\n                 ->        sys.format_time(AVG_TIMER_WAIT) AS avg_latency,\n                 ->        ROUND(IFNULL(SUM_ROWS_SENT / NULLIF(COUNT_STAR, 0), 0)) AS rows_sent_avg,\n                 ->        ROUND(IFNULL(SUM_ROWS_EXAMINED / NULLIF(COUNT_STAR, 0), 0)) AS rows_examined_avg,\n                 ->        ROUND(IFNULL(SUM_ROWS_AFFECTED / NULLIF(COUNT_STAR, 0), 0)) AS rows_affected_avg,\n                 ->        DIGEST AS digest\n                 ->   FROM performance_schema.events_statements_summary_by_digest\n                 -> ORDER BY SUM_TIMER_WAIT DESC;\n             Query OK, 0 rows affected (0.01 sec)\n             mysql> CALL sys.statement_performance_analyzer(\'create_table\', \'mydb.digests_prev\', NULL);\n             Query OK, 0 rows affected (0.10 sec)\n             shell$ watch -n 60 \"mysql sys --table -e \"\n             > SET @sys.statement_performance_analyzer.view = \'mydb.my_statements\';\n             > SET @sys.statement_performance_analyzer.limit = 10;\n             > CALL statement_performance_analyzer(\'snapshot\', NULL, NULL);\n             > CALL statement_performance_analyzer(\'delta\', \'mydb.digests_prev\', \'custom\');\n             > CALL statement_performance_analyzer(\'save\', \'mydb.digests_prev\', NULL);\n             > \"\"\n             Every 60.0s: mysql sys --table -e \"                                                                                                   ...  Mon Dec 22 10:58:51 2014\n             +----------------------------------+\n             | Next Output                      |\n             +----------------------------------+\n             | Top 10 Queries Using Custom View |\n             +----------------------------------+\n             +-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n             | query             | db    | exec_count | total_latency | avg_latency | rows_sent_avg | rows_examined_avg | rows_affected_avg | digest                           |\n             +-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n             ...\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'table_exists', 'PROCEDURE', 'table_exists', 'SQL', 'CONTAINS_SQL', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F64622056415243484152283634292C20494E20696E5F7461626C652056415243484152283634292C0A20202020202020204F5554206F75745F65786973747320454E554D2827272C202742415345205441424C45272C202756494557272C202754454D504F52415259272C202753455155454E4345272C202753595354454D205649455727290A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Tests whether the table specified in in_db and in_table exists either as a regular\n             table, or as a temporary table. The returned value corresponds to the table that\n             will be used, so if there\'s both a temporary and a permanent table with the given\n             name, then \'TEMPORARY\' will be returned.\n             Parameters\n             in_db (VARCHAR(64)):\n               The database name to check for the existence of the table in.\n             in_table (VARCHAR(64)):\n               The name of the table to check the existence of.\n             out_exists ENUM(\'\', \'BASE TABLE\', \'VIEW\', \'TEMPORARY\'):\n               The return value: whether the table exists. The value is one of:\n                 * \'\'             - the table does not exist neither as a base table, view, sequence nor temporary table.\n                 * \'BASE TABLE\'   - the table name exists as a permanent base table table.\n                 * \'VIEW\'         - the table name exists as a view.\n                 * \'TEMPORARY\'    - the table name exists as a temporary table.\n                 * \'SEQUENCE\'     - the table name exists as a sequence.\n                 * \'SYSTEM VIEW\'  - the table name exists as a system view.\n             Example\n             mysql> CREATE DATABASE db1;\n             Query OK, 1 row affected (0.07 sec)\n             mysql> use db1;\n             Database changed\n             mysql> CREATE TABLE t1 (id INT PRIMARY KEY);\n             Query OK, 0 rows affected (0.08 sec)\n             mysql> CREATE TABLE t2 (id INT PRIMARY KEY);\n             Query OK, 0 rows affected (0.08 sec)\n             mysql> CREATE view v_t1 AS SELECT * FROM t1;\n             Query OK, 0 rows affected (0.00 sec)\n             mysql> CREATE TEMPORARY TABLE t1 (id INT PRIMARY KEY);\n             Query OK, 0 rows affected (0.00 sec)\n             mysql> CALL sys.table_exists(\'db1\', \'t1\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.00 sec)\n             +------------+\n             | @exists    |\n             +------------+\n             | TEMPORARY  |\n             +------------+\n             1 row in set (0.00 sec)\n             mysql> CALL sys.table_exists(\'db1\', \'t2\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.00 sec)\n             +------------+\n             | @exists    |\n             +------------+\n             | BASE TABLE |\n             +------------+\n             1 row in set (0.01 sec)\n             mysql> CALL sys.table_exists(\'db1\', \'v_t1\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.00 sec)\n             +---------+\n             | @exists |\n             +---------+\n             | VIEW    |\n             +---------+\n             1 row in set (0.00 sec)\n             MariaDB [sys]> CALL sys.table_exists(\'db1\', \'s\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.006 sec)\n             +----------+\n             | @exists  |\n             +----------+\n             | SEQUENCE |\n             +----------+\n             1 row in set (0.000 sec)\n             MariaDB [sys]> CALL table_exists(\'information_schema\', \'user_variables\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.003 sec)\n             +-------------+\n             | @exists     |\n             +-------------+\n             | SYSTEM VIEW |\n             +-------------+\n             1 row in set (0.001 sec)\n             mysql> CALL sys.table_exists(\'db1\', \'t3\', @exists); SELECT @exists;\n             Query OK, 0 rows affected (0.01 sec)\n             +---------+\n             | @exists |\n             +---------+\n             |         |\n             +---------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('account', 'login', 'PROCEDURE', 'login', 'SQL', 'CONTAINS_SQL', 'NO', 'DEFINER', 0x494E20606C6F67696E60207661726368617228323536292C494E206070617373776F72646020766172636861722832353629, '', 0x424547494E0D0A090D0A0953454C454354206163636F756E742E6163636F756E742E2A2046524F4D206163636F756E742E6163636F756E74204C494D495420313B0D0A0D0A454E44, 'loli@%', '2024-06-05 17:17:56', '2024-06-05 17:17:56', 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION', '', 'utf8mb4', 'utf8mb4_general_ci', 'latin1_swedish_ci', 0x424547494E0D0A090D0A0953454C454354206163636F756E742E6163636F756E742E2A2046524F4D206163636F756E742E6163636F756E74204C494D495420313B0D0A0D0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('web', 'thorwException', 'PROCEDURE', 'thorwException', 'SQL', 'CONTAINS_SQL', 'NO', 'DEFINER', 0x494E2060746578746020766172636861722832353629, '', 0x424547494E0D0A090D0A095349474E414C2053514C535441544520273435303030270D0A2020534554204D4553534147455F54455854203D206074657874603B0D0A0D0A454E44, 'loli@%', '2024-06-05 17:46:48', '2024-06-05 17:46:48', 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION', '', 'utf8mb4', 'utf8mb4_general_ci', 'latin1_swedish_ci', 0x424547494E0D0A090D0A095349474E414C2053514C535441544520273435303030270D0A2020534554204D4553534147455F54455854203D206074657874603B0D0A0D0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_disabled', 'PROCEDURE', 'ps_setup_show_disabled', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F73686F775F696E737472756D656E747320424F4F4C45414E2C0A2020202020202020494E20696E5F73686F775F7468726561647320424F4F4C45414E0A20202020, '', 0x424547494E0A2020202053454C454354204040706572666F726D616E63655F736368656D6120415320706572666F726D616E63655F736368656D615F656E61626C65643B0A202020200A2020202053454C454354206F626A6563745F747970652C0A2020202020202020202020434F4E434154286F626A6563745F736368656D612C20272E272C206F626A6563745F6E616D6529204153206F626A656374732C0A2020202020202020202020656E61626C65642C0A202020202020202020202074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F6F626A656374730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F52444552204259206F626A6563745F747970652C206F626A656374733B0A2020202053454C454354206E616D652041532064697361626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F636F6E73756D6572733B0A2020202049462028696E5F73686F775F7468726561647329205448454E0A202020202020202053454C454354204946286E616D65203D20277468726561642F73716C2F6F6E655F636F6E6E656374696F6E272C0A202020202020202020202020202020202020434F4E4341542870726F636573736C6973745F757365722C202740272C2070726F636573736C6973745F686F7374292C0A2020202020202020202020202020202020205245504C414345286E616D652C20277468726561642F272C20272729292041532064697361626C65645F746872656164732C0A202020202020202054595045204153207468726561645F747970650A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E746872656164730A202020202020202020574845524520494E535452554D454E544544203D20274E4F270A2020202020202020204F524445522042592064697361626C65645F746872656164733B0A20202020454E442049463B0A2020202049462028696E5F73686F775F696E737472756D656E747329205448454E0A202020202020202053454C454354206E616D652041532064697361626C65645F696E737472756D656E74732C0A20202020202020202020202020202074696D65640A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A202020202020202020574845524520656E61626C6564203D20274E4F270A2020202020202020204F524445522042592064697361626C65645F696E737472756D656E74733B0A20202020454E442049463B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently disable Performance Schema configuration.\n             Disabled users is only available for MySQL 5.7.6 and later.\n             In earlier versions it was only possible to enable users.\n             Parameters\n             in_show_instruments (BOOLEAN):\n               Whether to print disabled instruments (can print many items)\n             in_show_threads (BOOLEAN):\n               Whether to print disabled threads\n             Example\n             mysql> CALL sys.ps_setup_show_disabled(TRUE, TRUE);\n             +----------------------------+\n             | performance_schema_enabled |\n             +----------------------------+\n             |                          1 |\n             +----------------------------+\n             1 row in set (0.00 sec)\n             +--------------------+\n             | disabled_users     |\n             +--------------------+\n             | \'mark\'@\'localhost\' |\n             +--------------------+\n             1 row in set (0.00 sec)\n             +-------------+----------------------+---------+-------+\n             | object_type | objects              | enabled | timed |\n             +-------------+----------------------+---------+-------+\n             | EVENT       | mysql.%              | NO      | NO    |\n             | EVENT       | performance_schema.% | NO      | NO    |\n             | EVENT       | information_schema.% | NO      | NO    |\n             | FUNCTION    | mysql.%              | NO      | NO    |\n             | FUNCTION    | performance_schema.% | NO      | NO    |\n             | FUNCTION    | information_schema.% | NO      | NO    |\n             | PROCEDURE   | mysql.%              | NO      | NO    |\n             | PROCEDURE   | performance_schema.% | NO      | NO    |\n             | PROCEDURE   | information_schema.% | NO      | NO    |\n             | TABLE       | mysql.%              | NO      | NO    |\n             | TABLE       | performance_schema.% | NO      | NO    |\n             | TABLE       | information_schema.% | NO      | NO    |\n             | TRIGGER     | mysql.%              | NO      | NO    |\n             | TRIGGER     | performance_schema.% | NO      | NO    |\n             | TRIGGER     | information_schema.% | NO      | NO    |\n             +-------------+----------------------+---------+-------+\n             15 rows in set (0.00 sec)\n             +----------------------------------+\n             | disabled_consumers               |\n             +----------------------------------+\n             | events_stages_current            |\n             | events_stages_history            |\n             | events_stages_history_long       |\n             | events_statements_history        |\n             | events_statements_history_long   |\n             | events_transactions_history      |\n             | events_transactions_history_long |\n             | events_waits_current             |\n             | events_waits_history             |\n             | events_waits_history_long        |\n             +----------------------------------+\n             10 rows in set (0.00 sec)\n             Empty set (0.00 sec)\n             +---------------------------------------------------------------------------------------+-------+\n             | disabled_instruments                                                                  | timed |\n             +---------------------------------------------------------------------------------------+-------+\n             | wait/synch/mutex/sql/TC_LOG_MMAP::LOCK_tc                                             | NO    |\n             | wait/synch/mutex/sql/LOCK_des_key_file                                                | NO    |\n             | wait/synch/mutex/sql/MYSQL_BIN_LOG::LOCK_commit                                       | NO    |\n             ...\n             | memory/sql/servers_cache                                                              | NO    |\n             | memory/sql/udf_mem                                                                    | NO    |\n             | wait/lock/metadata/sql/mdl                                                            | NO    |\n             +---------------------------------------------------------------------------------------+-------+\n             547 rows in set (0.00 sec)\n             Query OK, 0 rows affected (0.01 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354204040706572666F726D616E63655F736368656D6120415320706572666F726D616E63655F736368656D615F656E61626C65643B0A202020200A2020202053454C454354206F626A6563745F747970652C0A2020202020202020202020434F4E434154286F626A6563745F736368656D612C20272E272C206F626A6563745F6E616D6529204153206F626A656374732C0A2020202020202020202020656E61626C65642C0A202020202020202020202074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F6F626A656374730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F52444552204259206F626A6563745F747970652C206F626A656374733B0A2020202053454C454354206E616D652041532064697361626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D20274E4F270A20202020204F524445522042592064697361626C65645F636F6E73756D6572733B0A2020202049462028696E5F73686F775F7468726561647329205448454E0A202020202020202053454C454354204946286E616D65203D20277468726561642F73716C2F6F6E655F636F6E6E656374696F6E272C0A202020202020202020202020202020202020434F4E4341542870726F636573736C6973745F757365722C202740272C2070726F636573736C6973745F686F7374292C0A2020202020202020202020202020202020205245504C414345286E616D652C20277468726561642F272C20272729292041532064697361626C65645F746872656164732C0A202020202020202054595045204153207468726561645F747970650A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E746872656164730A202020202020202020574845524520494E535452554D454E544544203D20274E4F270A2020202020202020204F524445522042592064697361626C65645F746872656164733B0A20202020454E442049463B0A2020202049462028696E5F73686F775F696E737472756D656E747329205448454E0A202020202020202053454C454354206E616D652041532064697361626C65645F696E737472756D656E74732C0A20202020202020202020202020202074696D65640A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A202020202020202020574845524520656E61626C6564203D20274E4F270A2020202020202020204F524445522042592064697361626C65645F696E737472756D656E74733B0A20202020454E442049463B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_enabled', 'PROCEDURE', 'ps_setup_show_enabled', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x0A2020202020202020494E20696E5F73686F775F696E737472756D656E747320424F4F4C45414E2C0A2020202020202020494E20696E5F73686F775F7468726561647320424F4F4C45414E0A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently enabled Performance Schema configuration.\n             Parameters\n             in_show_instruments (BOOLEAN):\n               Whether to print enabled instruments (can print many items)\n             in_show_threads (BOOLEAN):\n               Whether to print enabled threads\n             Example\n             mysql> CALL sys.ps_setup_show_enabled(TRUE, TRUE);\n             +----------------------------+\n             | performance_schema_enabled |\n             +----------------------------+\n             |                          1 |\n             +----------------------------+\n             1 row in set (0.00 sec)\n             +---------------+\n             | enabled_users |\n             +---------------+\n             | \'%\'@\'%\'       |\n             +---------------+\n             1 row in set (0.01 sec)\n             +-------------+---------+---------+-------+\n             | object_type | objects | enabled | timed |\n             +-------------+---------+---------+-------+\n             | EVENT       | %.%     | YES     | YES   |\n             | FUNCTION    | %.%     | YES     | YES   |\n             | PROCEDURE   | %.%     | YES     | YES   |\n             | TABLE       | %.%     | YES     | YES   |\n             | TRIGGER     | %.%     | YES     | YES   |\n             +-------------+---------+---------+-------+\n             5 rows in set (0.01 sec)\n             +---------------------------+\n             | enabled_consumers         |\n             +---------------------------+\n             | events_statements_current |\n             | global_instrumentation    |\n             | thread_instrumentation    |\n             | statements_digest         |\n             +---------------------------+\n             4 rows in set (0.05 sec)\n             +---------------------------------+-------------+\n             | enabled_threads                 | thread_type |\n             +---------------------------------+-------------+\n             | sql/main                        | BACKGROUND  |\n             | sql/thread_timer_notifier       | BACKGROUND  |\n             | innodb/io_ibuf_thread           | BACKGROUND  |\n             | innodb/io_log_thread            | BACKGROUND  |\n             | innodb/io_read_thread           | BACKGROUND  |\n             | innodb/io_read_thread           | BACKGROUND  |\n             | innodb/io_write_thread          | BACKGROUND  |\n             | innodb/io_write_thread          | BACKGROUND  |\n             | innodb/page_cleaner_thread      | BACKGROUND  |\n             | innodb/srv_lock_timeout_thread  | BACKGROUND  |\n             | innodb/srv_error_monitor_thread | BACKGROUND  |\n             | innodb/srv_monitor_thread       | BACKGROUND  |\n             | innodb/srv_master_thread        | BACKGROUND  |\n             | innodb/srv_purge_thread         | BACKGROUND  |\n             | innodb/srv_worker_thread        | BACKGROUND  |\n             | innodb/srv_worker_thread        | BACKGROUND  |\n             | innodb/srv_worker_thread        | BACKGROUND  |\n             | innodb/buf_dump_thread          | BACKGROUND  |\n             | innodb/dict_stats_thread        | BACKGROUND  |\n             | sql/signal_handler              | BACKGROUND  |\n             | sql/compress_gtid_table         | FOREGROUND  |\n             | root@localhost                  | FOREGROUND  |\n             +---------------------------------+-------------+\n             22 rows in set (0.01 sec)\n             +-------------------------------------+-------+\n             | enabled_instruments                 | timed |\n             +-------------------------------------+-------+\n             | wait/io/file/sql/map                | YES   |\n             | wait/io/file/sql/binlog             | YES   |\n             ...\n             | statement/com/Error                 | YES   |\n             | statement/com/                      | YES   |\n             | idle                                | YES   |\n             +-------------------------------------+-------+\n             210 rows in set (0.08 sec)\n             Query OK, 0 rows affected (0.89 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354204040706572666F726D616E63655F736368656D6120415320706572666F726D616E63655F736368656D615F656E61626C65643B0A2020202053454C45435420434F4E43415428272727272C20757365722C20272727402727272C20686F73742C20272727272920415320656E61626C65645F75736572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F6163746F72730A202020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F75736572733B0A2020202053454C454354206F626A6563745F747970652C0A2020202020202020202020434F4E434154286F626A6563745F736368656D612C20272E272C206F626A6563745F6E616D6529204153206F626A656374732C0A2020202020202020202020656E61626C65642C0A202020202020202020202074696D65640A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F6F626A656374730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F52444552204259206F626A6563745F747970652C206F626A656374733B0A2020202053454C454354206E616D6520415320656E61626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F636F6E73756D6572733B0A2020202049462028696E5F73686F775F7468726561647329205448454E0A202020202020202053454C454354204946286E616D65203D20277468726561642F73716C2F6F6E655F636F6E6E656374696F6E272C0A202020202020202020202020202020202020434F4E4341542870726F636573736C6973745F757365722C202740272C2070726F636573736C6973745F686F7374292C0A2020202020202020202020202020202020205245504C414345286E616D652C20277468726561642F272C202727292920415320656E61626C65645F746872656164732C0A202020202020202054595045204153207468726561645F747970650A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E746872656164730A202020202020202020574845524520494E535452554D454E544544203D20275945532720414E44206E616D65203C3E20277468726561642F696E6E6F64622F7468726561645F706F6F6C5F746872656164270A2020202020202020204F5244455220425920656E61626C65645F746872656164733B0A20202020454E442049463B0A2020202049462028696E5F73686F775F696E737472756D656E747329205448454E0A202020202020202053454C454354206E616D6520415320656E61626C65645F696E737472756D656E74732C0A20202020202020202020202020202074696D65640A2020202020202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F696E737472756D656E74730A202020202020202020574845524520656E61626C6564203D2027594553270A2020202020202020204F5244455220425920656E61626C65645F696E737472756D656E74733B0A20202020454E442049463B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_show_enabled_consumers', 'PROCEDURE', 'ps_setup_show_enabled_consumers', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', '', '', 0x424547494E0A2020202053454C454354206E616D6520415320656E61626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F636F6E73756D6572733B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Shows all currently enabled consumers.\n             Parameters\n             None\n             Example\n             mysql> CALL sys.ps_setup_show_enabled_consumers();\n             +---------------------------+\n             | enabled_consumers         |\n             +---------------------------+\n             | events_statements_current |\n             | global_instrumentation    |\n             | thread_instrumentation    |\n             | statements_digest         |\n             +---------------------------+\n             4 rows in set (0.05 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202053454C454354206E616D6520415320656E61626C65645F636F6E73756D6572730A20202020202046524F4D20706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020574845524520656E61626C6564203D2027594553270A20202020204F5244455220425920656E61626C65645F636F6E73756D6572733B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'create_synonym_db', 'PROCEDURE', 'create_synonym_db', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F64625F6E616D652056415243484152283634292C0A2020202020202020494E20696E5F73796E6F6E796D2056415243484152283634290A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a source database name and synonym name, and then creates the\n             synonym database with views that point to all of the tables within\n             the source database.\n             Useful for creating a \"ps\" synonym for \"performance_schema\",\n             or \"is\" instead of \"information_schema\", for example.\n             Parameters\n             in_db_name (VARCHAR(64)):\n               The database name that you would like to create a synonym for.\n             in_synonym (VARCHAR(64)):\n               The database synonym name.\n             Example\n             mysql> SHOW DATABASES;\n             +--------------------+\n             | Database           |\n             +--------------------+\n             | information_schema |\n             | mysql              |\n             | performance_schema |\n             | sys                |\n             | test               |\n             +--------------------+\n             5 rows in set (0.00 sec)\n             mysql> CALL sys.create_synonym_db(\'performance_schema\', \'ps\');\n             +---------------------------------------+\n             | summary                               |\n             +---------------------------------------+\n             | Created 74 views in the `ps` database |\n             +---------------------------------------+\n             1 row in set (8.57 sec)\n             Query OK, 0 rows affected (8.57 sec)\n             mysql> SHOW DATABASES;\n             +--------------------+\n             | Database           |\n             +--------------------+\n             | information_schema |\n             | mysql              |\n             | performance_schema |\n             | ps                 |\n             | sys                |\n             | test               |\n             +--------------------+\n             6 rows in set (0.00 sec)\n             mysql> SHOW FULL TABLES FROM ps;\n             +------------------------------------------------------+------------+\n             | Tables_in_ps                                         | Table_type |\n             +------------------------------------------------------+------------+\n             | accounts                                             | VIEW       |\n             | cond_instances                                       | VIEW       |\n             | events_stages_current                                | VIEW       |\n             | events_stages_history                                | VIEW       |\n             ...\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'diagnostics', 'PROCEDURE', 'diagnostics', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F6D61785F72756E74696D6520696E7420756E7369676E65642C20494E20696E5F696E74657276616C20696E7420756E7369676E65642C0A2020202020202020494E20696E5F6175746F5F636F6E66696720656E756D20282763757272656E74272C20276D656469756D272C202766756C6C27290A20202020, '', mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Create a report of the current status of the server for diagnostics purposes. Data collected includes (some items depends on versions and settings):\n                * The GLOBAL VARIABLES\n                * Several sys schema views including metrics or equivalent (depending on version and settings)\n                * Queries in the 95th percentile\n                * Several ndbinfo views for MySQL Cluster\n                * Replication (both master and slave) information.\n             Some of the sys schema views are calculated as initial (optional), overall, delta:\n                * The initial view is the content of the view at the start of this procedure.\n                  This output will be the same as the the start values used for the delta view.\n                  The initial view is included if @sys.diagnostics.include_raw = \'ON\'.\n                * The overall view is the content of the view at the end of this procedure.\n                  This output is the same as the end values used for the delta view.\n                  The overall view is always included.\n                * The delta view is the difference from the beginning to the end. Note that for min and max values\n                  they are simply the min or max value from the end view respectively, so does not necessarily reflect\n                  the minimum/maximum value in the monitored period.\n                  Note: except for the metrics views the delta is only calculation between the first and last outputs.\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Versions supported:\n                * MySQL 5.6: 5.6.10 and later\n                * MySQL 5.7: 5.7.9 and later\n             Parameters\n             in_max_runtime (INT UNSIGNED):\n               The maximum time to keep collecting data.\n               Use NULL to get the default which is 60 seconds, otherwise enter a value greater than 0.\n             in_interval (INT UNSIGNED):\n               How long to sleep between data collections.\n               Use NULL to get the default which is 30 seconds, otherwise enter a value greater than 0.\n             in_auto_config (ENUM(\'current\', \'medium\', \'full\'))\n               Automatically enable Performance Schema instruments and consumers.\n               NOTE: The more that are enabled, the more impact on the performance.\n               Supported values are:\n                  * current - use the current settings.\n                  * medium - enable some settings.\n                  * full - enables all settings. This will have a big impact on the\n                           performance - be careful using this option.\n               If another setting the \'current\' is chosen, the current settings\n               are restored at the end of the procedure.\n             Configuration Options\n             sys.diagnostics.allow_i_s_tables\n               Specifies whether it is allowed to do table scan queries on information_schema.TABLES. This can be expensive if there\n               are many tables. Set to \'ON\' to allow, \'OFF\' to not allow.\n               Default is \'OFF\'.\n             sys.diagnostics.include_raw\n               Set to \'ON\' to include the raw data (e.g. the original output of \"SELECT * FROM sys.metrics\").\n               Use this to get the initial values of the various views.\n               Default is \'OFF\'.\n             sys.statement_truncate_len\n               How much of queries in the process list output to include.\n               Default is 64.\n             sys.debug\n               Whether to provide debugging output.\n               Default is \'OFF\'. Set to \'ON\' to include.\n             Example\n             To create a report and append it to the file diag.out:\n             mysql> TEE diag.out;\n             mysql> CALL sys.diagnostics(120, 30, \'current\');\n             ...\n             mysql> NOTEE;\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_truncate_all_tables', 'PROCEDURE', 'ps_truncate_all_tables', 'SQL', 'MODIFIES_SQL_DATA', 'YES', 'INVOKER', 0x0A2020202020202020494E20696E5F766572626F736520424F4F4C45414E0A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Truncates all summary tables within Performance Schema,\n             resetting all aggregated instrumentation as a snapshot.\n             Parameters\n             in_verbose (BOOLEAN):\n               Whether to print each TRUNCATE statement before running\n             Example\n             mysql> CALL sys.ps_truncate_all_tables(false);\n             +---------------------+\n             | summary             |\n             +---------------------+\n             | Truncated 44 tables |\n             +---------------------+\n             1 row in set (0.10 sec)\n             Query OK, 0 rows affected (0.10 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_is_instrument_default_enabled', 'FUNCTION', 'ps_is_instrument_default_enabled', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x696E5F696E737472756D656E74205641524348415228313238290A20202020, 0x656E756D2827594553272C274E4F2729204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns whether an instrument is enabled by default in this version of MySQL.\n             Parameters\n             in_instrument VARCHAR(128):\n               The instrument to check.\n             Returns\n             ENUM(\'YES\', \'NO\')\n             Example\n             mysql> SELECT sys.ps_is_instrument_default_enabled(\'statement/sql/select\');\n             +--------------------------------------------------------------+\n             | sys.ps_is_instrument_default_enabled(\'statement/sql/select\') |\n             +--------------------------------------------------------------+\n             | YES                                                          |\n             +--------------------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A202020204445434C41524520765F656E61626C656420454E554D2827594553272C20274E4F27293B0A2020202053455420765F656E61626C6564203D20494628696E5F696E737472756D656E74204C494B452027776169742F696F2F66696C652F25270A2020202020202020202020202020202020202020202020204F5220696E5F696E737472756D656E74204C494B452027776169742F696F2F7461626C652F25270A2020202020202020202020202020202020202020202020204F5220696E5F696E737472756D656E74204C494B45202773746174656D656E742F25270A2020202020202020202020202020202020202020202020204F5220696E5F696E737472756D656E74204C494B4520276D656D6F72792F706572666F726D616E63655F736368656D612F25270A2020202020202020202020202020202020202020202020204F5220696E5F696E737472756D656E7420494E202827776169742F6C6F636B2F7461626C652F73716C2F68616E646C6572272C202769646C6527290A2020202020202020202020202020200A202020202020202020202020202020202020202020202C0A202020202020202020202020202020202020202020202027594553272C0A2020202020202020202020202020202020202020202020274E4F270A2020202020202020202020202020202020202020293B0A2020202052455455524E20765F656E61626C65643B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_statement_avg_latency_histogram', 'PROCEDURE', 'ps_statement_avg_latency_histogram', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', '', '', mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Outputs a textual histogram graph of the average latency values\n             across all normalized queries tracked within the Performance Schema\n             events_statements_summary_by_digest table.\n             Can be used to show a very high level picture of what kind of\n             latency distribution statements running within this instance have.\n             Parameters\n             None.\n             Example\n             mysql> CALL sys.ps_statement_avg_latency_histogram()\\G\n             *************************** 1. row ***************************\n             Performance Schema Statement Digest Average Latency Histogram:\n               . = 1 unit\n               * = 2 units\n               # = 3 units\n             (0 - 38ms)     240 | ################################################################################\n             (38 - 77ms)    38  | ......................................\n             (77 - 115ms)   3   | ...\n             (115 - 154ms)  62  | *******************************\n             (154 - 192ms)  3   | ...\n             (192 - 231ms)  0   |\n             (231 - 269ms)  0   |\n             (269 - 307ms)  0   |\n             (307 - 346ms)  0   |\n             (346 - 384ms)  1   | .\n             (384 - 423ms)  1   | .\n             (423 - 461ms)  0   |\n             (461 - 499ms)  0   |\n             (499 - 538ms)  0   |\n             (538 - 576ms)  0   |\n             (576 - 615ms)  1   | .\n               Total Statements: 350; Buckets: 16; Bucket Size: 38 ms;\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_trace_statement_digest', 'PROCEDURE', 'ps_trace_statement_digest', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F6469676573742056415243484152283332292C0A2020202020202020494E20696E5F72756E74696D6520494E542C0A2020202020202020494E20696E5F696E74657276616C20444543494D414C28322C32292C0A2020202020202020494E20696E5F73746172745F667265736820424F4F4C45414E2C0A2020202020202020494E20696E5F6175746F5F656E61626C6520424F4F4C45414E0A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Traces all instrumentation within Performance Schema for a specific\n             Statement Digest.\n             When finding a statement of interest within the\n             performance_schema.events_statements_summary_by_digest table, feed\n             the DIGEST MD5 value in to this procedure, set how long to poll for,\n             and at what interval to poll, and it will generate a report of all\n             statistics tracked within Performance Schema for that digest for the\n             interval.\n             It will also attempt to generate an EXPLAIN for the longest running\n             example of the digest during the interval. Note this may fail, as:\n                * Performance Schema truncates long SQL_TEXT values (and hence the\n                  EXPLAIN will fail due to parse errors)\n                * the default schema is sys (so tables that are not fully qualified\n                  in the query may not be found)\n                * some queries such as SHOW are not supported in EXPLAIN.\n             When the EXPLAIN fails, the error will be ignored and no EXPLAIN\n             output generated.\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Parameters\n             in_digest (VARCHAR(32)):\n               The statement digest identifier you would like to analyze\n             in_runtime (INT):\n               The number of seconds to run analysis for\n             in_interval (DECIMAL(2,2)):\n               The interval (in seconds, may be fractional) at which to try\n               and take snapshots\n             in_start_fresh (BOOLEAN):\n               Whether to TRUNCATE the events_statements_history_long and\n               events_stages_history_long tables before starting\n             in_auto_enable (BOOLEAN):\n               Whether to automatically turn on required consumers\n             Example\n             mysql> call ps_trace_statement_digest(\'891ec6860f98ba46d89dd20b0c03652c\', 10, 0.1, true, true);\n             +--------------------+\n             | SUMMARY STATISTICS |\n             +--------------------+\n             | SUMMARY STATISTICS |\n             +--------------------+\n             1 row in set (9.11 sec)\n             +------------+-----------+-----------+-----------+---------------+------------+------------+\n             | executions | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scans |\n             +------------+-----------+-----------+-----------+---------------+------------+------------+\n             |         21 | 4.11 ms   | 2.00 ms   |         0 |            21 |          0 |          0 |\n             +------------+-----------+-----------+-----------+---------------+------------+------------+\n             1 row in set (9.11 sec)\n             +------------------------------------------+-------+-----------+\n             | event_name                               | count | latency   |\n             +------------------------------------------+-------+-----------+\n             | stage/sql/checking query cache for query |    16 | 724.37 us |\n             | stage/sql/statistics                     |    16 | 546.92 us |\n             | stage/sql/freeing items                  |    18 | 520.11 us |\n             | stage/sql/init                           |    51 | 466.80 us |\n             ...\n             | stage/sql/cleaning up                    |    18 | 11.92 us  |\n             | stage/sql/executing                      |    16 | 6.95 us   |\n             +------------------------------------------+-------+-----------+\n             17 rows in set (9.12 sec)\n             +---------------------------+\n             | LONGEST RUNNING STATEMENT |\n             +---------------------------+\n             | LONGEST RUNNING STATEMENT |\n             +---------------------------+\n             1 row in set (9.16 sec)\n             +-----------+-----------+-----------+-----------+---------------+------------+-----------+\n             | thread_id | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scan |\n             +-----------+-----------+-----------+-----------+---------------+------------+-----------+\n             |    166646 | 618.43 us | 1.00 ms   |         0 |             1 |          0 |         0 |\n             +-----------+-----------+-----------+-----------+---------------+------------+-----------+\n             1 row in set (9.16 sec)\n             // Truncated for clarity...\n             +-----------------------------------------------------------------+\n             | sql_text                                                        |\n             +-----------------------------------------------------------------+\n             | select hibeventhe0_.id as id1382_, hibeventhe0_.createdTime ... |\n             +-----------------------------------------------------------------+\n             1 row in set (9.17 sec)\n             +------------------------------------------+-----------+\n             | event_name                               | latency   |\n             +------------------------------------------+-----------+\n             | stage/sql/init                           | 8.61 us   |\n             | stage/sql/Waiting for query cache lock   | 453.23 us |\n             | stage/sql/init                           | 331.07 ns |\n             | stage/sql/checking query cache for query | 43.04 us  |\n             ...\n             | stage/sql/freeing items                  | 30.46 us  |\n             | stage/sql/cleaning up                    | 662.13 ns |\n             +------------------------------------------+-----------+\n             18 rows in set (9.23 sec)\n             +----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n             | id | select_type | table        | type  | possible_keys | key       | key_len | ref         | rows | Extra |\n             +----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n             |  1 | SIMPLE      | hibeventhe0_ | const | fixedTime     | fixedTime | 775     | const,const |    1 | NULL  |\n             +----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n             1 row in set (9.27 sec)\n             Query OK, 0 rows affected (9.28 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'ps_trace_thread', 'PROCEDURE', 'ps_trace_thread', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Dumps all data within Performance Schema for an instrumented thread,\n             to create a DOT formatted graph file.\n             Each resultset returned from the procedure should be used for a complete graph\n             Requires the SUPER privilege for \"SET sql_log_bin = 0;\".\n             Parameters\n             in_thread_id (BIGINT UNSIGNED):\n               The thread that you would like a stack trace for\n             in_outfile  (VARCHAR(255)):\n               The filename the dot file will be written to\n             in_max_runtime (DECIMAL(20,2)):\n               The maximum time to keep collecting data.\n               Use NULL to get the default which is 60 seconds.\n             in_interval (DECIMAL(20,2)):\n               How long to sleep between data collections.\n               Use NULL to get the default which is 1 second.\n             in_start_fresh (BOOLEAN):\n               Whether to reset all Performance Schema data before tracing.\n             in_auto_setup (BOOLEAN):\n               Whether to disable all other threads and enable all consumers/instruments.\n               This will also reset the settings at the end of the run.\n             in_debug (BOOLEAN):\n               Whether you would like to include file:lineno in the graph\n             Example\n             mysql> CALL sys.ps_trace_thread(25, CONCAT(\'/tmp/stack-\', REPLACE(NOW(), \' \', \'-\'), \'.dot\'), NULL, NULL, TRUE, TRUE, TRUE);\n             +-------------------+\n             | summary           |\n             +-------------------+\n             | Disabled 1 thread |\n             +-------------------+\n             1 row in set (0.00 sec)\n             +---------------------------------------------+\n             | Info                                        |\n             +---------------------------------------------+\n             | Data collection starting for THREAD_ID = 25 |\n             +---------------------------------------------+\n             1 row in set (0.03 sec)\n             +-----------------------------------------------------------+\n             | Info                                                      |\n             +-----------------------------------------------------------+\n             | Stack trace written to /tmp/stack-2014-02-16-21:18:41.dot |\n             +-----------------------------------------------------------+\n             1 row in set (60.07 sec)\n             +-------------------------------------------------------------------+\n             | Convert to PDF                                                    |\n             +-------------------------------------------------------------------+\n             | dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2014-02-16-21:18:41.dot |\n             +-------------------------------------------------------------------+\n             1 row in set (60.07 sec)\n             +-------------------------------------------------------------------+\n             | Convert to PNG                                                    |\n             +-------------------------------------------------------------------+\n             | dot -Tpng -o /tmp/stack_25.png /tmp/stack-2014-02-16-21:18:41.dot |\n             +-------------------------------------------------------------------+\n             1 row in set (60.07 sec)\n             +------------------+\n             | summary          |\n             +------------------+\n             | Enabled 1 thread |\n             +------------------+\n             1 row in set (60.32 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 
INSERT INTO `proc` VALUES ('sys', 'format_path', 'FUNCTION', 'format_path', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x696E5F70617468205641524348415228353132290A20202020, 0x766172636861722835313229204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a raw path value, and strips out the datadir or tmpdir\n             replacing with @@datadir and @@tmpdir respectively.\n             Also normalizes the paths across operating systems, so backslashes\n             on Windows are converted to forward slashes\n             Parameters\n             path (VARCHAR(512)):\n               The raw file path value to format.\n             Returns\n             VARCHAR(512) CHARSET UTF8\n             Example\n             mysql> select @@datadir;\n             +-----------------------------------------------+\n             | @@datadir                                     |\n             +-----------------------------------------------+\n             | /Users/mark/sandboxes/SmallTree/AMaster/data/ |\n             +-----------------------------------------------+\n             1 row in set (0.06 sec)\n             mysql> select format_path(\'/Users/mark/sandboxes/SmallTree/AMaster/data/mysql/proc.MYD\') AS path;\n             +--------------------------+\n             | path                     |\n             +--------------------------+\n             | @@datadir/mysql/proc.MYD |\n             +--------------------------+\n             1 row in set (0.03 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_is_instrument_default_timed', 'FUNCTION', 'ps_is_instrument_default_timed', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x696E5F696E737472756D656E74205641524348415228313238290A20202020, 0x656E756D2827594553272C274E4F2729204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns whether an instrument is timed by default in this version of MySQL.\n             Parameters\n             in_instrument VARCHAR(128):\n               The instrument to check.\n             Returns\n             ENUM(\'YES\', \'NO\')\n             Example\n             mysql> SELECT sys.ps_is_instrument_default_timed(\'statement/sql/select\');\n             +------------------------------------------------------------+\n             | sys.ps_is_instrument_default_timed(\'statement/sql/select\') |\n             +------------------------------------------------------------+\n             | YES                                                        |\n             +------------------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'list_drop', 'FUNCTION', 'list_drop', 'SQL', 'CONTAINS_SQL', 'YES', 'INVOKER', 0x696E5F6C69737420544558542C0A2020202020202020696E5F64726F705F76616C756520544558540A20202020, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a list, and a value to attempt to remove from the list, and returns the resulting list.\n             Useful for altering certain session variables, like sql_mode or optimizer_switch for instance.\n             Parameters\n             in_list (TEXT):\n               The comma separated list to drop a value from\n             in_drop_value (TEXT):\n               The value to drop from the input list\n             Returns\n             TEXT\n             Example\n             mysql> select @@sql_mode;\n             +-----------------------------------------------------------------------------------------------+\n             | @@sql_mode                                                                                    |\n             +-----------------------------------------------------------------------------------------------+\n             | ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n             +-----------------------------------------------------------------------------------------------+\n             1 row in set (0.00 sec)\n             mysql> set sql_mode = sys.list_drop(@@sql_mode, \'ONLY_FULL_GROUP_BY\');\n             Query OK, 0 rows affected (0.03 sec)\n             mysql> select @@sql_mode;\n             +----------------------------------------------------------------------------+\n             | @@sql_mode                                                                 |\n             +----------------------------------------------------------------------------+\n             | ANSI_QUOTES,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n             +----------------------------------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_setup_disable_thread', 'PROCEDURE', 'ps_setup_disable_thread', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F636F6E6E656374696F6E5F696420424947494E540A20202020, '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D20274E4F270A202020202057484552452070726F636573736C6973745F6964203D20696E5F636F6E6E656374696F6E5F69643B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Disable the given connection/thread in Performance Schema.\n             Parameters\n             in_connection_id (BIGINT):\n               The connection ID (PROCESSLIST_ID from performance_schema.threads\n               or the ID shown within SHOW PROCESSLIST)\n             Example\n             mysql> CALL sys.ps_setup_disable_thread(3);\n             +-------------------+\n             | summary           |\n             +-------------------+\n             | Disabled 1 thread |\n             +-------------------+\n             1 row in set (0.01 sec)\n             To disable the current connection:\n             mysql> CALL sys.ps_setup_disable_thread(CONNECTION_ID());\n             +-------------------+\n             | summary           |\n             +-------------------+\n             | Disabled 1 thread |\n             +-------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D20274E4F270A202020202057484552452070726F636573736C6973745F6964203D20696E5F636F6E6E656374696F6E5F69643B0A2020202053454C45435420434F4E434154282744697361626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_disable_instrument', 'PROCEDURE', 'ps_setup_disable_instrument', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F7061747465726E205641524348415228313238290A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Disables instruments within Performance Schema\n             matching the input pattern.\n             Parameters\n             in_pattern (VARCHAR(128)):\n               A LIKE pattern match (using \"%in_pattern%\") of events to disable\n             Example\n             To disable all mutex instruments:\n             mysql> CALL sys.ps_setup_disable_instrument(\'wait/synch/mutex\');\n             +--------------------------+\n             | summary                  |\n             +--------------------------+\n             | Disabled 155 instruments |\n             +--------------------------+\n             1 row in set (0.02 sec)\n             To disable just a specific TCP/IP based network IO instrument:\n             mysql> CALL sys.ps_setup_disable_instrument(\'wait/io/socket/sql/server_tcpip_socket\');\n             +------------------------+\n             | summary                |\n             +------------------------+\n             | Disabled 1 instruments |\n             +------------------------+\n             1 row in set (0.00 sec)\n             To disable all instruments:\n             mysql> CALL sys.ps_setup_disable_instrument(\'\');\n             +--------------------------+\n             | summary                  |\n             +--------------------------+\n             | Disabled 547 instruments |\n             +--------------------------+\n             1 row in set (0.01 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_thread_account', 'FUNCTION', 'ps_thread_account', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x696E5F7468726561645F696420424947494E5420554E5349474E45440A20202020, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0x424547494E0A2020202052455455524E202853454C454354204946280A2020202020202020202020202020202020202020202074797065203D2027464F524547524F554E44272C0A20202020202020202020202020202020202020202020434F4E4341542870726F636573736C6973745F757365722C202740272C2070726F636573736C6973745F686F7374292C0A20202020202020202020202020202020202020202020747970650A20202020202020202020202020202020202020202029204153206163636F756E740A202020202020202020202020202046524F4D2060706572666F726D616E63655F736368656D61602E6074687265616473600A202020202020202020202020205748455245207468726561645F6964203D20696E5F7468726561645F6964293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Return the user@host account for the given Performance Schema thread id.\n             Parameters\n             in_thread_id (BIGINT UNSIGNED):\n               The id of the thread to return the account for.\n             Example\n             mysql> select thread_id, processlist_user, processlist_host from performance_schema.threads where type = \'foreground\';\n              +-----------+------------------+------------------+\n              | thread_id | processlist_user | processlist_host |\n              +-----------+------------------+------------------+\n              |        23 | NULL             | NULL             |\n              |        30 | root             | localhost        |\n              |        31 | msandbox         | localhost        |\n              |        32 | msandbox         | localhost        |\n              +-----------+------------------+------------------+\n              4 rows in set (0.00 sec)\n              mysql> select sys.ps_thread_account(31);\n              +---------------------------+\n              | sys.ps_thread_account(31) |\n              +---------------------------+\n              | msandbox@localhost        |\n              +---------------------------+\n              1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_thread_id', 'FUNCTION', 'ps_thread_id', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x696E5F636F6E6E656374696F6E5F696420424947494E5420554E5349474E45440A20202020, 0x626967696E742832302920756E7369676E6564, 0x424547494E0A2020202052455455524E202853454C454354205448524541445F49440A202020202020202020202020202046524F4D2060706572666F726D616E63655F736368656D61602E6074687265616473600A2020202020202020202020202057484552452050524F434553534C4953545F4944203D2049464E554C4C28696E5F636F6E6E656374696F6E5F69642C20434F4E4E454354494F4E5F49442829290A2020202020202020202020293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Return the Performance Schema THREAD_ID for the specified connection ID.\n             Parameters\n             in_connection_id (BIGINT UNSIGNED):\n               The id of the connection to return the thread id for. If NULL, the current\n               connection thread id is returned.\n             Example\n             mysql> SELECT sys.ps_thread_id(79);\n             +----------------------+\n             | sys.ps_thread_id(79) |\n             +----------------------+\n             |                   98 |\n             +----------------------+\n             1 row in set (0.00 sec)\n             mysql> SELECT sys.ps_thread_id(CONNECTION_ID());\n             +-----------------------------------+\n             | sys.ps_thread_id(CONNECTION_ID()) |\n             +-----------------------------------+\n             |                                98 |\n             +-----------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E202853454C454354205448524541445F49440A202020202020202020202020202046524F4D2060706572666F726D616E63655F736368656D61602E6074687265616473600A2020202020202020202020202057484552452050524F434553534C4953545F4944203D2049464E554C4C28696E5F636F6E6E656374696F6E5F69642C20434F4E4E454354494F4E5F49442829290A2020202020202020202020293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_enable_instrument', 'PROCEDURE', 'ps_setup_enable_instrument', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F7061747465726E205641524348415228313238290A20202020, '', 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Enables instruments within Performance Schema\n             matching the input pattern.\n             Parameters\n             in_pattern (VARCHAR(128)):\n               A LIKE pattern match (using \"%in_pattern%\") of events to enable\n             Example\n             To enable all mutex instruments:\n             mysql> CALL sys.ps_setup_enable_instrument(\'wait/synch/mutex\');\n             +-------------------------+\n             | summary                 |\n             +-------------------------+\n             | Enabled 155 instruments |\n             +-------------------------+\n             1 row in set (0.02 sec)\n             Query OK, 0 rows affected (0.02 sec)\n             To enable just a specific TCP/IP based network IO instrument:\n             mysql> CALL sys.ps_setup_enable_instrument(\'wait/io/socket/sql/server_tcpip_socket\');\n             +-----------------------+\n             | summary               |\n             +-----------------------+\n             | Enabled 1 instruments |\n             +-----------------------+\n             1 row in set (0.00 sec)\n             Query OK, 0 rows affected (0.00 sec)\n             To enable all instruments:\n             mysql> CALL sys.ps_setup_enable_instrument(\'\');\n             +-------------------------+\n             | summary                 |\n             +-------------------------+\n             | Enabled 547 instruments |\n             +-------------------------+\n             1 row in set (0.01 sec)\n             Query OK, 0 rows affected (0.01 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_setup_enable_background_threads', 'PROCEDURE', 'ps_setup_enable_background_threads', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', '', '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D2027594553270A202020202057484552452074797065203D20274241434B47524F554E44273B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C2027206261636B67726F756E6420746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Enable all background thread instrumentation within Performance Schema.\n             Parameters\n             None.\n             Example\n             mysql> CALL sys.ps_setup_enable_background_threads();\n             +-------------------------------+\n             | summary                       |\n             +-------------------------------+\n             | Enabled 18 background threads |\n             +-------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D2027594553270A202020202057484552452074797065203D20274241434B47524F554E44273B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C2027206261636B67726F756E6420746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_enable_thread', 'PROCEDURE', 'ps_setup_enable_thread', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20696E5F636F6E6E656374696F6E5F696420424947494E540A20202020, '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D2027594553270A202020202057484552452070726F636573736C6973745F6964203D20696E5F636F6E6E656374696F6E5F69643B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Enable the given connection/thread in Performance Schema.\n             Parameters\n             in_connection_id (BIGINT):\n               The connection ID (PROCESSLIST_ID from performance_schema.threads\n               or the ID shown within SHOW PROCESSLIST)\n             Example\n             mysql> CALL sys.ps_setup_enable_thread(3);\n             +------------------+\n             | summary          |\n             +------------------+\n             | Enabled 1 thread |\n             +------------------+\n             1 row in set (0.01 sec)\n             To enable the current connection:\n             mysql> CALL sys.ps_setup_enable_thread(CONNECTION_ID());\n             +------------------+\n             | summary          |\n             +------------------+\n             | Enabled 1 thread |\n             +------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E746872656164730A2020202020202053455420696E737472756D656E746564203D2027594553270A202020202057484552452070726F636573736C6973745F6964203D20696E5F636F6E6E656374696F6E5F69643B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720746872656164272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'sys_get_config', 'FUNCTION', 'sys_get_config', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x696E5F7661726961626C655F6E616D65205641524348415228313238292C0A2020202020202020696E5F64656661756C745F76616C7565205641524348415228313238290A20202020, 0x766172636861722831323829204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns the value for the requested variable using the following logic:\n                1. If the option exists in sys.sys_config return the value from there.\n                2. Else fall back on the provided default value.\n             Notes for using sys_get_config():\n                * If the default value argument to sys_get_config() is NULL and case 2. is reached, NULL is returned.\n                  It is then expected that the caller is able to handle NULL for the given configuration option.\n                * The convention is to name the user variables @sys.<name of variable>. It is <name of variable> that\n                  is stored in the sys_config table and is what is expected as the argument to sys_get_config().\n                * If you want to check whether the configuration option has already been set and if not assign with\n                  the return value of sys_get_config() you can use IFNULL(...) (see example below). However this should\n                  not be done inside a loop (e.g. for each row in a result set) as for repeated calls where assignment\n                  is only needed in the first iteration using IFNULL(...) is expected to be significantly slower than\n                  using an IF (...) THEN ... END IF; block (see example below).\n             Parameters\n             in_variable_name (VARCHAR(128)):\n               The name of the config option to return the value for.\n             in_default_value (VARCHAR(128)):\n               The default value to return if the variable does not exist in sys.sys_config.\n             Returns\n             VARCHAR(128)\n             Example\n             mysql> SELECT sys.sys_get_config(\'statement_truncate_len\', 128) AS Value;\n             +-------+\n             | Value |\n             +-------+\n             | 64    |\n             +-------+\n             1 row in set (0.00 sec)\n             mysql> SET @sys.statement_truncate_len = IFNULL(@sys.statement_truncate_len, sys.sys_get_config(\'statement_truncate_len\', 64));\n             Query OK, 0 rows affected (0.00 sec)\n             IF (@sys.statement_truncate_len IS NULL) THEN\n                 SET @sys.statement_truncate_len = sys.sys_get_config(\'statement_truncate_len\', 64);\n             END IF;\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A202020204445434C41524520765F76616C7565205641524348415228313238292044454641554C54204E554C4C3B0A202020204445434C415245206F6C645F76616C20494E54454745522044454641554C54204E554C4C3B0A2020202053455420765F76616C7565203D202853454C4543542076616C75652046524F4D207379732E7379735F636F6E666967205748455245207661726961626C65203D20696E5F7661726961626C655F6E616D65293B0A2020202049462028765F76616C7565204953204E554C4C29205448454E0A202020202020202053455420765F76616C7565203D20696E5F64656661756C745F76616C75653B0A20202020454E442049463B0A2020202052455455524E20765F76616C75653B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'format_statement', 'FUNCTION', 'format_statement', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x73746174656D656E74204C4F4E47544558540A20202020, 0x6C6F6E6774657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Formats a normalized statement, truncating it if it is > 64 characters long by default.\n             To configure the length to truncate the statement to by default, update the `statement_truncate_len`\n             variable with `sys_config` table to a different value. Alternatively, to change it just for just\n             your particular session, use `SET @sys.statement_truncate_len := <some new value>`.\n             Useful for printing statement related data from Performance Schema from\n             the command line.\n             Parameters\n             statement (LONGTEXT):\n               The statement to format.\n             Returns\n             LONGTEXT\n             Example\n             mysql> SELECT sys.format_statement(digest_text)\n                 ->   FROM performance_schema.events_statements_summary_by_digest\n                 ->  ORDER by sum_timer_wait DESC limit 5;\n             +-------------------------------------------------------------------+\n             | sys.format_statement(digest_text)                                 |\n             +-------------------------------------------------------------------+\n             | CREATE SQL SECURITY INVOKER VI ... KE ? AND `variable_value` > ?  |\n             | CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `esc` . ... |\n             | CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `sys` . ... |\n             | CREATE SQL SECURITY INVOKER VI ...  , `compressed_size` ) ) DESC  |\n             | CREATE SQL SECURITY INVOKER VI ... LIKE ? ORDER BY `timer_start`  |\n             +-------------------------------------------------------------------+\n             5 rows in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'version_minor', 'FUNCTION', 'version_minor', 'SQL', 'NO_SQL', 'NO', 'INVOKER', '', 0x74696E79696E7428332920756E7369676E6564, 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C2032292C20272E272C202D31293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns the minor (release series) version of MySQL Server.\n             Returns\n             TINYINT UNSIGNED\n             Example\n             mysql> SELECT VERSION(), sys.server_minor();\n             +--------------------------------------+---------------------+\n             | VERSION()                            | sys.version_minor() |\n             +--------------------------------------+---------------------+\n             | 5.7.9-enterprise-commercial-advanced | 7                   |\n             +--------------------------------------+---------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C2032292C20272E272C202D31293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'extract_schema_from_file_name', 'FUNCTION', 'extract_schema_from_file_name', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x70617468205641524348415228353132290A20202020, 0x7661726368617228363429204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0x424547494E0A2020202052455455524E204C45465428535542535452494E475F494E44455828535542535452494E475F494E444558285245504C41434528706174682C20275C5C272C20272F27292C20272F272C202D32292C20272F272C2031292C203634293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a raw file path, and attempts to extract the schema name from it.\n             Useful for when interacting with Performance Schema data\n             concerning IO statistics, for example.\n             Currently relies on the fact that a table data file will be within a\n             specified database directory (will not work with partitions or tables\n             that specify an individual DATA_DIRECTORY).\n             Parameters\n             path (VARCHAR(512)):\n               The full file path to a data file to extract the schema name from.\n             Returns\n             VARCHAR(64)\n             Example\n             mysql> SELECT sys.extract_schema_from_file_name(\'/var/lib/mysql/employees/employee.ibd\');\n             +----------------------------------------------------------------------------+\n             | sys.extract_schema_from_file_name(\'/var/lib/mysql/employees/employee.ibd\') |\n             +----------------------------------------------------------------------------+\n             | employees                                                                  |\n             +----------------------------------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E204C45465428535542535452494E475F494E44455828535542535452494E475F494E444558285245504C41434528706174682C20275C272C20272F27292C20272F272C202D32292C20272F272C2031292C203634293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'format_time', 'FUNCTION', 'format_time', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x7069636F7365636F6E647320544558540A20202020, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a raw picoseconds value, and converts it to a human readable form.\n             Picoseconds are the precision that all latency values are printed in\n             within Performance Schema, however are not user friendly when wanting\n             to scan output from the command line.\n             Parameters\n             picoseconds (TEXT):\n               The raw picoseconds value to convert.\n             Returns\n             TEXT\n             Example\n             mysql> select format_time(342342342342345);\n             +------------------------------+\n             | format_time(342342342342345) |\n             +------------------------------+\n             | 00:05:42                     |\n             +------------------------------+\n             1 row in set (0.00 sec)\n             mysql> select format_time(342342342);\n             +------------------------+\n             | format_time(342342342) |\n             +------------------------+\n             | 342.34 us              |\n             +------------------------+\n             1 row in set (0.00 sec)\n             mysql> select format_time(34234);\n              +--------------------+\n             | format_time(34234) |\n             +--------------------+\n             | 34.23 ns           |\n             +--------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A20204946207069636F7365636F6E6473204953204E554C4C205448454E2052455455524E204E554C4C3B0A2020454C53454946207069636F7365636F6E6473203E3D20363034383030303030303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F203630343830303030303030303030303030302C2032292C2027207727293B0A2020454C53454946207069636F7365636F6E6473203E3D203836343030303030303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F2038363430303030303030303030303030302C2032292C2027206427293B0A2020454C53454946207069636F7365636F6E6473203E3D2033363030303030303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F20333630303030303030303030303030302C2032292C2027206827293B0A2020454C53454946207069636F7365636F6E6473203E3D203630303030303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F2036303030303030303030303030302C2032292C2027206D27293B0A2020454C53454946207069636F7365636F6E6473203E3D2031303030303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F20313030303030303030303030302C2032292C2027207327293B0A2020454C53454946207069636F7365636F6E6473203E3D2031303030303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F20313030303030303030302C2032292C2027206D7327293B0A2020454C53454946207069636F7365636F6E6473203E3D2031303030303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F20313030303030302C2032292C202720757327293B0A2020454C53454946207069636F7365636F6E6473203E3D2031303030205448454E2052455455524E20434F4E43415428524F554E44287069636F7365636F6E6473202F20313030302C2032292C2027206E7327293B0A2020454C53452052455455524E20434F4E434154287069636F7365636F6E64732C202720707327293B0A2020454E442049463B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'extract_table_from_file_name', 'FUNCTION', 'extract_table_from_file_name', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x70617468205641524348415228353132290A20202020, 0x7661726368617228363429204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0x424547494E0A2020202052455455524E204C45465428535542535452494E475F494E444558285245504C41434528535542535452494E475F494E444558285245504C41434528706174682C20275C5C272C20272F27292C20272F272C202D31292C20274030303234272C20272427292C20272E272C2031292C203634293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a raw file path, and extracts the table name from it.\n             Useful for when interacting with Performance Schema data\n             concerning IO statistics, for example.\n             Parameters\n             path (VARCHAR(512)):\n               The full file path to a data file to extract the table name from.\n             Returns\n             VARCHAR(64)\n             Example\n             mysql> SELECT sys.extract_table_from_file_name(\'/var/lib/mysql/employees/employee.ibd\');\n             +---------------------------------------------------------------------------+\n             | sys.extract_table_from_file_name(\'/var/lib/mysql/employees/employee.ibd\') |\n             +---------------------------------------------------------------------------+\n             | employee                                                                  |\n             +---------------------------------------------------------------------------+\n             1 row in set (0.02 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E204C45465428535542535452494E475F494E444558285245504C41434528535542535452494E475F494E444558285245504C41434528706174682C20275C272C20272F27292C20272F272C202D31292C20274030303234272C20272427292C20272E272C2031292C203634293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_is_account_enabled', 'FUNCTION', 'ps_is_account_enabled', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x696E5F686F73742056415243484152283630292C0A2020202020202020696E5F757365722056415243484152283136290A20202020, 0x656E756D2827594553272C274E4F2729204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Determines whether instrumentation of an account is enabled\n             within Performance Schema.\n             Parameters\n             in_host VARCHAR(60):\n               The hostname of the account to check.\n             in_user (VARCHAR(16)):\n               The username of the account to check.\n             Returns\n             ENUM(\'YES\', \'NO\', \'PARTIAL\')\n             Example\n             mysql> SELECT sys.ps_is_account_enabled(\'localhost\', \'root\');\n             +------------------------------------------------+\n             | sys.ps_is_account_enabled(\'localhost\', \'root\') |\n             +------------------------------------------------+\n             | YES                                            |\n             +------------------------------------------------+\n             1 row in set (0.01 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_is_thread_instrumented', 'FUNCTION', 'ps_is_thread_instrumented', 'SQL', 'READS_SQL_DATA', 'NO', 'INVOKER', 0x696E5F636F6E6E656374696F6E5F696420424947494E5420554E5349474E45440A20202020, 0x656E756D2827594553272C274E4F272C27554E4B4E4F574E2729204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Checks whether the provided connection id is instrumented within Performance Schema.\n             Parameters\n             in_connection_id (BIGINT UNSIGNED):\n               The id of the connection to check.\n             Returns\n             ENUM(\'YES\', \'NO\', \'UNKNOWN\')\n             Example\n             mysql> SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());\n             +------------------------------------------------+\n             | sys.ps_is_thread_instrumented(CONNECTION_ID()) |\n             +------------------------------------------------+\n             | YES                                            |\n             +------------------------------------------------+\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'quote_identifier', 'FUNCTION', 'quote_identifier', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x696E5F6964656E7469666965722054455854, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0x424547494E0A2020202052455455524E20434F4E434154282760272C205245504C41434528696E5F6964656E7469666965722C202760272C2027606027292C20276027293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes an unquoted identifier (schema name, table name, etc.) and\n             returns the identifier quoted with backticks.\n             Parameters\n             in_identifier (TEXT):\n               The identifier to quote.\n             Returns\n             TEXT\n             Example\n             mysql> SELECT sys.quote_identifier(\'my_identifier\') AS Identifier;\n             +-----------------+\n             | Identifier      |\n             +-----------------+\n             | `my_identifier` |\n             +-----------------+\n             1 row in set (0.00 sec)\n             mysql> SELECT sys.quote_identifier(\'my`idenfier\') AS Identifier;\n             +----------------+\n             | Identifier     |\n             +----------------+\n             | `my``idenfier` |\n             +----------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E20434F4E434154282760272C205245504C41434528696E5F6964656E7469666965722C202760272C2027606027292C20276027293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'version_major', 'FUNCTION', 'version_major', 'SQL', 'NO_SQL', 'NO', 'INVOKER', '', 0x74696E79696E7428332920756E7369676E6564, 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C2031293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns the major version of MySQL Server.\n             Returns\n             TINYINT UNSIGNED\n             Example\n             mysql> SELECT VERSION(), sys.version_major();\n             +--------------------------------------+---------------------+\n             | VERSION()                            | sys.version_major() |\n             +--------------------------------------+---------------------+\n             | 5.7.9-enterprise-commercial-advanced | 5                   |\n             +--------------------------------------+---------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C2031293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'format_bytes', 'FUNCTION', 'format_bytes', 'SQL', 'NO_SQL', 'YES', 'INVOKER', 0x627974657320544558540A20202020, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a raw bytes value, and converts it to a human readable format.\n             Parameters\n             bytes (TEXT):\n               A raw bytes value.\n             Returns\n             TEXT\n             Example\n             mysql> SELECT sys.format_bytes(2348723492723746) AS size;\n             +----------+\n             | size     |\n             +----------+\n             | 2.09 PiB |\n             +----------+\n             1 row in set (0.00 sec)\n             mysql> SELECT sys.format_bytes(2348723492723) AS size;\n             +----------+\n             | size     |\n             +----------+\n             | 2.14 TiB |\n             +----------+\n             1 row in set (0.00 sec)\n             mysql> SELECT sys.format_bytes(23487234) AS size;\n             +-----------+\n             | size      |\n             +-----------+\n             | 22.40 MiB |\n             +-----------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'ps_is_consumer_enabled', 'FUNCTION', 'ps_is_consumer_enabled', 'SQL', 'READS_SQL_DATA', 'YES', 'INVOKER', 0x696E5F636F6E73756D65722076617263686172283634290A202020, 0x656E756D2827594553272C274E4F2729204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Determines whether a consumer is enabled (taking the consumer hierarchy into consideration)\n             within the Performance Schema.\n             Parameters\n             in_consumer VARCHAR(64):\n               The name of the consumer to check.\n             Returns\n             ENUM(\'YES\', \'NO\')\n             Example\n             mysql> SELECT sys.ps_is_consumer_enabled(\'events_stages_history\');\n             +-----------------------------------------------------+\n             | sys.ps_is_consumer_enabled(\'events_stages_history\') |\n             +-----------------------------------------------------+\n             | NO                                                  |\n             +-----------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x
INSERT INTO `proc` VALUES ('sys', 'version_patch', 'FUNCTION', 'version_patch', 'SQL', 'NO_SQL', 'NO', 'INVOKER', '', 0x74696E79696E7428332920756E7369676E6564, 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C202D31293B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Returns the patch release version of MySQL Server.\n             Returns\n             TINYINT UNSIGNED\n             Example\n             mysql> SELECT VERSION(), sys.version_patch();\n             +--------------------------------------+---------------------+\n             | VERSION()                            | sys.version_patch() |\n             +--------------------------------------+---------------------+\n             | 5.7.9-enterprise-commercial-advanced | 9                   |\n             +--------------------------------------+---------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202052455455524E20535542535452494E475F494E44455828535542535452494E475F494E4445582856455253494F4E28292C20272D272C2031292C20272E272C202D31293B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'ps_setup_enable_consumer', 'PROCEDURE', 'ps_setup_enable_consumer', 'SQL', 'MODIFIES_SQL_DATA', 'NO', 'INVOKER', 0x0A2020202020202020494E20636F6E73756D6572205641524348415228313238290A20202020, '', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020202053455420656E61626C6564203D2027594553270A20202020205748455245206E616D65204C494B4520434F4E434154282725272C20636F6E73756D65722C20272527293B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720636F6E73756D6572272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'mariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Enables consumers within Performance Schema\n             matching the input pattern.\n             Parameters\n             consumer (VARCHAR(128)):\n               A LIKE pattern match (using \"%consumer%\") of consumers to enable\n             Example\n             To enable all consumers:\n             mysql> CALL sys.ps_setup_enable_consumer(\'\');\n             +-------------------------+\n             | summary                 |\n             +-------------------------+\n             | Enabled 10 consumers    |\n             +-------------------------+\n             1 row in set (0.02 sec)\n             Query OK, 0 rows affected (0.02 sec)\n             To enable just \"waits\" consumers:\n             mysql> CALL sys.ps_setup_enable_consumer(\'waits\');\n             +-----------------------+\n             | summary               |\n             +-----------------------+\n             | Enabled 3 consumers   |\n             +-----------------------+\n             1 row in set (0.00 sec)\n             Query OK, 0 rows affected (0.00 sec)\n             ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202055504441544520706572666F726D616E63655F736368656D612E73657475705F636F6E73756D6572730A2020202020202053455420656E61626C6564203D2027594553270A20202020205748455245206E616D65204C494B4520434F4E434154282725272C20636F6E73756D65722C20272527293B0A2020202053454C45435420434F4E4341542827456E61626C656420272C2040726F7773203A3D20524F575F434F554E5428292C202720636F6E73756D6572272C2049462840726F777320213D20312C202773272C20272729292041532073756D6D6172793B0A454E44, 'NONE');
INSERT INTO `proc` VALUES ('sys', 'list_add', 'FUNCTION', 'list_add', 'SQL', 'CONTAINS_SQL', 'YES', 'INVOKER', 0x696E5F6C69737420544558542C0A2020202020202020696E5F6164645F76616C756520544558540A20202020, 0x74657874204348415253455420757466386D623320434F4C4C41544520757466386D62335F67656E6572616C5F6369, 0xmariadb.sys@localhost', '2024-06-05 16:48:02', '2024-06-05 16:48:02', '', '\n             Description\n             Takes a list, and a value to add to the list, and returns the resulting list.\n             Useful for altering certain session variables, like sql_mode or optimizer_switch for instance.\n             Parameters\n             in_list (TEXT):\n               The comma separated list to add a value to\n             in_add_value (TEXT):\n               The value to add to the input list\n             Returns\n             TEXT\n             Example\n             mysql> select @@sql_mode;\n             +-----------------------------------------------------------------------------------+\n             | @@sql_mode                                                                        |\n             +-----------------------------------------------------------------------------------+\n             | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n             +-----------------------------------------------------------------------------------+\n             1 row in set (0.00 sec)\n             mysql> set sql_mode = sys.list_add(@@sql_mode, \'ANSI_QUOTES\');\n             Query OK, 0 rows affected (0.06 sec)\n             mysql> select @@sql_mode;\n             +-----------------------------------------------------------------------------------------------+\n             | @@sql_mode                                                                                    |\n             +-----------------------------------------------------------------------------------------------+\n             | ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n             +-----------------------------------------------------------------------------------------------+\n             1 row in set (0.00 sec)\n            ', 'utf8mb3', 'utf8mb3_general_ci', 'utf8mb3_general_ci', 0x424547494E0A2020202049462028696E5F6164645F76616C7565204953204E554C4C29205448454E0A20202020202020205349474E414C2053514C535441544520273032323030270A2020202020202020202020534554204D4553534147455F54455854203D202746756E6374696F6E207379732E6C6973745F6164643A20696E5F6164645F76616C756520696E707574207661726961626C652073686F756C64206E6F74206265204E554C4C272C0A2020202020202020202020202020204D5953514C5F4552524E4F203D20313133383B0A20202020454E442049463B0A2020202049462028696E5F6C697374204953204E554C4C204F52204C454E47544828696E5F6C69737429203D203029205448454E0A202020202020202052455455524E20696E5F6164645F76616C75653B0A20202020454E442049463B0A2020202052455455524E202853454C45435420434F4E434154285452494D28424F544820272C272046524F4D205452494D28696E5F6C69737429292C20272C272C20696E5F6164645F76616C756529293B0A454E44, 'NONE');

-- ----------------------------
-- Table structure for procs_priv
-- ----------------------------
DROP TABLE IF EXISTS `procs_priv`;
CREATE TABLE `procs_priv`  (
  `Host` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Routine_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Routine_type` enum('FUNCTION','PROCEDURE','PACKAGE','PACKAGE BODY') CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `Grantor` varchar(384) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Host`, `Db`, `User`, `Routine_name`, `Routine_type`) USING BTREE,
  INDEX `Grantor`(`Grantor`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Procedure privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of procs_priv
-- ----------------------------

-- ----------------------------
-- Table structure for proxies_priv
-- ----------------------------
DROP TABLE IF EXISTS `proxies_priv`;
CREATE TABLE `proxies_priv`  (
  `Host` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Proxied_host` char(60) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Proxied_user` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `With_grant` tinyint(1) NOT NULL DEFAULT 0,
  `Grantor` varchar(384) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Host`, `User`, `Proxied_host`, `Proxied_user`) USING BTREE,
  INDEX `Grantor`(`Grantor`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'User proxy privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of proxies_priv
-- ----------------------------
INSERT INTO `proxies_priv` VALUES ('localhost', 'root', '', '', 1, '', '2021-05-29 12:19:28');
INSERT INTO `proxies_priv` VALUES ('bizzy', 'root', '', '', 1, '', '2021-05-29 12:19:28');

-- ----------------------------
-- Table structure for roles_mapping
-- ----------------------------
DROP TABLE IF EXISTS `roles_mapping`;
CREATE TABLE `roles_mapping`  (
  `Host` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Role` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Admin_option` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  UNIQUE INDEX `Host`(`Host`, `User`, `Role`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Granted roles' ROW_FORMAT = Page;

-- ----------------------------
-- Records of roles_mapping
-- ----------------------------

-- ----------------------------
-- Table structure for servers
-- ----------------------------
DROP TABLE IF EXISTS `servers`;
CREATE TABLE `servers`  (
  `Server_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Host` varchar(2048) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Username` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Password` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Port` int NOT NULL DEFAULT 0,
  `Socket` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Wrapper` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Owner` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`Server_name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'MySQL Foreign Servers table' ROW_FORMAT = Page;

-- ----------------------------
-- Records of servers
-- ----------------------------

-- ----------------------------
-- Table structure for slow_log
-- ----------------------------
DROP TABLE IF EXISTS `slow_log`;
CREATE TABLE `slow_log`  (
  `start_time` timestamp(6) NOT NULL DEFAULT current_timestamp(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `user_host` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `query_time` time(6) NOT NULL,
  `lock_time` time(6) NOT NULL,
  `rows_sent` bigint UNSIGNED NOT NULL,
  `rows_examined` bigint UNSIGNED NOT NULL,
  `db` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `last_insert_id` int NOT NULL,
  `insert_id` int NOT NULL,
  `server_id` int UNSIGNED NOT NULL,
  `sql_text` mediumtext CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `thread_id` bigint UNSIGNED NOT NULL,
  `rows_affected` bigint UNSIGNED NOT NULL
) ENGINE = CSV CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Slow log' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of slow_log
-- ----------------------------

-- ----------------------------
-- Table structure for table_stats
-- ----------------------------
DROP TABLE IF EXISTS `table_stats`;
CREATE TABLE `table_stats`  (
  `db_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `table_name` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `cardinality` bigint UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`db_name`, `table_name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Statistics on Tables' ROW_FORMAT = Page;

-- ----------------------------
-- Records of table_stats
-- ----------------------------

-- ----------------------------
-- Table structure for tables_priv
-- ----------------------------
DROP TABLE IF EXISTS `tables_priv`;
CREATE TABLE `tables_priv`  (
  `Host` char(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Db` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `User` char(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Table_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Grantor` varchar(384) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp ON UPDATE CURRENT_TIMESTAMP,
  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger','Delete versioning rows') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`Host`, `Db`, `User`, `Table_name`) USING BTREE,
  INDEX `Grantor`(`Grantor`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin COMMENT = 'Table privileges' ROW_FORMAT = Page;

-- ----------------------------
-- Records of tables_priv
-- ----------------------------
INSERT INTO `tables_priv` VALUES ('localhost', 'mysql', 'mariadb.sys', 'global_priv', 'root@localhost', '0000-00-00 00:00:00', 'Select,Delete', '');

-- ----------------------------
-- Table structure for time_zone
-- ----------------------------
DROP TABLE IF EXISTS `time_zone`;
CREATE TABLE `time_zone`  (
  `Time_zone_id` int UNSIGNED NOT NULL AUTO_INCREMENT,
  `Use_leap_seconds` enum('Y','N') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',
  PRIMARY KEY (`Time_zone_id`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Time zones' ROW_FORMAT = Page;

-- ----------------------------
-- Records of time_zone
-- ----------------------------

-- ----------------------------
-- Table structure for time_zone_leap_second
-- ----------------------------
DROP TABLE IF EXISTS `time_zone_leap_second`;
CREATE TABLE `time_zone_leap_second`  (
  `Transition_time` bigint NOT NULL,
  `Correction` int NOT NULL,
  PRIMARY KEY (`Transition_time`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Leap seconds information for time zones' ROW_FORMAT = Page;

-- ----------------------------
-- Records of time_zone_leap_second
-- ----------------------------

-- ----------------------------
-- Table structure for time_zone_name
-- ----------------------------
DROP TABLE IF EXISTS `time_zone_name`;
CREATE TABLE `time_zone_name`  (
  `Name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Time_zone_id` int UNSIGNED NOT NULL,
  PRIMARY KEY (`Name`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Time zone names' ROW_FORMAT = Page;

-- ----------------------------
-- Records of time_zone_name
-- ----------------------------

-- ----------------------------
-- Table structure for time_zone_transition
-- ----------------------------
DROP TABLE IF EXISTS `time_zone_transition`;
CREATE TABLE `time_zone_transition`  (
  `Time_zone_id` int UNSIGNED NOT NULL,
  `Transition_time` bigint NOT NULL,
  `Transition_type_id` int UNSIGNED NOT NULL,
  PRIMARY KEY (`Time_zone_id`, `Transition_time`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Time zone transitions' ROW_FORMAT = Page;

-- ----------------------------
-- Records of time_zone_transition
-- ----------------------------

-- ----------------------------
-- Table structure for time_zone_transition_type
-- ----------------------------
DROP TABLE IF EXISTS `time_zone_transition_type`;
CREATE TABLE `time_zone_transition_type`  (
  `Time_zone_id` int UNSIGNED NOT NULL,
  `Transition_type_id` int UNSIGNED NOT NULL,
  `Offset` int NOT NULL DEFAULT 0,
  `Is_DST` tinyint UNSIGNED NOT NULL DEFAULT 0,
  `Abbreviation` char(8) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`Time_zone_id`, `Transition_type_id`) USING BTREE
) ENGINE = Aria CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = 'Time zone transition types' ROW_FORMAT = Page;

-- ----------------------------
-- Records of time_zone_transition_type
-- ----------------------------

-- ----------------------------
-- Table structure for transaction_registry
-- ----------------------------
DROP TABLE IF EXISTS `transaction_registry`;
CREATE TABLE `transaction_registry`  (
  `transaction_id` bigint UNSIGNED NOT NULL,
  `commit_id` bigint UNSIGNED NOT NULL,
  `begin_timestamp` timestamp(6) NOT NULL DEFAULT '0000-00-00 00:00:00.000000',
  `commit_timestamp` timestamp(6) NOT NULL DEFAULT '0000-00-00 00:00:00.000000',
  `isolation_level` enum('READ-UNCOMMITTED','READ-COMMITTED','REPEATABLE-READ','SERIALIZABLE') CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`transaction_id`) USING BTREE,
  UNIQUE INDEX `commit_id`(`commit_id` ASC) USING BTREE,
  INDEX `begin_timestamp`(`begin_timestamp` ASC) USING BTREE,
  INDEX `commit_timestamp`(`commit_timestamp` ASC, `transaction_id` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb3 COLLATE = utf8mb3_bin ROW_FORMAT = Dynamic STATS_PERSISTENT = 0;

-- ----------------------------
-- Records of transaction_registry
-- ----------------------------

-- ----------------------------
-- View structure for user
-- ----------------------------
DROP VIEW IF EXISTS `user`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `user` AS select `global_priv`.`Host` AS `Host`,`global_priv`.`User` AS `User`,if(json_value(`global_priv`.`Priv`,'$.plugin') in ('mysql_native_password','mysql_old_password'),ifnull(json_value(`global_priv`.`Priv`,'$.authentication_string'),''),'') AS `Password`,if(json_value(`global_priv`.`Priv`,'$.access') & 1,'Y','N') AS `Select_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 2,'Y','N') AS `Insert_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 4,'Y','N') AS `Update_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 8,'Y','N') AS `Delete_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 16,'Y','N') AS `Create_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 32,'Y','N') AS `Drop_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 64,'Y','N') AS `Reload_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 128,'Y','N') AS `Shutdown_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 256,'Y','N') AS `Process_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 512,'Y','N') AS `File_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 1024,'Y','N') AS `Grant_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 2048,'Y','N') AS `References_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 4096,'Y','N') AS `Index_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 8192,'Y','N') AS `Alter_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 16384,'Y','N') AS `Show_db_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 32768,'Y','N') AS `Super_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 65536,'Y','N') AS `Create_tmp_table_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 131072,'Y','N') AS `Lock_tables_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 262144,'Y','N') AS `Execute_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 524288,'Y','N') AS `Repl_slave_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 1048576,'Y','N') AS `Repl_client_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 2097152,'Y','N') AS `Create_view_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 4194304,'Y','N') AS `Show_view_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 8388608,'Y','N') AS `Create_routine_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 16777216,'Y','N') AS `Alter_routine_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 33554432,'Y','N') AS `Create_user_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 67108864,'Y','N') AS `Event_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 134217728,'Y','N') AS `Trigger_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 268435456,'Y','N') AS `Create_tablespace_priv`,if(json_value(`global_priv`.`Priv`,'$.access') & 536870912,'Y','N') AS `Delete_history_priv`,elt(ifnull(json_value(`global_priv`.`Priv`,'$.ssl_type'),0) + 1,'','ANY','X509','SPECIFIED') AS `ssl_type`,ifnull(json_value(`global_priv`.`Priv`,'$.ssl_cipher'),'') AS `ssl_cipher`,ifnull(json_value(`global_priv`.`Priv`,'$.x509_issuer'),'') AS `x509_issuer`,ifnull(json_value(`global_priv`.`Priv`,'$.x509_subject'),'') AS `x509_subject`,cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_questions'),0) as unsigned) AS `max_questions`,cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_updates'),0) as unsigned) AS `max_updates`,cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_connections'),0) as unsigned) AS `max_connections`,cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_user_connections'),0) as signed) AS `max_user_connections`,ifnull(json_value(`global_priv`.`Priv`,'$.plugin'),'') AS `plugin`,ifnull(json_value(`global_priv`.`Priv`,'$.authentication_string'),'') AS `authentication_string`,if(ifnull(json_value(`global_priv`.`Priv`,'$.password_last_changed'),1) = 0,'Y','N') AS `password_expired`,elt(ifnull(json_value(`global_priv`.`Priv`,'$.is_role'),0) + 1,'N','Y') AS `is_role`,ifnull(json_value(`global_priv`.`Priv`,'$.default_role'),'') AS `default_role`,cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_statement_time'),0.0) as decimal(12,6)) AS `max_statement_time` from `global_priv`;

SET FOREIGN_KEY_CHECKS = 1;
